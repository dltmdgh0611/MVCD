
MVCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d5c  08003d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  2000000c  08003d70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08003d70  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010772  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024db  00000000  00000000  000307ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00033c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024be7  00000000  00000000  00034ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0de  00000000  00000000  0005969f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df0b9  00000000  00000000  0006677d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  001458b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d24 	.word	0x08003d24

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003d24 	.word	0x08003d24

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MVCD_delay_us>:

#define RST_PIN GPIO_PIN_14
#define RST_PORT GPIOF

void MVCD_delay_us (uint16_t us)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MVCD_delay_us+0x2c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80004fe:	bf00      	nop
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MVCD_delay_us+0x2c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	429a      	cmp	r2, r3
 800050a:	d3f9      	bcc.n	8000500 <MVCD_delay_us+0x14>
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000070 	.word	0x20000070

0800051c <MVCD_SendByte_SPI>:

void MVCD_SendByte_SPI(uint8_t byte)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e023      	b.n	8000574 <MVCD_SendByte_SPI+0x58>
	{
		if((byte<<i)&0x80)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000538:	2b00      	cmp	r3, #0
 800053a:	d006      	beq.n	800054a <MVCD_SendByte_SPI+0x2e>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	4810      	ldr	r0, [pc, #64]	; (8000584 <MVCD_SendByte_SPI+0x68>)
 8000544:	f001 fccc 	bl	8001ee0 <HAL_GPIO_WritePin>
 8000548:	e005      	b.n	8000556 <MVCD_SendByte_SPI+0x3a>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MVCD_SendByte_SPI+0x68>)
 8000552:	f001 fcc5 	bl	8001ee0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <MVCD_SendByte_SPI+0x6c>)
 800055e:	f001 fcbf 	bl	8001ee0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <MVCD_SendByte_SPI+0x6c>)
 800056a:	f001 fcb9 	bl	8001ee0 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b07      	cmp	r3, #7
 8000578:	ddd8      	ble.n	800052c <MVCD_SendByte_SPI+0x10>

	}
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40021400 	.word	0x40021400

0800058c <MVCD_ST7920_Send>:

void MVCD_ST7920_Send (uint8_t data, int modflag) //modflag - (data 1), (cmd 0)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059e:	4813      	ldr	r0, [pc, #76]	; (80005ec <MVCD_ST7920_Send+0x60>)
 80005a0:	f001 fc9e 	bl	8001ee0 <HAL_GPIO_WritePin>

	MVCD_SendByte_SPI(0xf8+(modflag<<1));  // send the SYNC + RS(1)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3b08      	subs	r3, #8
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffb3 	bl	800051c <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI(data&0xf0);  // send the higher nibble first
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f023 030f 	bic.w	r3, r3, #15
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffac 	bl	800051c <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI((data<<4)&0xf0);  // send the lower nibble
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffa6 	bl	800051c <MVCD_SendByte_SPI>
	MVCD_delay_us(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f7ff ff8b 	bl	80004ec <MVCD_delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <MVCD_ST7920_Send+0x60>)
 80005de:	f001 fc7f 	bl	8001ee0 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <MVCD_ST7920_baseinit>:

void MVCD_ST7920_baseinit(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <MVCD_ST7920_baseinit+0x94>)
 80005fc:	f001 fc70 	bl	8001ee0 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000600:	200a      	movs	r0, #10
 8000602:	f000 fd4d 	bl	80010a0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <MVCD_ST7920_baseinit+0x94>)
 800060e:	f001 fc67 	bl	8001ee0 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000612:	2032      	movs	r0, #50	; 0x32
 8000614:	f000 fd44 	bl	80010a0 <HAL_Delay>


	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000618:	2100      	movs	r1, #0
 800061a:	2030      	movs	r0, #48	; 0x30
 800061c:	f7ff ffb6 	bl	800058c <MVCD_ST7920_Send>
	MVCD_delay_us(110);  //  >100us delay
 8000620:	206e      	movs	r0, #110	; 0x6e
 8000622:	f7ff ff63 	bl	80004ec <MVCD_delay_us>

	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000626:	2100      	movs	r1, #0
 8000628:	2030      	movs	r0, #48	; 0x30
 800062a:	f7ff ffaf 	bl	800058c <MVCD_ST7920_Send>
	MVCD_delay_us(40);  // >37us delay
 800062e:	2028      	movs	r0, #40	; 0x28
 8000630:	f7ff ff5c 	bl	80004ec <MVCD_delay_us>

	MVCD_ST7920_Send(0x08,CMD);  // D=0, C=0, B=0
 8000634:	2100      	movs	r1, #0
 8000636:	2008      	movs	r0, #8
 8000638:	f7ff ffa8 	bl	800058c <MVCD_ST7920_Send>
	MVCD_delay_us(110);  // >100us delay
 800063c:	206e      	movs	r0, #110	; 0x6e
 800063e:	f7ff ff55 	bl	80004ec <MVCD_delay_us>

	MVCD_ST7920_Send(0x01,CMD);  // clear screen
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff ffa1 	bl	800058c <MVCD_ST7920_Send>
	HAL_Delay(12);  // >10 ms delay
 800064a:	200c      	movs	r0, #12
 800064c:	f000 fd28 	bl	80010a0 <HAL_Delay>


	MVCD_ST7920_Send(0x06,CMD);  // cursor increment right no shift
 8000650:	2100      	movs	r1, #0
 8000652:	2006      	movs	r0, #6
 8000654:	f7ff ff9a 	bl	800058c <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fd21 	bl	80010a0 <HAL_Delay>

	MVCD_ST7920_Send(0x0C,CMD);  // D=1, C=0, B=0
 800065e:	2100      	movs	r1, #0
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff ff93 	bl	800058c <MVCD_ST7920_Send>
    HAL_Delay(1);  // 1ms delay
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fd1a 	bl	80010a0 <HAL_Delay>

    MVCD_ST7920_Send(0x02,CMD);  // return to home
 800066c:	2100      	movs	r1, #0
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff ff8c 	bl	800058c <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fd13 	bl	80010a0 <HAL_Delay>
	HAL_Delay(2);
 800067a:	2002      	movs	r0, #2
 800067c:	f000 fd10 	bl	80010a0 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021400 	.word	0x40021400

08000688 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ETH_Init+0x78>)
 800068e:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <MX_ETH_Init+0x7c>)
 8000690:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ETH_Init+0x78>)
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ETH_Init+0x78>)
 800069a:	2200      	movs	r2, #0
 800069c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_ETH_Init+0x78>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_ETH_Init+0x78>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	3301      	adds	r3, #1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_ETH_Init+0x78>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	3302      	adds	r3, #2
 80006b6:	22e1      	movs	r2, #225	; 0xe1
 80006b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_ETH_Init+0x78>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	3303      	adds	r3, #3
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_ETH_Init+0x78>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_ETH_Init+0x78>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	3305      	adds	r3, #5
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_ETH_Init+0x78>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_ETH_Init+0x78>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_ETH_Init+0x78>)
 80006e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_ETH_Init+0x78>)
 80006ee:	f000 fddf 	bl	80012b0 <HAL_ETH_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80006f8:	f000 fa56 	bl	8000ba8 <Error_Handler>
  }

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028
 8000704:	40028000 	.word	0x40028000

08000708 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a55      	ldr	r2, [pc, #340]	; (800087c <HAL_ETH_MspInit+0x174>)
 8000726:	4293      	cmp	r3, r2
 8000728:	f040 80a4 	bne.w	8000874 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000744:	623b      	str	r3, [r7, #32]
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	4a4b      	ldr	r2, [pc, #300]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000756:	6313      	str	r3, [r2, #48]	; 0x30
 8000758:	4b49      	ldr	r3, [pc, #292]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	4b45      	ldr	r3, [pc, #276]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a44      	ldr	r2, [pc, #272]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800076e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b42      	ldr	r3, [pc, #264]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <HAL_ETH_MspInit+0x178>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_ETH_MspInit+0x178>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a36      	ldr	r2, [pc, #216]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a28      	ldr	r2, [pc, #160]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <HAL_ETH_MspInit+0x178>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f0:	2332      	movs	r3, #50	; 0x32
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000800:	230b      	movs	r3, #11
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	481e      	ldr	r0, [pc, #120]	; (8000884 <HAL_ETH_MspInit+0x17c>)
 800080c:	f001 f9be 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000810:	2386      	movs	r3, #134	; 0x86
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <HAL_ETH_MspInit+0x180>)
 800082c:	f001 f9ae 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000842:	230b      	movs	r3, #11
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	480f      	ldr	r0, [pc, #60]	; (800088c <HAL_ETH_MspInit+0x184>)
 800084e:	f001 f99d 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000852:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <HAL_ETH_MspInit+0x188>)
 8000870:	f001 f98c 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3738      	adds	r7, #56	; 0x38
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40028000 	.word	0x40028000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400
 8000890:	40021800 	.word	0x40021800

08000894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	; 0x38
 8000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	4b6e      	ldr	r3, [pc, #440]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a6d      	ldr	r2, [pc, #436]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	623b      	str	r3, [r7, #32]
 80008c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	4b67      	ldr	r3, [pc, #412]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a66      	ldr	r2, [pc, #408]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a5f      	ldr	r2, [pc, #380]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a58      	ldr	r2, [pc, #352]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a51      	ldr	r2, [pc, #324]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4f      	ldr	r3, [pc, #316]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000990:	4836      	ldr	r0, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x1d8>)
 8000992:	f001 faa5 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x1dc>)
 800099e:	f001 fa9f 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80009a8:	4832      	ldr	r0, [pc, #200]	; (8000a74 <MX_GPIO_Init+0x1e0>)
 80009aa:	f001 fa99 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4831      	ldr	r0, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 80009b4:	f001 fa94 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_GPIO_Init+0x1e8>)
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <MX_GPIO_Init+0x1ec>)
 80009ce:	f001 f8dd 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4820      	ldr	r0, [pc, #128]	; (8000a6c <MX_GPIO_Init+0x1d8>)
 80009ec:	f001 f8ce 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80009f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4819      	ldr	r0, [pc, #100]	; (8000a70 <MX_GPIO_Init+0x1dc>)
 8000a0a:	f001 f8bf 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000a0e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0x1e0>)
 8000a28:	f001 f8b0 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a2c:	2340      	movs	r3, #64	; 0x40
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 8000a44:	f001 f8a2 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 8000a5c:	f001 f896 	bl	8001b8c <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40021400 	.word	0x40021400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	10110000 	.word	0x10110000
 8000a80:	40020800 	.word	0x40020800

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fa98 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f820 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f7ff ff00 	bl	8000894 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a94:	f7ff fdf8 	bl	8000688 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a98:	f000 f96c 	bl	8000d74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a9c:	f000 f9dc 	bl	8000e58 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000aa0:	f000 f8f6 	bl	8000c90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <main+0x44>)
 8000aa6:	f001 fffa 	bl	8002a9e <HAL_TIM_Base_Start>
  MVCD_ST7920_baseinit();
 8000aaa:	f7ff fda1 	bl	80005f0 <MVCD_ST7920_baseinit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  MVCD_ST7920_Send(0x31, DATA);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2031      	movs	r0, #49	; 0x31
 8000ab2:	f7ff fd6b 	bl	800058c <MVCD_ST7920_Send>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <main+0x48>)
 8000aba:	f001 fa2a 	bl	8001f12 <HAL_GPIO_TogglePin>
	  MVCD_delay_us(50000);
 8000abe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ac2:	f7ff fd13 	bl	80004ec <MVCD_delay_us>
  {
 8000ac6:	e7f2      	b.n	8000aae <main+0x2a>
 8000ac8:	20000070 	.word	0x20000070
 8000acc:	40020400 	.word	0x40020400

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	; 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 f918 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <SystemClock_Config+0xd4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <SystemClock_Config+0xd4>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <SystemClock_Config+0xd4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b48:	2348      	movs	r3, #72	; 0x48
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b50:	2303      	movs	r3, #3
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fb13 	bl	8002184 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b64:	f000 f820 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2102      	movs	r1, #2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fd6c 	bl	8002664 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b92:	f000 f809 	bl	8000ba8 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3750      	adds	r7, #80	; 0x50
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 fa00 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <SystemInit+0x28>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <SystemInit+0x28>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SystemInit+0x28>)
 8000c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <MX_TIM1_Init+0x9c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cb4:	2247      	movs	r2, #71	; 0x47
 8000cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cda:	f001 feb5 	bl	8002a48 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f7ff ff60 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000cf6:	f001 fef6 	bl	8002ae6 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d00:	f7ff ff52 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_TIM1_Init+0x98>)
 8000d12:	f002 f8d9 	bl	8002ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d1c:	f7ff ff44 	bl	8000ba8 <Error_Handler>
  }

}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000070 	.word	0x20000070
 8000d2c:	40010000 	.word	0x40010000

08000d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_TIM_Base_MspInit+0x3c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10d      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800

08000d74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_USART3_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART3_UART_Init+0x4c>)
 8000dac:	f002 f908 	bl	8002fc0 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff fef7 	bl	8000ba8 <Error_Handler>
  }

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000b0 	.word	0x200000b0
 8000dc4:	40004800 	.word	0x40004800

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12c      	bne.n	8000e44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e34:	2307      	movs	r3, #7
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000e40:	f000 fea4 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004800 	.word	0x40004800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	f001 f854 	bl	8001f48 <HAL_PCD_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f7ff fe7f 	bl	8000ba8 <Error_Handler>
  }

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000f0 	.word	0x200000f0

08000eb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed4:	d13f      	bne.n	8000f56 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f04:	230a      	movs	r3, #10
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4815      	ldr	r0, [pc, #84]	; (8000f64 <HAL_PCD_MspInit+0xb0>)
 8000f10:	f000 fe3c 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	480e      	ldr	r0, [pc, #56]	; (8000f64 <HAL_PCD_MspInit+0xb0>)
 8000f2a:	f000 fe2f 	bl	8001b8c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_PCD_MspInit+0xac>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f6e:	e003      	b.n	8000f78 <LoopCopyDataInit>

08000f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f76:	3104      	adds	r1, #4

08000f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f80:	d3f6      	bcc.n	8000f70 <CopyDataInit>
  ldr  r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f84:	e002      	b.n	8000f8c <LoopFillZerobss>

08000f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f88:	f842 3b04 	str.w	r3, [r2], #4

08000f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f90:	d3f9      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f92:	f7ff fe67 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 fe99 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fd73 	bl	8000a84 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000fa4:	08003d64 	.word	0x08003d64
  ldr  r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000fb0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000fb4:	200004fc 	.word	0x200004fc

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f92f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fde2 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f939 	bl	8001296 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f90f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	200004f8 	.word	0x200004f8

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200004f8 	.word	0x200004f8

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_Delay+0x40>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000008 	.word	0x20000008

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012c0:	4baa      	ldr	r3, [pc, #680]	; (800156c <HAL_ETH_Init+0x2bc>)
 80012c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e185      	b.n	80015e2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fa0c 	bl	8000708 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b9e      	ldr	r3, [pc, #632]	; (8001570 <HAL_ETH_Init+0x2c0>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	4a9d      	ldr	r2, [pc, #628]	; (8001570 <HAL_ETH_Init+0x2c0>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001300:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <HAL_ETH_Init+0x2c0>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800130c:	4b99      	ldr	r3, [pc, #612]	; (8001574 <HAL_ETH_Init+0x2c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_ETH_Init+0x2c4>)
 8001312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001316:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001318:	4b96      	ldr	r3, [pc, #600]	; (8001574 <HAL_ETH_Init+0x2c4>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4994      	ldr	r1, [pc, #592]	; (8001574 <HAL_ETH_Init+0x2c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800133e:	f7ff fea3 	bl	8001088 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001344:	e011      	b.n	800136a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001346:	f7ff fe9f 	bl	8001088 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001354:	d909      	bls.n	800136a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e13b      	b.n	80015e2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e4      	bne.n	8001346 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f023 031c 	bic.w	r3, r3, #28
 800138a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800138c:	f001 fb28 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8001390:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4a78      	ldr	r2, [pc, #480]	; (8001578 <HAL_ETH_Init+0x2c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d908      	bls.n	80013ac <HAL_ETH_Init+0xfc>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_ETH_Init+0x2cc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d804      	bhi.n	80013ac <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e027      	b.n	80013fc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	4a73      	ldr	r2, [pc, #460]	; (800157c <HAL_ETH_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d908      	bls.n	80013c6 <HAL_ETH_Init+0x116>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4a72      	ldr	r2, [pc, #456]	; (8001580 <HAL_ETH_Init+0x2d0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d804      	bhi.n	80013c6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f043 030c 	orr.w	r3, r3, #12
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	e01a      	b.n	80013fc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <HAL_ETH_Init+0x2d0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d903      	bls.n	80013d6 <HAL_ETH_Init+0x126>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4a6c      	ldr	r2, [pc, #432]	; (8001584 <HAL_ETH_Init+0x2d4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d911      	bls.n	80013fa <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4a6a      	ldr	r2, [pc, #424]	; (8001584 <HAL_ETH_Init+0x2d4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d908      	bls.n	80013f0 <HAL_ETH_Init+0x140>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4a69      	ldr	r2, [pc, #420]	; (8001588 <HAL_ETH_Init+0x2d8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d804      	bhi.n	80013f0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e005      	b.n	80013fc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	e000      	b.n	80013fc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013fa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f956 	bl	80016bc <HAL_ETH_WritePHYRegister>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800141a:	6939      	ldr	r1, [r7, #16]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f9b3 	bl	8001788 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0d9      	b.n	80015e2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800142e:	20ff      	movs	r0, #255	; 0xff
 8001430:	f7ff fe36 	bl	80010a0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a7 	beq.w	800158c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800143e:	f7ff fe23 	bl	8001088 <HAL_GetTick>
 8001442:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	461a      	mov	r2, r3
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8cd 	bl	80015ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001452:	f7ff fe19 	bl	8001088 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d90f      	bls.n	8001484 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001468:	6939      	ldr	r1, [r7, #16]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f98c 	bl	8001788 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0ae      	b.n	80015e2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0da      	beq.n	8001444 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800148e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f911 	bl	80016bc <HAL_ETH_WritePHYRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f96e 	bl	8001788 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014b4:	2301      	movs	r3, #1
 80014b6:	e094      	b.n	80015e2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fde6 	bl	8001088 <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	461a      	mov	r2, r3
 80014c4:	2101      	movs	r1, #1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f890 	bl	80015ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014cc:	f7ff fddc 	bl	8001088 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d90f      	bls.n	80014fe <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f94f 	bl	8001788 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e071      	b.n	80015e2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0da      	beq.n	80014be <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	461a      	mov	r2, r3
 800150e:	211f      	movs	r1, #31
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f86b 	bl	80015ec <HAL_ETH_ReadPHYRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f930 	bl	8001788 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001530:	2301      	movs	r3, #1
 8001532:	e056      	b.n	80015e2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	e002      	b.n	800154e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	e037      	b.n	80015d0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e032      	b.n	80015d0 <HAL_ETH_Init+0x320>
 800156a:	bf00      	nop
 800156c:	03938700 	.word	0x03938700
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	01312cff 	.word	0x01312cff
 800157c:	02160ebf 	.word	0x02160ebf
 8001580:	039386ff 	.word	0x039386ff
 8001584:	05f5e0ff 	.word	0x05f5e0ff
 8001588:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800159c:	4313      	orrs	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f889 	bl	80016bc <HAL_ETH_WritePHYRegister>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8e6 	bl	8001788 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e00c      	b.n	80015e2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015c8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015cc:	f7ff fd68 	bl	80010a0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f8d8 	bl	8001788 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop

080015ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	460b      	mov	r3, r1
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b82      	cmp	r3, #130	; 0x82
 800160c:	d101      	bne.n	8001612 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800160e:	2302      	movs	r3, #2
 8001610:	e050      	b.n	80016b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2282      	movs	r2, #130	; 0x82
 8001616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8a1b      	ldrh	r3, [r3, #16]
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	b29b      	uxth	r3, r3
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	019b      	lsls	r3, r3, #6
 800163c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	4313      	orrs	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800165e:	f7ff fd13 	bl	8001088 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001664:	e015      	b.n	8001692 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001666:	f7ff fd0f 	bl	8001088 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d309      	bcc.n	800168a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e014      	b.n	80016b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e4      	bne.n	8001666 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	460b      	mov	r3, r1
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b42      	cmp	r3, #66	; 0x42
 80016dc:	d101      	bne.n	80016e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
 80016e0:	e04e      	b.n	8001780 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2242      	movs	r2, #66	; 0x42
 80016e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 031c 	and.w	r3, r3, #28
 80016f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8a1b      	ldrh	r3, [r3, #16]
 80016fe:	02db      	lsls	r3, r3, #11
 8001700:	b29b      	uxth	r3, r3
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001708:	897b      	ldrh	r3, [r7, #10]
 800170a:	019b      	lsls	r3, r3, #6
 800170c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001738:	f7ff fca6 	bl	8001088 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800173e:	e015      	b.n	800176c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001740:	f7ff fca2 	bl	8001088 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174e:	d309      	bcc.n	8001764 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e00d      	b.n	8001780 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e4      	bne.n	8001740 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0b0      	sub	sp, #192	; 0xc0
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80017ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d2:	663b      	str	r3, [r7, #96]	; 0x60
 80017d4:	e001      	b.n	80017da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80017da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e4:	2300      	movs	r3, #0
 80017e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800185c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001860:	4bac      	ldr	r3, [pc, #688]	; (8001b14 <ETH_MACDMAConfig+0x38c>)
 8001862:	4013      	ands	r3, r2
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001868:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800186c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800186e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001870:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001874:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800187a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800187c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800187e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001882:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001888:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800188a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800188c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800188e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001890:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001894:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001898:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800189a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800189c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800189e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fbef 	bl	80010a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80018ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018d0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80018d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80018d4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80018d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80018da:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80018dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80018e0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80018e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80018e6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80018e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80018ec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80018f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80018f8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018fa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fbca 	bl	80010a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001914:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800191e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001928:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001934:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001938:	f64f 7341 	movw	r3, #65345	; 0xff41
 800193c:	4013      	ands	r3, r2
 800193e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001946:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800194c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800194e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001952:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001958:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800195e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001964:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001966:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001978:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff fb8b 	bl	80010a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001992:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001994:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001998:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fb76 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019bc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80019c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019c6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80019cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019d0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80019e2:	2304      	movs	r3, #4
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80019e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a12:	3318      	adds	r3, #24
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <ETH_MACDMAConfig+0x390>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a26:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001a28:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a2a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001a2c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001a2e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001a30:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001a32:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001a34:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001a36:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001a38:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001a3a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001a3e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001a42:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001a46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f7ff fb14 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a80:	3318      	adds	r3, #24
 8001a82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a86:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a8c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a90:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a94:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a98:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a9e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001aa2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff faed 	bl	80010a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10f      	bne.n	8001afc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	331c      	adds	r3, #28
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af8:	331c      	adds	r3, #28
 8001afa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	461a      	mov	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f809 	bl	8001b1c <ETH_MACAddressConfig>
}
 8001b0a:	bf00      	nop
 8001b0c:	37c0      	adds	r7, #192	; 0xc0
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	ff20810f 	.word	0xff20810f
 8001b18:	f8de3f23 	.word	0xf8de3f23

08001b1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3305      	adds	r3, #5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	3204      	adds	r2, #4
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <ETH_MACAddressConfig+0x68>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3303      	adds	r3, #3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	061a      	lsls	r2, r3, #24
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3302      	adds	r3, #2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	4313      	orrs	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <ETH_MACAddressConfig+0x6c>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40028040 	.word	0x40028040
 8001b88:	40028044 	.word	0x40028044

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e177      	b.n	8001e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8166 	bne.w	8001e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d00b      	beq.n	8001be6 <HAL_GPIO_Init+0x5a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bda:	2b11      	cmp	r3, #17
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0xfc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80c0 	beq.w	8001e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_GPIO_Init+0x320>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a64      	ldr	r2, [pc, #400]	; (8001eac <HAL_GPIO_Init+0x320>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_GPIO_Init+0x320>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_GPIO_Init+0x324>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_GPIO_Init+0x328>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d037      	beq.n	8001dca <HAL_GPIO_Init+0x23e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_GPIO_Init+0x32c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_GPIO_Init+0x23a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a55      	ldr	r2, [pc, #340]	; (8001ebc <HAL_GPIO_Init+0x330>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x236>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_GPIO_Init+0x334>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x232>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_GPIO_Init+0x338>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x33c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x22a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x340>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_GPIO_Init+0x344>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x348>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_GPIO_Init+0x34c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x21a>
 8001da2:	2309      	movs	r3, #9
 8001da4:	e012      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001da6:	230a      	movs	r3, #10
 8001da8:	e010      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e00e      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4934      	ldr	r1, [pc, #208]	; (8001eb0 <HAL_GPIO_Init+0x324>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dea:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e38:	4a28      	ldr	r2, [pc, #160]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae84 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3724      	adds	r7, #36	; 0x24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40022400 	.word	0x40022400
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	401a      	ands	r2, r3
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d104      	bne.n	8001f36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	041a      	lsls	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b08f      	sub	sp, #60	; 0x3c
 8001f4c:	af0a      	add	r7, sp, #40	; 0x28
 8001f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e10f      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe ff9d 	bl	8000eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fc3c 	bl	8003816 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	687e      	ldr	r6, [r7, #4]
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fbc:	1d33      	adds	r3, r6, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f001 fbc7 	bl	8003754 <USB_CoreInit>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fc2a 	bl	8003838 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e04a      	b.n	8002080 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	333d      	adds	r3, #61	; 0x3d
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	333c      	adds	r3, #60	; 0x3c
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	b298      	uxth	r0, r3
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3342      	adds	r3, #66	; 0x42
 8002026:	4602      	mov	r2, r0
 8002028:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3344      	adds	r3, #68	; 0x44
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3348      	adds	r3, #72	; 0x48
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3350      	adds	r3, #80	; 0x50
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3af      	bcc.n	8001fea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e044      	b.n	800211a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d3b5      	bcc.n	8002090 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	687e      	ldr	r6, [r7, #4]
 800212c:	466d      	mov	r5, sp
 800212e:	f106 0410 	add.w	r4, r6, #16
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002142:	1d33      	adds	r3, r6, #4
 8002144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f001 fba0 	bl	800388c <USB_DevInit>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00d      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fd5d 	bl	8003c32 <USB_DevDisconnect>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e25b      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	4ba3      	ldr	r3, [pc, #652]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b9d      	ldr	r3, [pc, #628]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b99      	ldr	r3, [pc, #612]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e236      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b91      	ldr	r3, [pc, #580]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a90      	ldr	r2, [pc, #576]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a8a      	ldr	r2, [pc, #552]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a87      	ldr	r2, [pc, #540]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b84      	ldr	r3, [pc, #528]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a83      	ldr	r2, [pc, #524]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a80      	ldr	r2, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff24 	bl	8001088 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe ff20 	bl	8001088 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1fb      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ff10 	bl	8001088 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe ff0c 	bl	8001088 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1e7      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1bb      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4952      	ldr	r1, [pc, #328]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_RCC_OscConfig+0x2b0>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fec5 	bl	8001088 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7fe fec1 	bl	8001088 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e19c      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4940      	ldr	r1, [pc, #256]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_RCC_OscConfig+0x2b0>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fea4 	bl	8001088 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe fea0 	bl	8001088 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e17b      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d030      	beq.n	80023d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCC_OscConfig+0x2b4>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7fe fe84 	bl	8001088 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fe80 	bl	8001088 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e15b      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x2b4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe6d 	bl	8001088 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe69 	bl	8001088 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e144      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a0 	beq.w	800251e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x2b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d121      	bne.n	800245e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_RCC_OscConfig+0x2b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_RCC_OscConfig+0x2b8>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7fe fe2f 	bl	8001088 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e011      	b.n	8002452 <HAL_RCC_OscConfig+0x2ce>
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
 800243c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fe22 	bl	8001088 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0fd      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x4d4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x2f0>
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a7c      	ldr	r2, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x32a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 800247c:	4b77      	ldr	r3, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a76      	ldr	r2, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	4b74      	ldr	r3, [pc, #464]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a73      	ldr	r2, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x32a>
 8002496:	4b71      	ldr	r3, [pc, #452]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a70      	ldr	r2, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b6e      	ldr	r3, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fde7 	bl	8001088 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fde3 	bl	8001088 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0bc      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x33a>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fdd1 	bl	8001088 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fdcd 	bl	8001088 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0a6      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b56      	ldr	r3, [pc, #344]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b52      	ldr	r3, [pc, #328]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a51      	ldr	r2, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8092 	beq.w	800264c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d05c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d141      	bne.n	80025c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HAL_RCC_OscConfig+0x4dc>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fda1 	bl	8001088 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fd9d 	bl	8001088 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e078      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	3b01      	subs	r3, #1
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	4933      	ldr	r1, [pc, #204]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_RCC_OscConfig+0x4dc>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fd76 	bl	8001088 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fd72 	bl	8001088 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e04d      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x41c>
 80025be:	e045      	b.n	800264c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x4dc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fd5f 	bl	8001088 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fd5b 	bl	8001088 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e036      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x44a>
 80025ec:	e02e      	b.n	800264c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e029      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	429a      	cmp	r2, r3
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d115      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d10d      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40007000 	.word	0x40007000
 800265c:	40023800 	.word	0x40023800
 8002660:	42470060 	.word	0x42470060

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0cc      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d90c      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d044      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d119      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e067      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4934      	ldr	r1, [pc, #208]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fe fc98 	bl	8001088 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7fe fc94 	bl	8001088 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d20c      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fbf8 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00
 8002820:	40023800 	.word	0x40023800
 8002824:	08003d3c 	.word	0x08003d3c
 8002828:	20000000 	.word	0x20000000
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d007      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x32>
 8002852:	2b08      	cmp	r3, #8
 8002854:	d008      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x38>
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80b4 	bne.w	80029c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800285e:	60bb      	str	r3, [r7, #8]
       break;
 8002860:	e0b3      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002864:	60bb      	str	r3, [r7, #8]
      break;
 8002866:	e0b0      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002868:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002870:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04a      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	f240 11ff 	movw	r1, #511	; 0x1ff
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	ea03 0501 	and.w	r5, r3, r1
 8002894:	ea04 0602 	and.w	r6, r4, r2
 8002898:	4629      	mov	r1, r5
 800289a:	4632      	mov	r2, r6
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	f04f 0400 	mov.w	r4, #0
 80028a4:	0154      	lsls	r4, r2, #5
 80028a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028aa:	014b      	lsls	r3, r1, #5
 80028ac:	4619      	mov	r1, r3
 80028ae:	4622      	mov	r2, r4
 80028b0:	1b49      	subs	r1, r1, r5
 80028b2:	eb62 0206 	sbc.w	r2, r2, r6
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	0194      	lsls	r4, r2, #6
 80028c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028c4:	018b      	lsls	r3, r1, #6
 80028c6:	1a5b      	subs	r3, r3, r1
 80028c8:	eb64 0402 	sbc.w	r4, r4, r2
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	00e2      	lsls	r2, r4, #3
 80028d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028da:	00d9      	lsls	r1, r3, #3
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	195b      	adds	r3, r3, r5
 80028e2:	eb44 0406 	adc.w	r4, r4, r6
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	0262      	lsls	r2, r4, #9
 80028f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028f4:	0259      	lsls	r1, r3, #9
 80028f6:	460b      	mov	r3, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	4621      	mov	r1, r4
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 0400 	mov.w	r4, #0
 8002904:	461a      	mov	r2, r3
 8002906:	4623      	mov	r3, r4
 8002908:	f7fd fc70 	bl	80001ec <__aeabi_uldivmod>
 800290c:	4603      	mov	r3, r0
 800290e:	460c      	mov	r4, r1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e049      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002914:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	ea03 0501 	and.w	r5, r3, r1
 800292a:	ea04 0602 	and.w	r6, r4, r2
 800292e:	4629      	mov	r1, r5
 8002930:	4632      	mov	r2, r6
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f04f 0400 	mov.w	r4, #0
 800293a:	0154      	lsls	r4, r2, #5
 800293c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002940:	014b      	lsls	r3, r1, #5
 8002942:	4619      	mov	r1, r3
 8002944:	4622      	mov	r2, r4
 8002946:	1b49      	subs	r1, r1, r5
 8002948:	eb62 0206 	sbc.w	r2, r2, r6
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f04f 0400 	mov.w	r4, #0
 8002954:	0194      	lsls	r4, r2, #6
 8002956:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800295a:	018b      	lsls	r3, r1, #6
 800295c:	1a5b      	subs	r3, r3, r1
 800295e:	eb64 0402 	sbc.w	r4, r4, r2
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	00e2      	lsls	r2, r4, #3
 800296c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002970:	00d9      	lsls	r1, r3, #3
 8002972:	460b      	mov	r3, r1
 8002974:	4614      	mov	r4, r2
 8002976:	195b      	adds	r3, r3, r5
 8002978:	eb44 0406 	adc.w	r4, r4, r6
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	02a2      	lsls	r2, r4, #10
 8002986:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800298a:	0299      	lsls	r1, r3, #10
 800298c:	460b      	mov	r3, r1
 800298e:	4614      	mov	r4, r2
 8002990:	4618      	mov	r0, r3
 8002992:	4621      	mov	r1, r4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f04f 0400 	mov.w	r4, #0
 800299a:	461a      	mov	r2, r3
 800299c:	4623      	mov	r3, r4
 800299e:	f7fd fc25 	bl	80001ec <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029c6:	60bb      	str	r3, [r7, #8]
      break;
 80029c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ca:	68bb      	ldr	r3, [r7, #8]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a00:	4601      	mov	r1, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0a9b      	lsrs	r3, r3, #10
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	08003d4c 	.word	0x08003d4c

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a24:	f7ff ffdc 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a28:	4601      	mov	r1, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0b5b      	lsrs	r3, r3, #13
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08003d4c 	.word	0x08003d4c

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e01d      	b.n	8002a96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f95e 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 f8e4 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d007      	beq.n	8002ad0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_ConfigClockSource+0x18>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0a6      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x166>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d067      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x120>
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d80b      	bhi.n	8002b52 <HAL_TIM_ConfigClockSource+0x6c>
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d073      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x140>
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d802      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x62>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06f      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b46:	e078      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d06c      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x140>
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d06a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b50:	e073      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b52:	2b70      	cmp	r3, #112	; 0x70
 8002b54:	d00d      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x8c>
 8002b56:	2b70      	cmp	r3, #112	; 0x70
 8002b58:	d804      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x7e>
 8002b5a:	2b50      	cmp	r3, #80	; 0x50
 8002b5c:	d033      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xe0>
 8002b5e:	2b60      	cmp	r3, #96	; 0x60
 8002b60:	d041      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b62:	e06a      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d066      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0x152>
 8002b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6e:	d017      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b70:	e063      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f000 f981 	bl	8002e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
      break;
 8002b9e:	e04c      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f000 f96a 	bl	8002e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e039      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f8de 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	; 0x50
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f937 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002be4:	e029      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f8fd 	bl	8002df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	; 0x60
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f927 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002c04:	e019      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f8be 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f917 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002c24:	e009      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 f90e 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002c36:	e000      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d00f      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <TIM_Base_SetConfig+0x118>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3c      	ldr	r2, [pc, #240]	; (8002d70 <TIM_Base_SetConfig+0x11c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <TIM_Base_SetConfig+0x120>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d108      	bne.n	8002ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d027      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <TIM_Base_SetConfig+0x118>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d023      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <TIM_Base_SetConfig+0x11c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <TIM_Base_SetConfig+0x120>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d017      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <TIM_Base_SetConfig+0x128>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <TIM_Base_SetConfig+0x12c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <TIM_Base_SetConfig+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <TIM_Base_SetConfig+0x134>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <TIM_Base_SetConfig+0x138>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <TIM_Base_SetConfig+0x13c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0xf8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	40001800 	.word	0x40001800
 8002d8c:	40001c00 	.word	0x40001c00
 8002d90:	40002000 	.word	0x40002000

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	031b      	lsls	r3, r3, #12
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f043 0307 	orr.w	r3, r3, #7
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e05a      	b.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d01d      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10c      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40001800 	.word	0x40001800

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e03f      	b.n	8003052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd feee 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f829 	bl	800305c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800309e:	f023 030c 	bic.w	r3, r3, #12
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ca:	f040 818b 	bne.w	80033e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4ac1      	ldr	r2, [pc, #772]	; (80033d8 <UART_SetConfig+0x37c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d005      	beq.n	80030e4 <UART_SetConfig+0x88>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4abf      	ldr	r2, [pc, #764]	; (80033dc <UART_SetConfig+0x380>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	f040 80bd 	bne.w	800325e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030e4:	f7ff fc9c 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 80030e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	461d      	mov	r5, r3
 80030ee:	f04f 0600 	mov.w	r6, #0
 80030f2:	46a8      	mov	r8, r5
 80030f4:	46b1      	mov	r9, r6
 80030f6:	eb18 0308 	adds.w	r3, r8, r8
 80030fa:	eb49 0409 	adc.w	r4, r9, r9
 80030fe:	4698      	mov	r8, r3
 8003100:	46a1      	mov	r9, r4
 8003102:	eb18 0805 	adds.w	r8, r8, r5
 8003106:	eb49 0906 	adc.w	r9, r9, r6
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003116:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800311a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800311e:	4688      	mov	r8, r1
 8003120:	4691      	mov	r9, r2
 8003122:	eb18 0005 	adds.w	r0, r8, r5
 8003126:	eb49 0106 	adc.w	r1, r9, r6
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	461d      	mov	r5, r3
 8003130:	f04f 0600 	mov.w	r6, #0
 8003134:	196b      	adds	r3, r5, r5
 8003136:	eb46 0406 	adc.w	r4, r6, r6
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	f7fd f855 	bl	80001ec <__aeabi_uldivmod>
 8003142:	4603      	mov	r3, r0
 8003144:	460c      	mov	r4, r1
 8003146:	461a      	mov	r2, r3
 8003148:	4ba5      	ldr	r3, [pc, #660]	; (80033e0 <UART_SetConfig+0x384>)
 800314a:	fba3 2302 	umull	r2, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	461d      	mov	r5, r3
 8003158:	f04f 0600 	mov.w	r6, #0
 800315c:	46a9      	mov	r9, r5
 800315e:	46b2      	mov	sl, r6
 8003160:	eb19 0309 	adds.w	r3, r9, r9
 8003164:	eb4a 040a 	adc.w	r4, sl, sl
 8003168:	4699      	mov	r9, r3
 800316a:	46a2      	mov	sl, r4
 800316c:	eb19 0905 	adds.w	r9, r9, r5
 8003170:	eb4a 0a06 	adc.w	sl, sl, r6
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003188:	4689      	mov	r9, r1
 800318a:	4692      	mov	sl, r2
 800318c:	eb19 0005 	adds.w	r0, r9, r5
 8003190:	eb4a 0106 	adc.w	r1, sl, r6
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	461d      	mov	r5, r3
 800319a:	f04f 0600 	mov.w	r6, #0
 800319e:	196b      	adds	r3, r5, r5
 80031a0:	eb46 0406 	adc.w	r4, r6, r6
 80031a4:	461a      	mov	r2, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	f7fd f820 	bl	80001ec <__aeabi_uldivmod>
 80031ac:	4603      	mov	r3, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <UART_SetConfig+0x384>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a86      	ldr	r2, [pc, #536]	; (80033e0 <UART_SetConfig+0x384>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d4:	4498      	add	r8, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	461d      	mov	r5, r3
 80031da:	f04f 0600 	mov.w	r6, #0
 80031de:	46a9      	mov	r9, r5
 80031e0:	46b2      	mov	sl, r6
 80031e2:	eb19 0309 	adds.w	r3, r9, r9
 80031e6:	eb4a 040a 	adc.w	r4, sl, sl
 80031ea:	4699      	mov	r9, r3
 80031ec:	46a2      	mov	sl, r4
 80031ee:	eb19 0905 	adds.w	r9, r9, r5
 80031f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800320a:	4689      	mov	r9, r1
 800320c:	4692      	mov	sl, r2
 800320e:	eb19 0005 	adds.w	r0, r9, r5
 8003212:	eb4a 0106 	adc.w	r1, sl, r6
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	461d      	mov	r5, r3
 800321c:	f04f 0600 	mov.w	r6, #0
 8003220:	196b      	adds	r3, r5, r5
 8003222:	eb46 0406 	adc.w	r4, r6, r6
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	f7fc ffdf 	bl	80001ec <__aeabi_uldivmod>
 800322e:	4603      	mov	r3, r0
 8003230:	460c      	mov	r4, r1
 8003232:	461a      	mov	r2, r3
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <UART_SetConfig+0x384>)
 8003236:	fba3 1302 	umull	r1, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2164      	movs	r1, #100	; 0x64
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <UART_SetConfig+0x384>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	f003 0207 	and.w	r2, r3, #7
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4442      	add	r2, r8
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e26f      	b.n	800373e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325e:	f7ff fbcb 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8003262:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	461d      	mov	r5, r3
 8003268:	f04f 0600 	mov.w	r6, #0
 800326c:	46a8      	mov	r8, r5
 800326e:	46b1      	mov	r9, r6
 8003270:	eb18 0308 	adds.w	r3, r8, r8
 8003274:	eb49 0409 	adc.w	r4, r9, r9
 8003278:	4698      	mov	r8, r3
 800327a:	46a1      	mov	r9, r4
 800327c:	eb18 0805 	adds.w	r8, r8, r5
 8003280:	eb49 0906 	adc.w	r9, r9, r6
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003290:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003294:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003298:	4688      	mov	r8, r1
 800329a:	4691      	mov	r9, r2
 800329c:	eb18 0005 	adds.w	r0, r8, r5
 80032a0:	eb49 0106 	adc.w	r1, r9, r6
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	461d      	mov	r5, r3
 80032aa:	f04f 0600 	mov.w	r6, #0
 80032ae:	196b      	adds	r3, r5, r5
 80032b0:	eb46 0406 	adc.w	r4, r6, r6
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7fc ff98 	bl	80001ec <__aeabi_uldivmod>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <UART_SetConfig+0x384>)
 80032c4:	fba3 2302 	umull	r2, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	461d      	mov	r5, r3
 80032d2:	f04f 0600 	mov.w	r6, #0
 80032d6:	46a9      	mov	r9, r5
 80032d8:	46b2      	mov	sl, r6
 80032da:	eb19 0309 	adds.w	r3, r9, r9
 80032de:	eb4a 040a 	adc.w	r4, sl, sl
 80032e2:	4699      	mov	r9, r3
 80032e4:	46a2      	mov	sl, r4
 80032e6:	eb19 0905 	adds.w	r9, r9, r5
 80032ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003302:	4689      	mov	r9, r1
 8003304:	4692      	mov	sl, r2
 8003306:	eb19 0005 	adds.w	r0, r9, r5
 800330a:	eb4a 0106 	adc.w	r1, sl, r6
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	461d      	mov	r5, r3
 8003314:	f04f 0600 	mov.w	r6, #0
 8003318:	196b      	adds	r3, r5, r5
 800331a:	eb46 0406 	adc.w	r4, r6, r6
 800331e:	461a      	mov	r2, r3
 8003320:	4623      	mov	r3, r4
 8003322:	f7fc ff63 	bl	80001ec <__aeabi_uldivmod>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	461a      	mov	r2, r3
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <UART_SetConfig+0x384>)
 800332e:	fba3 1302 	umull	r1, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3332      	adds	r3, #50	; 0x32
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <UART_SetConfig+0x384>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800334e:	4498      	add	r8, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	461d      	mov	r5, r3
 8003354:	f04f 0600 	mov.w	r6, #0
 8003358:	46a9      	mov	r9, r5
 800335a:	46b2      	mov	sl, r6
 800335c:	eb19 0309 	adds.w	r3, r9, r9
 8003360:	eb4a 040a 	adc.w	r4, sl, sl
 8003364:	4699      	mov	r9, r3
 8003366:	46a2      	mov	sl, r4
 8003368:	eb19 0905 	adds.w	r9, r9, r5
 800336c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003384:	4689      	mov	r9, r1
 8003386:	4692      	mov	sl, r2
 8003388:	eb19 0005 	adds.w	r0, r9, r5
 800338c:	eb4a 0106 	adc.w	r1, sl, r6
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	461d      	mov	r5, r3
 8003396:	f04f 0600 	mov.w	r6, #0
 800339a:	196b      	adds	r3, r5, r5
 800339c:	eb46 0406 	adc.w	r4, r6, r6
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	f7fc ff22 	bl	80001ec <__aeabi_uldivmod>
 80033a8:	4603      	mov	r3, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <UART_SetConfig+0x384>)
 80033b0:	fba3 1302 	umull	r1, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	2164      	movs	r1, #100	; 0x64
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3332      	adds	r3, #50	; 0x32
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <UART_SetConfig+0x384>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 0207 	and.w	r2, r3, #7
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4442      	add	r2, r8
 80033d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80033d6:	e1b2      	b.n	800373e <UART_SetConfig+0x6e2>
 80033d8:	40011000 	.word	0x40011000
 80033dc:	40011400 	.word	0x40011400
 80033e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4ad7      	ldr	r2, [pc, #860]	; (8003748 <UART_SetConfig+0x6ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d005      	beq.n	80033fa <UART_SetConfig+0x39e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4ad6      	ldr	r2, [pc, #856]	; (800374c <UART_SetConfig+0x6f0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	f040 80d1 	bne.w	800359c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80033fa:	f7ff fb11 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 80033fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	469a      	mov	sl, r3
 8003404:	f04f 0b00 	mov.w	fp, #0
 8003408:	46d0      	mov	r8, sl
 800340a:	46d9      	mov	r9, fp
 800340c:	eb18 0308 	adds.w	r3, r8, r8
 8003410:	eb49 0409 	adc.w	r4, r9, r9
 8003414:	4698      	mov	r8, r3
 8003416:	46a1      	mov	r9, r4
 8003418:	eb18 080a 	adds.w	r8, r8, sl
 800341c:	eb49 090b 	adc.w	r9, r9, fp
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800342c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003430:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003434:	4688      	mov	r8, r1
 8003436:	4691      	mov	r9, r2
 8003438:	eb1a 0508 	adds.w	r5, sl, r8
 800343c:	eb4b 0609 	adc.w	r6, fp, r9
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0094      	lsls	r4, r2, #2
 8003454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003458:	008b      	lsls	r3, r1, #2
 800345a:	461a      	mov	r2, r3
 800345c:	4623      	mov	r3, r4
 800345e:	4628      	mov	r0, r5
 8003460:	4631      	mov	r1, r6
 8003462:	f7fc fec3 	bl	80001ec <__aeabi_uldivmod>
 8003466:	4603      	mov	r3, r0
 8003468:	460c      	mov	r4, r1
 800346a:	461a      	mov	r2, r3
 800346c:	4bb8      	ldr	r3, [pc, #736]	; (8003750 <UART_SetConfig+0x6f4>)
 800346e:	fba3 2302 	umull	r2, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	469b      	mov	fp, r3
 800347c:	f04f 0c00 	mov.w	ip, #0
 8003480:	46d9      	mov	r9, fp
 8003482:	46e2      	mov	sl, ip
 8003484:	eb19 0309 	adds.w	r3, r9, r9
 8003488:	eb4a 040a 	adc.w	r4, sl, sl
 800348c:	4699      	mov	r9, r3
 800348e:	46a2      	mov	sl, r4
 8003490:	eb19 090b 	adds.w	r9, r9, fp
 8003494:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ac:	4689      	mov	r9, r1
 80034ae:	4692      	mov	sl, r2
 80034b0:	eb1b 0509 	adds.w	r5, fp, r9
 80034b4:	eb4c 060a 	adc.w	r6, ip, sl
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4619      	mov	r1, r3
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	f04f 0400 	mov.w	r4, #0
 80034ca:	0094      	lsls	r4, r2, #2
 80034cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034d0:	008b      	lsls	r3, r1, #2
 80034d2:	461a      	mov	r2, r3
 80034d4:	4623      	mov	r3, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	4631      	mov	r1, r6
 80034da:	f7fc fe87 	bl	80001ec <__aeabi_uldivmod>
 80034de:	4603      	mov	r3, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b9a      	ldr	r3, [pc, #616]	; (8003750 <UART_SetConfig+0x6f4>)
 80034e6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2164      	movs	r1, #100	; 0x64
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	3332      	adds	r3, #50	; 0x32
 80034f8:	4a95      	ldr	r2, [pc, #596]	; (8003750 <UART_SetConfig+0x6f4>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003504:	4498      	add	r8, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	469b      	mov	fp, r3
 800350a:	f04f 0c00 	mov.w	ip, #0
 800350e:	46d9      	mov	r9, fp
 8003510:	46e2      	mov	sl, ip
 8003512:	eb19 0309 	adds.w	r3, r9, r9
 8003516:	eb4a 040a 	adc.w	r4, sl, sl
 800351a:	4699      	mov	r9, r3
 800351c:	46a2      	mov	sl, r4
 800351e:	eb19 090b 	adds.w	r9, r9, fp
 8003522:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353a:	4689      	mov	r9, r1
 800353c:	4692      	mov	sl, r2
 800353e:	eb1b 0509 	adds.w	r5, fp, r9
 8003542:	eb4c 060a 	adc.w	r6, ip, sl
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0094      	lsls	r4, r2, #2
 800355a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4628      	mov	r0, r5
 8003566:	4631      	mov	r1, r6
 8003568:	f7fc fe40 	bl	80001ec <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b77      	ldr	r3, [pc, #476]	; (8003750 <UART_SetConfig+0x6f4>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a72      	ldr	r2, [pc, #456]	; (8003750 <UART_SetConfig+0x6f4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4442      	add	r2, r8
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	e0d0      	b.n	800373e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7ff fa2c 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80035a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	469a      	mov	sl, r3
 80035a6:	f04f 0b00 	mov.w	fp, #0
 80035aa:	46d0      	mov	r8, sl
 80035ac:	46d9      	mov	r9, fp
 80035ae:	eb18 0308 	adds.w	r3, r8, r8
 80035b2:	eb49 0409 	adc.w	r4, r9, r9
 80035b6:	4698      	mov	r8, r3
 80035b8:	46a1      	mov	r9, r4
 80035ba:	eb18 080a 	adds.w	r8, r8, sl
 80035be:	eb49 090b 	adc.w	r9, r9, fp
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035d6:	4688      	mov	r8, r1
 80035d8:	4691      	mov	r9, r2
 80035da:	eb1a 0508 	adds.w	r5, sl, r8
 80035de:	eb4b 0609 	adc.w	r6, fp, r9
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f04f 0400 	mov.w	r4, #0
 80035f4:	0094      	lsls	r4, r2, #2
 80035f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	4628      	mov	r0, r5
 8003602:	4631      	mov	r1, r6
 8003604:	f7fc fdf2 	bl	80001ec <__aeabi_uldivmod>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	461a      	mov	r2, r3
 800360e:	4b50      	ldr	r3, [pc, #320]	; (8003750 <UART_SetConfig+0x6f4>)
 8003610:	fba3 2302 	umull	r2, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	469b      	mov	fp, r3
 800361e:	f04f 0c00 	mov.w	ip, #0
 8003622:	46d9      	mov	r9, fp
 8003624:	46e2      	mov	sl, ip
 8003626:	eb19 0309 	adds.w	r3, r9, r9
 800362a:	eb4a 040a 	adc.w	r4, sl, sl
 800362e:	4699      	mov	r9, r3
 8003630:	46a2      	mov	sl, r4
 8003632:	eb19 090b 	adds.w	r9, r9, fp
 8003636:	eb4a 0a0c 	adc.w	sl, sl, ip
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800364a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800364e:	4689      	mov	r9, r1
 8003650:	4692      	mov	sl, r2
 8003652:	eb1b 0509 	adds.w	r5, fp, r9
 8003656:	eb4c 060a 	adc.w	r6, ip, sl
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4619      	mov	r1, r3
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	f04f 0400 	mov.w	r4, #0
 800366c:	0094      	lsls	r4, r2, #2
 800366e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003672:	008b      	lsls	r3, r1, #2
 8003674:	461a      	mov	r2, r3
 8003676:	4623      	mov	r3, r4
 8003678:	4628      	mov	r0, r5
 800367a:	4631      	mov	r1, r6
 800367c:	f7fc fdb6 	bl	80001ec <__aeabi_uldivmod>
 8003680:	4603      	mov	r3, r0
 8003682:	460c      	mov	r4, r1
 8003684:	461a      	mov	r2, r3
 8003686:	4b32      	ldr	r3, [pc, #200]	; (8003750 <UART_SetConfig+0x6f4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	; 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	3332      	adds	r3, #50	; 0x32
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <UART_SetConfig+0x6f4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a6:	4498      	add	r8, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	469b      	mov	fp, r3
 80036ac:	f04f 0c00 	mov.w	ip, #0
 80036b0:	46d9      	mov	r9, fp
 80036b2:	46e2      	mov	sl, ip
 80036b4:	eb19 0309 	adds.w	r3, r9, r9
 80036b8:	eb4a 040a 	adc.w	r4, sl, sl
 80036bc:	4699      	mov	r9, r3
 80036be:	46a2      	mov	sl, r4
 80036c0:	eb19 090b 	adds.w	r9, r9, fp
 80036c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036dc:	4689      	mov	r9, r1
 80036de:	4692      	mov	sl, r2
 80036e0:	eb1b 0509 	adds.w	r5, fp, r9
 80036e4:	eb4c 060a 	adc.w	r6, ip, sl
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	f04f 0400 	mov.w	r4, #0
 80036fa:	0094      	lsls	r4, r2, #2
 80036fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	461a      	mov	r2, r3
 8003704:	4623      	mov	r3, r4
 8003706:	4628      	mov	r0, r5
 8003708:	4631      	mov	r1, r6
 800370a:	f7fc fd6f 	bl	80001ec <__aeabi_uldivmod>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	461a      	mov	r2, r3
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <UART_SetConfig+0x6f4>)
 8003716:	fba3 1302 	umull	r1, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2164      	movs	r1, #100	; 0x64
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	; 0x32
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <UART_SetConfig+0x6f4>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 020f 	and.w	r2, r3, #15
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4442      	add	r2, r8
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	e7ff      	b.n	800373e <UART_SetConfig+0x6e2>
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	40011000 	.word	0x40011000
 800374c:	40011400 	.word	0x40011400
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 001c 	add.w	r0, r7, #28
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	2b01      	cmp	r3, #1
 800376a:	d122      	bne.n	80037b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa5c 	bl	8003c64 <USB_CoreReset>
 80037ac:	4603      	mov	r3, r0
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e01a      	b.n	80037e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa50 	bl	8003c64 <USB_CoreReset>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
 80037da:	e005      	b.n	80037e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10b      	bne.n	8003806 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f043 0206 	orr.w	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003812:	b004      	add	sp, #16
 8003814:	4770      	bx	lr

08003816 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0201 	bic.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d106      	bne.n	8003864 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e00b      	b.n	800387c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e001      	b.n	800387c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e003      	b.n	8003884 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800387c:	2032      	movs	r0, #50	; 0x32
 800387e:	f7fd fc0f 	bl	80010a0 <HAL_Delay>

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800388c:	b084      	sub	sp, #16
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800389a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e009      	b.n	80038c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3340      	adds	r3, #64	; 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b0e      	cmp	r3, #14
 80038c4:	d9f2      	bls.n	80038ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d112      	bne.n	80038f2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
 80038f0:	e00b      	b.n	800390a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003910:	461a      	mov	r2, r3
 8003912:	2300      	movs	r3, #0
 8003914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391c:	4619      	mov	r1, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	461a      	mov	r2, r3
 8003926:	680b      	ldr	r3, [r1, #0]
 8003928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10c      	bne.n	800394a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003936:	2100      	movs	r1, #0
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f961 	bl	8003c00 <USB_SetDevSpeed>
 800393e:	e008      	b.n	8003952 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003940:	2101      	movs	r1, #1
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f95c 	bl	8003c00 <USB_SetDevSpeed>
 8003948:	e003      	b.n	8003952 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800394a:	2103      	movs	r1, #3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f957 	bl	8003c00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003952:	2110      	movs	r1, #16
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f90b 	bl	8003b70 <USB_FlushTxFifo>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f929 	bl	8003bbc <USB_FlushRxFifo>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e043      	b.n	8003a26 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b4:	d118      	bne.n	80039e8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e013      	b.n	80039fa <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e008      	b.n	80039fa <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	461a      	mov	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3301      	adds	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d3b7      	bcc.n	800399e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e043      	b.n	8003abc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4a:	d118      	bne.n	8003a7e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e013      	b.n	8003a90 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e008      	b.n	8003a90 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3b7      	bcc.n	8003a34 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d111      	bne.n	8003b02 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <USB_DevInit+0x2dc>)
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	f043 0303 	orr.w	r3, r3, #3
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f043 0210 	orr.w	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <USB_DevInit+0x2e0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f043 0208 	orr.w	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b62:	b004      	add	sp, #16
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	00800100 	.word	0x00800100
 8003b6c:	803c3800 	.word	0x803c3800

08003b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <USB_FlushTxFifo+0x48>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d0f0      	beq.n	8003b8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <USB_FlushRxFifo+0x40>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e006      	b.n	8003bee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d0f0      	beq.n	8003bce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	00030d40 	.word	0x00030d40

08003c00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003c52:	2003      	movs	r0, #3
 8003c54:	f7fd fa24 	bl	80010a0 <HAL_Delay>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <USB_CoreReset+0x64>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e01b      	b.n	8003cba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	daf2      	bge.n	8003c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <USB_CoreReset+0x64>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e006      	b.n	8003cba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d0f0      	beq.n	8003c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	00030d40 	.word	0x00030d40

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4e0d      	ldr	r6, [pc, #52]	; (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	; (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1ba4      	subs	r4, r4, r6
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2500      	movs	r5, #0
 8003cd8:	42a5      	cmp	r5, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4e0b      	ldr	r6, [pc, #44]	; (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	; (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f000 f820 	bl	8003d24 <_init>
 8003ce4:	1ba4      	subs	r4, r4, r6
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2500      	movs	r5, #0
 8003cea:	42a5      	cmp	r5, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf4:	4798      	blx	r3
 8003cf6:	3501      	adds	r5, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cfe:	4798      	blx	r3
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08003d5c 	.word	0x08003d5c
 8003d08:	08003d5c 	.word	0x08003d5c
 8003d0c:	08003d5c 	.word	0x08003d5c
 8003d10:	08003d60 	.word	0x08003d60

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <_init>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr

08003d30 <_fini>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr
