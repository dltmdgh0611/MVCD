
MVCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006608  08006608  00016608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006848  08006848  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006850  08006850  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  200001dc  08006a34  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  08006a34  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125b1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029ae  00000000  00000000  000327bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000361a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026061  00000000  00000000  00037078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e287  00000000  00000000  0005d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3f63  00000000  00000000  0006b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f2c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  0014f340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080065ec 	.word	0x080065ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	080065ec 	.word	0x080065ec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b972 	b.w	8000e64 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9e08      	ldr	r6, [sp, #32]
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4688      	mov	r8, r1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0803 	orr.w	r8, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd0:	fa1f fc85 	uxth.w	ip, r5
 8000bd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bea:	f080 811b 	bcs.w	8000e24 <__udivmoddi4+0x28c>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 8118 	bls.w	8000e24 <__udivmoddi4+0x28c>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0c:	45a4      	cmp	ip, r4
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x8c>
 8000c10:	192c      	adds	r4, r5, r4
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x290>
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x290>
 8000c20:	3802      	subs	r0, #2
 8000c22:	442c      	add	r4, r5
 8000c24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c28:	eba4 040c 	sub.w	r4, r4, ip
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80eb 	beq.w	8000e1e <__udivmoddi4+0x286>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d147      	bne.n	8000cee <__udivmoddi4+0x156>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fa 	bhi.w	8000e5c <__udivmoddi4+0x2c4>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	1b49      	subs	r1, r1, r5
 8000c8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c90:	fa1f f885 	uxth.w	r8, r5
 8000c94:	2701      	movs	r7, #1
 8000c96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x124>
 8000cac:	18eb      	adds	r3, r5, r3
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x122>
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	f200 80cd 	bhi.w	8000e54 <__udivmoddi4+0x2bc>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x14c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x14a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80b6 	bhi.w	8000e4e <__udivmoddi4+0x2b6>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e79f      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cee:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf2:	40bb      	lsls	r3, r7
 8000cf4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000d00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d0c:	4325      	orrs	r5, r4
 8000d0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d12:	0c2c      	lsrs	r4, r5, #16
 8000d14:	fb08 3319 	mls	r3, r8, r9, r3
 8000d18:	fa1f fa8e 	uxth.w	sl, lr
 8000d1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d20:	fb09 f40a 	mul.w	r4, r9, sl
 8000d24:	429c      	cmp	r4, r3
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1e 0303 	adds.w	r3, lr, r3
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	f080 8087 	bcs.w	8000e4a <__udivmoddi4+0x2b2>
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	f240 8084 	bls.w	8000e4a <__udivmoddi4+0x2b2>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4473      	add	r3, lr
 8000d48:	1b1b      	subs	r3, r3, r4
 8000d4a:	b2ad      	uxth	r5, r5
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d5c:	45a2      	cmp	sl, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1da>
 8000d60:	eb1e 0404 	adds.w	r4, lr, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	d26b      	bcs.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6a:	45a2      	cmp	sl, r4
 8000d6c:	d969      	bls.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4474      	add	r4, lr
 8000d72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d76:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7a:	eba4 040a 	sub.w	r4, r4, sl
 8000d7e:	454c      	cmp	r4, r9
 8000d80:	46c2      	mov	sl, r8
 8000d82:	464b      	mov	r3, r9
 8000d84:	d354      	bcc.n	8000e30 <__udivmoddi4+0x298>
 8000d86:	d051      	beq.n	8000e2c <__udivmoddi4+0x294>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d069      	beq.n	8000e60 <__udivmoddi4+0x2c8>
 8000d8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d90:	eb64 0403 	sbc.w	r4, r4, r3
 8000d94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d98:	40fd      	lsrs	r5, r7
 8000d9a:	40fc      	lsrs	r4, r7
 8000d9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f703 	lsr.w	r7, r0, r3
 8000db0:	4095      	lsls	r5, r2
 8000db2:	fa01 f002 	lsl.w	r0, r1, r2
 8000db6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dbe:	4338      	orrs	r0, r7
 8000dc0:	0c01      	lsrs	r1, r0, #16
 8000dc2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc6:	fa1f f885 	uxth.w	r8, r5
 8000dca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb07 f308 	mul.w	r3, r7, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x256>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de4:	d22f      	bcs.n	8000e46 <__udivmoddi4+0x2ae>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d92d      	bls.n	8000e46 <__udivmoddi4+0x2ae>
 8000dea:	3f02      	subs	r7, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	b281      	uxth	r1, r0
 8000df2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfe:	fb00 f308 	mul.w	r3, r0, r8
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e0c:	d217      	bcs.n	8000e3e <__udivmoddi4+0x2a6>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d915      	bls.n	8000e3e <__udivmoddi4+0x2a6>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1c:	e73b      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e1e:	4637      	mov	r7, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e709      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e24:	4607      	mov	r7, r0
 8000e26:	e6e7      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x8c>
 8000e2c:	4541      	cmp	r1, r8
 8000e2e:	d2ab      	bcs.n	8000d88 <__udivmoddi4+0x1f0>
 8000e30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e34:	eb69 020e 	sbc.w	r2, r9, lr
 8000e38:	3801      	subs	r0, #1
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	e7a4      	b.n	8000d88 <__udivmoddi4+0x1f0>
 8000e3e:	4660      	mov	r0, ip
 8000e40:	e7e9      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e42:	4618      	mov	r0, r3
 8000e44:	e795      	b.n	8000d72 <__udivmoddi4+0x1da>
 8000e46:	4667      	mov	r7, ip
 8000e48:	e7d1      	b.n	8000dee <__udivmoddi4+0x256>
 8000e4a:	4681      	mov	r9, r0
 8000e4c:	e77c      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	442c      	add	r4, r5
 8000e52:	e747      	b.n	8000ce4 <__udivmoddi4+0x14c>
 8000e54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e58:	442b      	add	r3, r5
 8000e5a:	e72f      	b.n	8000cbc <__udivmoddi4+0x124>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e60:	4637      	mov	r7, r6
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0xa0>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <MVCD_DrawGrid>:
#include "MVCD_ST7920lib.h"
#include <math.h>



void MVCD_DrawGrid(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

	for(int i=0;i<128;i++){
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e02d      	b.n	8000ed0 <MVCD_DrawGrid+0x68>
		MVCD_dot_xy(i, 32);
 8000e74:	2120      	movs	r1, #32
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f9ba 	bl	80011f0 <MVCD_dot_xy>
		if(i<64)MVCD_dot_xy(64,i);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e80:	dc03      	bgt.n	8000e8a <MVCD_DrawGrid+0x22>
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2040      	movs	r0, #64	; 0x40
 8000e86:	f000 f9b3 	bl	80011f0 <MVCD_dot_xy>
		//draw grid

		MVCD_dot_xy(126,31);
 8000e8a:	211f      	movs	r1, #31
 8000e8c:	207e      	movs	r0, #126	; 0x7e
 8000e8e:	f000 f9af 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(126,33);
 8000e92:	2121      	movs	r1, #33	; 0x21
 8000e94:	207e      	movs	r0, #126	; 0x7e
 8000e96:	f000 f9ab 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(125,30);
 8000e9a:	211e      	movs	r1, #30
 8000e9c:	207d      	movs	r0, #125	; 0x7d
 8000e9e:	f000 f9a7 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(125,34);
 8000ea2:	2122      	movs	r1, #34	; 0x22
 8000ea4:	207d      	movs	r0, #125	; 0x7d
 8000ea6:	f000 f9a3 	bl	80011f0 <MVCD_dot_xy>
		// right arrow

		MVCD_dot_xy(63,1);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	203f      	movs	r0, #63	; 0x3f
 8000eae:	f000 f99f 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(65,1);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2041      	movs	r0, #65	; 0x41
 8000eb6:	f000 f99b 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(62,2);
 8000eba:	2102      	movs	r1, #2
 8000ebc:	203e      	movs	r0, #62	; 0x3e
 8000ebe:	f000 f997 	bl	80011f0 <MVCD_dot_xy>
		MVCD_dot_xy(66,2);
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	2042      	movs	r0, #66	; 0x42
 8000ec6:	f000 f993 	bl	80011f0 <MVCD_dot_xy>
	for(int i=0;i<128;i++){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed4:	ddce      	ble.n	8000e74 <MVCD_DrawGrid+0xc>
		// up arrow


	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MVCD_Draw1f>:

void MVCD_Draw1f(double a,int p,int q,_Bool newflag){
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0b04 	vstr	d0, [r7, #16]
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	71fb      	strb	r3, [r7, #7]
	int x=0,y=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
	double tempA=0;
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	f04f 0400 	mov.w	r4, #0
 8000f02:	e9c7 3408 	strd	r3, r4, [r7, #32]

	for(x=0;x<64;x++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f0a:	e069      	b.n	8000fe0 <MVCD_Draw1f+0x100>
		for(int i=0;i<(a > 1 ? a : 1);i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e047      	b.n	8000fa2 <MVCD_Draw1f+0xc2>
			if(YZERO-y-q >= 0)MVCD_dot_xy(XZERO+x+p, YZERO-y-q);
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	f1c3 0220 	rsb	r2, r3, #32
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0c      	blt.n	8000f3a <MVCD_Draw1f+0x5a>
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	18d0      	adds	r0, r2, r3
 8000f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2c:	f1c3 0220 	rsb	r2, r3, #32
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	f000 f95b 	bl	80011f0 <MVCD_dot_xy>
			if(YZERO+y-q < 64)MVCD_dot_xy(XZERO-x+p, YZERO+y-q);
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	f103 0220 	add.w	r2, r3, #32
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b3f      	cmp	r3, #63	; 0x3f
 8000f46:	dc0c      	bgt.n	8000f62 <MVCD_Draw1f+0x82>
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	18d0      	adds	r0, r2, r3
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	f103 0220 	add.w	r2, r3, #32
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f000 f947 	bl	80011f0 <MVCD_dot_xy>
			tempA+=a;
 8000f62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f6a:	f7ff f94f 	bl	800020c <__adddf3>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	e9c7 3408 	strd	r3, r4, [r7, #32]
			if(tempA>=1){
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MVCD_Draw1f+0x110>)
 8000f7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f80:	f7ff fd80 	bl	8000a84 <__aeabi_dcmpge>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <MVCD_Draw1f+0xbc>
				y++;
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
				tempA=0;
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	f04f 0400 	mov.w	r4, #0
 8000f98:	e9c7 3408 	strd	r3, r4, [r7, #32]
		for(int i=0;i<(a > 1 ? a : 1);i++){
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	69f8      	ldr	r0, [r7, #28]
 8000fa4:	f7ff fa7e 	bl	80004a4 <__aeabi_i2d>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	460d      	mov	r5, r1
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MVCD_Draw1f+0x110>)
 8000fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fb6:	f7ff fd6f 	bl	8000a98 <__aeabi_dcmpgt>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <MVCD_Draw1f+0xe6>
 8000fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fc4:	e002      	b.n	8000fcc <MVCD_Draw1f+0xec>
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <MVCD_Draw1f+0x110>)
 8000fcc:	4622      	mov	r2, r4
 8000fce:	462b      	mov	r3, r5
 8000fd0:	f7ff fd62 	bl	8000a98 <__aeabi_dcmpgt>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d19b      	bne.n	8000f12 <MVCD_Draw1f+0x32>
	for(x=0;x<64;x++){
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe4:	dd92      	ble.n	8000f0c <MVCD_Draw1f+0x2c>
		}


	}

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bdb0      	pop	{r4, r5, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	3ff00000 	.word	0x3ff00000

08000ff4 <MVCD_delay_us>:

#define RST_PIN GPIO_PIN_14
#define RST_PORT GPIOF

void MVCD_delay_us (uint16_t us)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MVCD_delay_us+0x2c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001006:	bf00      	nop
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <MVCD_delay_us+0x2c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f9      	bcc.n	8001008 <MVCD_delay_us+0x14>
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000a4c 	.word	0x20000a4c

08001024 <MVCD_SendByte_SPI>:

void MVCD_SendByte_SPI(uint8_t byte)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e023      	b.n	800107c <MVCD_SendByte_SPI+0x58>
	{
		if((byte<<i)&0x80)
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <MVCD_SendByte_SPI+0x2e>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	4810      	ldr	r0, [pc, #64]	; (800108c <MVCD_SendByte_SPI+0x68>)
 800104c:	f001 fe9c 	bl	8002d88 <HAL_GPIO_WritePin>
 8001050:	e005      	b.n	800105e <MVCD_SendByte_SPI+0x3a>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <MVCD_SendByte_SPI+0x68>)
 800105a:	f001 fe95 	bl	8002d88 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <MVCD_SendByte_SPI+0x6c>)
 8001066:	f001 fe8f 	bl	8002d88 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MVCD_SendByte_SPI+0x6c>)
 8001072:	f001 fe89 	bl	8002d88 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b07      	cmp	r3, #7
 8001080:	ddd8      	ble.n	8001034 <MVCD_SendByte_SPI+0x10>
	}
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400

08001094 <MVCD_ST7920_Send>:

void MVCD_ST7920_Send(uint8_t data, int modflag) //modflag - (data 1), (cmd 0)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a6:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MVCD_ST7920_Send+0x60>)
 80010a8:	f001 fe6e 	bl	8002d88 <HAL_GPIO_WritePin>

	MVCD_SendByte_SPI(0xf8+(modflag<<1));  // send the SYNC + RS(1)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b08      	subs	r3, #8
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffb3 	bl	8001024 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI(data&0xf0);  // send the higher nibble first
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f023 030f 	bic.w	r3, r3, #15
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffac 	bl	8001024 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI((data<<4)&0xf0);  // send the lower nibble
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffa6 	bl	8001024 <MVCD_SendByte_SPI>
	MVCD_delay_us(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff ff8b 	bl	8000ff4 <MVCD_delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MVCD_ST7920_Send+0x60>)
 80010e6:	f001 fe4f 	bl	8002d88 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <MVCD_ST7920_baseinit>:

void MVCD_ST7920_baseinit(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <MVCD_ST7920_baseinit+0x94>)
 8001104:	f001 fe40 	bl	8002d88 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8001108:	200a      	movs	r0, #10
 800110a:	f000 ff1d 	bl	8001f48 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <MVCD_ST7920_baseinit+0x94>)
 8001116:	f001 fe37 	bl	8002d88 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 800111a:	2032      	movs	r0, #50	; 0x32
 800111c:	f000 ff14 	bl	8001f48 <HAL_Delay>


	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8001120:	2100      	movs	r1, #0
 8001122:	2030      	movs	r0, #48	; 0x30
 8001124:	f7ff ffb6 	bl	8001094 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  //  >100us delay
 8001128:	206e      	movs	r0, #110	; 0x6e
 800112a:	f7ff ff63 	bl	8000ff4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 800112e:	2100      	movs	r1, #0
 8001130:	2030      	movs	r0, #48	; 0x30
 8001132:	f7ff ffaf 	bl	8001094 <MVCD_ST7920_Send>
	MVCD_delay_us(40);  // >37us delay
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f7ff ff5c 	bl	8000ff4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x08,CMD);  // D=0, C=0, B=0
 800113c:	2100      	movs	r1, #0
 800113e:	2008      	movs	r0, #8
 8001140:	f7ff ffa8 	bl	8001094 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  // >100us delay
 8001144:	206e      	movs	r0, #110	; 0x6e
 8001146:	f7ff ff55 	bl	8000ff4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x01,CMD);  // clear screen
 800114a:	2100      	movs	r1, #0
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ffa1 	bl	8001094 <MVCD_ST7920_Send>
	HAL_Delay(12);  // >10 ms delay
 8001152:	200c      	movs	r0, #12
 8001154:	f000 fef8 	bl	8001f48 <HAL_Delay>


	MVCD_ST7920_Send(0x06,CMD);  // cursor increment right no shift
 8001158:	2100      	movs	r1, #0
 800115a:	2006      	movs	r0, #6
 800115c:	f7ff ff9a 	bl	8001094 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fef1 	bl	8001f48 <HAL_Delay>

	MVCD_ST7920_Send(0x0C,CMD);  // D=1, C=0, B=0
 8001166:	2100      	movs	r1, #0
 8001168:	200c      	movs	r0, #12
 800116a:	f7ff ff93 	bl	8001094 <MVCD_ST7920_Send>
    HAL_Delay(1);  // 1ms delay
 800116e:	2001      	movs	r0, #1
 8001170:	f000 feea 	bl	8001f48 <HAL_Delay>

    MVCD_ST7920_Send(0x02,CMD);  // return to home
 8001174:	2100      	movs	r1, #0
 8001176:	2002      	movs	r0, #2
 8001178:	f7ff ff8c 	bl	8001094 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fee3 	bl	8001f48 <HAL_Delay>
	HAL_Delay(2);
 8001182:	2002      	movs	r0, #2
 8001184:	f000 fee0 	bl	8001f48 <HAL_Delay>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021400 	.word	0x40021400

08001190 <MVCD_ST7920_GraphicMode>:

void MVCD_ST7920_GraphicMode (_Bool enable)   // 1-enable, 0-disable
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	if (enable == ON)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d015      	beq.n	80011cc <MVCD_ST7920_GraphicMode+0x3c>
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 80011a0:	2100      	movs	r1, #0
 80011a2:	2030      	movs	r0, #48	; 0x30
 80011a4:	f7ff ff76 	bl	8001094 <MVCD_ST7920_Send>
		HAL_Delay (1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 fecd 	bl	8001f48 <HAL_Delay>
		MVCD_ST7920_Send(0x34,CMD);  // switch to Extended instructions
 80011ae:	2100      	movs	r1, #0
 80011b0:	2034      	movs	r0, #52	; 0x34
 80011b2:	f7ff ff6f 	bl	8001094 <MVCD_ST7920_Send>
		HAL_Delay (1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fec6 	bl	8001f48 <HAL_Delay>
		MVCD_ST7920_Send(0x36,CMD);  // enable graphics
 80011bc:	2100      	movs	r1, #0
 80011be:	2036      	movs	r0, #54	; 0x36
 80011c0:	f7ff ff68 	bl	8001094 <MVCD_ST7920_Send>
		HAL_Delay (1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 febf 	bl	8001f48 <HAL_Delay>
	else if (enable == OFF)
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
		HAL_Delay (1);
	}
}
 80011ca:	e00c      	b.n	80011e6 <MVCD_ST7920_GraphicMode+0x56>
	else if (enable == OFF)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <MVCD_ST7920_GraphicMode+0x56>
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 80011d8:	2100      	movs	r1, #0
 80011da:	2030      	movs	r0, #48	; 0x30
 80011dc:	f7ff ff5a 	bl	8001094 <MVCD_ST7920_Send>
		HAL_Delay (1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f000 feb1 	bl	8001f48 <HAL_Delay>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <MVCD_dot_xy>:


void MVCD_dot_xy(int x,int y){
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    int flx = (int)floor(x/16);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da00      	bge.n	8001202 <MVCD_dot_xy+0x12>
 8001200:	330f      	adds	r3, #15
 8001202:	111b      	asrs	r3, r3, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f94d 	bl	80004a4 <__aeabi_i2d>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4618      	mov	r0, r3
 8001210:	4621      	mov	r1, r4
 8001212:	f7ff fc61 	bl	8000ad8 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]
    prv_val[flx][y] |= (0x8000 >> x%16);
 800121a:	493a      	ldr	r1, [pc, #232]	; (8001304 <MVCD_dot_xy+0x114>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	019a      	lsls	r2, r3, #6
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4413      	add	r3, r2
 8001224:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4259      	negs	r1, r3
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	f001 010f 	and.w	r1, r1, #15
 8001234:	bf58      	it	pl
 8001236:	424b      	negpl	r3, r1
 8001238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123c:	fa41 f303 	asr.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	4830      	ldr	r0, [pc, #192]	; (8001304 <MVCD_dot_xy+0x114>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	0199      	lsls	r1, r3, #6
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	440b      	add	r3, r1
 800124c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    MVCD_ST7920_Send(0x36, CMD);
 8001250:	2100      	movs	r1, #0
 8001252:	2036      	movs	r0, #54	; 0x36
 8001254:	f7ff ff1e 	bl	8001094 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+(y % 32), CMD);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	425a      	negs	r2, r3
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	bf58      	it	pl
 8001266:	4253      	negpl	r3, r2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3b80      	subs	r3, #128	; 0x80
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff0f 	bl	8001094 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+ (y / 32) * 8 + floor(x/16), CMD);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da00      	bge.n	800127e <MVCD_dot_xy+0x8e>
 800127c:	331f      	adds	r3, #31
 800127e:	115b      	asrs	r3, r3, #5
 8001280:	3310      	adds	r3, #16
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f90d 	bl	80004a4 <__aeabi_i2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da00      	bge.n	8001296 <MVCD_dot_xy+0xa6>
 8001294:	330f      	adds	r3, #15
 8001296:	111b      	asrs	r3, r3, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f903 	bl	80004a4 <__aeabi_i2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7fe ffb1 	bl	800020c <__adddf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff fc39 	bl	8000b28 <__aeabi_d2uiz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fee9 	bl	8001094 <MVCD_ST7920_Send>

    MVCD_ST7920_Send(0x30, CMD);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2030      	movs	r0, #48	; 0x30
 80012c6:	f7ff fee5 	bl	8001094 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <MVCD_dot_xy+0x114>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	019a      	lsls	r2, r3, #6
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d8:	121b      	asrs	r3, r3, #8
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fed8 	bl	8001094 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <MVCD_dot_xy+0x114>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	019a      	lsls	r2, r3, #6
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fecc 	bl	8001094 <MVCD_ST7920_Send>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	20000204 	.word	0x20000204

08001308 <MVCD_LCDclear>:
    MVCD_ST7920_Send(0x30, CMD);
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
}

void MVCD_LCDclear(){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    for(int j=0;j<8;j++){
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	e044      	b.n	800139e <MVCD_LCDclear+0x96>
        for(int i=0;i<64;i++){
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e03b      	b.n	8001392 <MVCD_LCDclear+0x8a>
        	MVCD_ST7920_Send(0x36, CMD);
 800131a:	2100      	movs	r1, #0
 800131c:	2036      	movs	r0, #54	; 0x36
 800131e:	f7ff feb9 	bl	8001094 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+(i%32), CMD);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	425a      	negs	r2, r3
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	bf58      	it	pl
 8001330:	4253      	negpl	r3, r2
 8001332:	b2db      	uxtb	r3, r3
 8001334:	3b80      	subs	r3, #128	; 0x80
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff feaa 	bl	8001094 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+((i/32)*8+j), CMD);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	da00      	bge.n	8001348 <MVCD_LCDclear+0x40>
 8001346:	331f      	adds	r3, #31
 8001348:	115b      	asrs	r3, r3, #5
 800134a:	b2db      	uxtb	r3, r3
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4413      	add	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	3b80      	subs	r3, #128	; 0x80
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe98 	bl	8001094 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x30, CMD);
 8001364:	2100      	movs	r1, #0
 8001366:	2030      	movs	r0, #48	; 0x30
 8001368:	f7ff fe94 	bl	8001094 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 800136c:	2101      	movs	r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fe90 	bl	8001094 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8001374:	2101      	movs	r1, #1
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fe8c 	bl	8001094 <MVCD_ST7920_Send>
        	prv_val[j][i] = 0;
 800137c:	490b      	ldr	r1, [pc, #44]	; (80013ac <MVCD_LCDclear+0xa4>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	019a      	lsls	r2, r3, #6
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int i=0;i<64;i++){
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	ddc0      	ble.n	800131a <MVCD_LCDclear+0x12>
    for(int j=0;j<8;j++){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	ddb7      	ble.n	8001314 <MVCD_LCDclear+0xc>
        }
    }

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000204 	.word	0x20000204

080013b0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_ETH_Init+0x78>)
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <MX_ETH_Init+0x7c>)
 80013b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_ETH_Init+0x78>)
 80013bc:	2201      	movs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_ETH_Init+0x78>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_ETH_Init+0x78>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_ETH_Init+0x78>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_ETH_Init+0x78>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	3302      	adds	r3, #2
 80013de:	22e1      	movs	r2, #225	; 0xe1
 80013e0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_ETH_Init+0x78>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	3303      	adds	r3, #3
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_ETH_Init+0x78>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_ETH_Init+0x78>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	3305      	adds	r3, #5
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_ETH_Init+0x78>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_ETH_Init+0x78>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_ETH_Init+0x78>)
 800140e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001412:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_ETH_Init+0x78>)
 8001416:	f000 fe9f 	bl	8002158 <HAL_ETH_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001420:	f000 fa68 	bl	80018f4 <Error_Handler>
  }

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000a04 	.word	0x20000a04
 800142c:	40028000 	.word	0x40028000

08001430 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_ETH_MspInit+0x174>)
 800144e:	4293      	cmp	r3, r2
 8001450:	f040 80a4 	bne.w	800159c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 800145e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 800147a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800147e:	6313      	str	r3, [r2, #48]	; 0x30
 8001480:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a2f      	ldr	r2, [pc, #188]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 8001506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_ETH_MspInit+0x178>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001518:	2332      	movs	r3, #50	; 0x32
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001528:	230b      	movs	r3, #11
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	481e      	ldr	r0, [pc, #120]	; (80015ac <HAL_ETH_MspInit+0x17c>)
 8001534:	f001 fa7e 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001538:	2386      	movs	r3, #134	; 0x86
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001548:	230b      	movs	r3, #11
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	4817      	ldr	r0, [pc, #92]	; (80015b0 <HAL_ETH_MspInit+0x180>)
 8001554:	f001 fa6e 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156a:	230b      	movs	r3, #11
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <HAL_ETH_MspInit+0x184>)
 8001576:	f001 fa5d 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800157a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158c:	230b      	movs	r3, #11
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <HAL_ETH_MspInit+0x188>)
 8001598:	f001 fa4c 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40028000 	.word	0x40028000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40021800 	.word	0x40021800

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a66      	ldr	r2, [pc, #408]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b64      	ldr	r3, [pc, #400]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a5f      	ldr	r2, [pc, #380]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <MX_GPIO_Init+0x1d4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b59      	ldr	r3, [pc, #356]	; (8001790 <MX_GPIO_Init+0x1d4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b56      	ldr	r3, [pc, #344]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <MX_GPIO_Init+0x1d4>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b48      	ldr	r3, [pc, #288]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b44      	ldr	r3, [pc, #272]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a43      	ldr	r2, [pc, #268]	; (8001790 <MX_GPIO_Init+0x1d4>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <MX_GPIO_Init+0x1d4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <MX_GPIO_Init+0x1d4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <MX_GPIO_Init+0x1d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80016b8:	4836      	ldr	r0, [pc, #216]	; (8001794 <MX_GPIO_Init+0x1d8>)
 80016ba:	f001 fb65 	bl	8002d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80016c4:	4834      	ldr	r0, [pc, #208]	; (8001798 <MX_GPIO_Init+0x1dc>)
 80016c6:	f001 fb5f 	bl	8002d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <MX_GPIO_Init+0x1e0>)
 80016d2:	f001 fb59 	bl	8002d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	4831      	ldr	r0, [pc, #196]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 80016dc:	f001 fb54 	bl	8002d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <MX_GPIO_Init+0x1e8>)
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	482c      	ldr	r0, [pc, #176]	; (80017a8 <MX_GPIO_Init+0x1ec>)
 80016f6:	f001 f99d 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016fa:	f244 0381 	movw	r3, #16513	; 0x4081
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <MX_GPIO_Init+0x1d8>)
 8001714:	f001 f98e 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001718:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4819      	ldr	r0, [pc, #100]	; (8001798 <MX_GPIO_Init+0x1dc>)
 8001732:	f001 f97f 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001736:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <MX_GPIO_Init+0x1e0>)
 8001750:	f001 f970 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 800176c:	f001 f962 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <MX_GPIO_Init+0x1e4>)
 8001784:	f001 f956 	bl	8002a34 <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400
 8001798:	40021400 	.word	0x40021400
 800179c:	40021000 	.word	0x40021000
 80017a0:	40021800 	.word	0x40021800
 80017a4:	10110000 	.word	0x10110000
 80017a8:	40020800 	.word	0x40020800
 80017ac:	00000000 	.word	0x00000000

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80017b6:	f000 fb55 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f82f 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f7ff fefd 	bl	80015bc <MX_GPIO_Init>
  MX_ETH_Init();
 80017c2:	f7ff fdf5 	bl	80013b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80017c6:	f000 f9d1 	bl	8001b6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017ca:	f000 fa99 	bl	8001d00 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80017ce:	f000 f931 	bl	8001a34 <MX_TIM1_Init>
  MX_UART4_Init();
 80017d2:	f000 f9a1 	bl	8001b18 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t a = 'a';
 80017d6:	2361      	movs	r3, #97	; 0x61
 80017d8:	71fb      	strb	r3, [r7, #7]
  uint8_t s = 'k';
 80017da:	236b      	movs	r3, #107	; 0x6b
 80017dc:	71bb      	strb	r3, [r7, #6]
  HAL_TIM_Base_Start(&htim1);
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <main+0x68>)
 80017e0:	f002 f895 	bl	800390e <HAL_TIM_Base_Start>
  MVCD_ST7920_baseinit();
 80017e4:	f7ff fc88 	bl	80010f8 <MVCD_ST7920_baseinit>
  MVCD_ST7920_GraphicMode(ON);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fcd1 	bl	8001190 <MVCD_ST7920_GraphicMode>
  goto START;
 80017ee:	bf00      	nop
	 	  }
	  }
  }

  START:
  MVCD_LCDclear();
 80017f0:	f7ff fd8a 	bl	8001308 <MVCD_LCDclear>
  HAL_Delay(100);
 80017f4:	2064      	movs	r0, #100	; 0x64
 80017f6:	f000 fba7 	bl	8001f48 <HAL_Delay>
  MVCD_DrawGrid();
 80017fa:	f7ff fb35 	bl	8000e68 <MVCD_DrawGrid>
  MVCD_Draw1f((double)2/3, 0, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2000      	movs	r0, #0
 8001804:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8001810 <main+0x60>
 8001808:	f7ff fb6a 	bl	8000ee0 <MVCD_Draw1f>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800180c:	e7fe      	b.n	800180c <main+0x5c>
 800180e:	bf00      	nop
 8001810:	55555555 	.word	0x55555555
 8001814:	3fe55555 	.word	0x3fe55555
 8001818:	20000a4c 	.word	0x20000a4c

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f003 f9b0 	bl	8004b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <SystemClock_Config+0xd0>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a28      	ldr	r2, [pc, #160]	; (80018ec <SystemClock_Config+0xd0>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <SystemClock_Config+0xd0>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <SystemClock_Config+0xd4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <SystemClock_Config+0xd4>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SystemClock_Config+0xd4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001890:	2304      	movs	r3, #4
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001894:	2348      	movs	r3, #72	; 0x48
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001898:	2302      	movs	r3, #2
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800189c:	2303      	movs	r3, #3
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fba5 	bl	8002ff4 <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018b0:	f000 f820 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2102      	movs	r1, #2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fdfe 	bl	80034d4 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018de:	f000 f809 	bl	80018f4 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_MspInit+0x4c>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x4c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 faae 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x50>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x16>
		heap_end = &end;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <_sbrk+0x50>)
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <_sbrk+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <_sbrk+0x50>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <_sbrk+0x50>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	466a      	mov	r2, sp
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d907      	bls.n	80019ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019da:	f003 f8af 	bl	8004b3c <__errno>
 80019de:	4602      	mov	r2, r0
 80019e0:	230c      	movs	r3, #12
 80019e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	e006      	b.n	80019f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <_sbrk+0x50>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <_sbrk+0x50>)
 80019f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200001f8 	.word	0x200001f8
 8001a04:	20000f20 	.word	0x20000f20

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <SystemInit+0x28>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <SystemInit+0x28>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SystemInit+0x28>)
 8001a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a22:	609a      	str	r2, [r3, #8]
#endif
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <MX_TIM1_Init+0x9c>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a58:	2247      	movs	r2, #71	; 0x47
 8001a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a7c:	4813      	ldr	r0, [pc, #76]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a7e:	f001 ff1b 	bl	80038b8 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a88:	f7ff ff34 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM1_Init+0x98>)
 8001a9a:	f001 ff5c 	bl	8003956 <HAL_TIM_ConfigClockSource>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001aa4:	f7ff ff26 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_TIM1_Init+0x98>)
 8001ab6:	f002 f93f 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ac0:	f7ff ff18 	bl	80018f4 <Error_Handler>
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000a4c 	.word	0x20000a4c
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40023800 	.word	0x40023800

08001b18 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_UART4_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_UART4_Init+0x4c>)
 8001b50:	f002 f96e 	bl	8003e30 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7ff fecb 	bl	80018f4 <Error_Handler>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000acc 	.word	0x20000acc
 8001b68:	40004c00 	.word	0x40004c00

08001b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART3_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART3_UART_Init+0x4c>)
 8001ba4:	f002 f944 	bl	8003e30 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f7ff fea1 	bl	80018f4 <Error_Handler>
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000a8c 	.word	0x20000a8c
 8001bbc:	40004800 	.word	0x40004800

08001bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <HAL_UART_MspInit+0x128>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d14b      	bne.n	8001c7a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a40      	ldr	r2, [pc, #256]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a39      	ldr	r2, [pc, #228]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c46:	2308      	movs	r3, #8
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4827      	ldr	r0, [pc, #156]	; (8001cf0 <HAL_UART_MspInit+0x130>)
 8001c52:	f000 feef 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <HAL_UART_MspInit+0x134>)
 8001c74:	f000 fede 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c78:	e031      	b.n	8001cde <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_UART_MspInit+0x138>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d12c      	bne.n	8001cde <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_UART_MspInit+0x12c>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <HAL_UART_MspInit+0x13c>)
 8001cda:	f000 feab 	bl	8002a34 <HAL_GPIO_Init>
}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40004c00 	.word	0x40004c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	40020c00 	.word	0x40020c00

08001d00 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0e:	2204      	movs	r2, #4
 8001d10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d14:	2202      	movs	r2, #2
 8001d16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d44:	f001 f839 	bl	8002dba <HAL_PCD_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d4e:	f7ff fdd1 	bl	80018f4 <Error_Handler>
  }

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000b0c 	.word	0x20000b0c

08001d5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7c:	d13f      	bne.n	8001dfe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dac:	230a      	movs	r3, #10
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <HAL_PCD_MspInit+0xb0>)
 8001db8:	f000 fe3c 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <HAL_PCD_MspInit+0xb0>)
 8001dd2:	f000 fe2f 	bl	8002a34 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de0:	6353      	str	r3, [r2, #52]	; 0x34
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e16:	e003      	b.n	8001e20 <LoopCopyDataInit>

08001e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e1e:	3104      	adds	r1, #4

08001e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e28:	d3f6      	bcc.n	8001e18 <CopyDataInit>
  ldr  r2, =_sbss
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e2c:	e002      	b.n	8001e34 <LoopFillZerobss>

08001e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e30:	f842 3b04 	str.w	r3, [r2], #4

08001e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e38:	d3f9      	bcc.n	8001e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3a:	f7ff fde5 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f002 fe83 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e42:	f7ff fcb5 	bl	80017b0 <main>
  bx  lr    
 8001e46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e48:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e4c:	08006858 	.word	0x08006858
  ldr  r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e54:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001e58:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001e5c:	20000f1c 	.word	0x20000f1c

08001e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <HAL_Init+0x40>)
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_Init+0x40>)
 8001e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_Init+0x40>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f000 f92f 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f808 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e98:	f7ff fd34 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023c00 	.word	0x40023c00

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x54>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x58>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f939 	bl	800213e <HAL_SYSTICK_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00e      	b.n	8001ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d80a      	bhi.n	8001ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 f90f 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_InitTick+0x5c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	20000f14 	.word	0x20000f14

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000f14 	.word	0x20000f14

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_Delay+0x40>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000008 	.word	0x20000008

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff47 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff5c 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffb0 	bl	80020ac <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002168:	4baa      	ldr	r3, [pc, #680]	; (8002414 <HAL_ETH_Init+0x2bc>)
 800216a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e185      	b.n	800248a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff f94c 	bl	8001430 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <HAL_ETH_Init+0x2c0>)
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	4a9d      	ldr	r2, [pc, #628]	; (8002418 <HAL_ETH_Init+0x2c0>)
 80021a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a6:	6453      	str	r3, [r2, #68]	; 0x44
 80021a8:	4b9b      	ldr	r3, [pc, #620]	; (8002418 <HAL_ETH_Init+0x2c0>)
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021b4:	4b99      	ldr	r3, [pc, #612]	; (800241c <HAL_ETH_Init+0x2c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a98      	ldr	r2, [pc, #608]	; (800241c <HAL_ETH_Init+0x2c4>)
 80021ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021be:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021c0:	4b96      	ldr	r3, [pc, #600]	; (800241c <HAL_ETH_Init+0x2c4>)
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4994      	ldr	r1, [pc, #592]	; (800241c <HAL_ETH_Init+0x2c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021e6:	f7ff fea3 	bl	8001f30 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80021ec:	e011      	b.n	8002212 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80021ee:	f7ff fe9f 	bl	8001f30 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021fc:	d909      	bls.n	8002212 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e13b      	b.n	800248a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e4      	bne.n	80021ee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f023 031c 	bic.w	r3, r3, #28
 8002232:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002234:	f001 fb0c 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8002238:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4a78      	ldr	r2, [pc, #480]	; (8002420 <HAL_ETH_Init+0x2c8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d908      	bls.n	8002254 <HAL_ETH_Init+0xfc>
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_ETH_Init+0x2cc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d804      	bhi.n	8002254 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e027      	b.n	80022a4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	4a73      	ldr	r2, [pc, #460]	; (8002424 <HAL_ETH_Init+0x2cc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d908      	bls.n	800226e <HAL_ETH_Init+0x116>
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4a72      	ldr	r2, [pc, #456]	; (8002428 <HAL_ETH_Init+0x2d0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d804      	bhi.n	800226e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f043 030c 	orr.w	r3, r3, #12
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	e01a      	b.n	80022a4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4a6d      	ldr	r2, [pc, #436]	; (8002428 <HAL_ETH_Init+0x2d0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d903      	bls.n	800227e <HAL_ETH_Init+0x126>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4a6c      	ldr	r2, [pc, #432]	; (800242c <HAL_ETH_Init+0x2d4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d911      	bls.n	80022a2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_ETH_Init+0x2d4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d908      	bls.n	8002298 <HAL_ETH_Init+0x140>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4a69      	ldr	r2, [pc, #420]	; (8002430 <HAL_ETH_Init+0x2d8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d804      	bhi.n	8002298 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e005      	b.n	80022a4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	e000      	b.n	80022a4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80022a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80022ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f956 	bl	8002564 <HAL_ETH_WritePHYRegister>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9b3 	bl	8002630 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0d9      	b.n	800248a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80022d6:	20ff      	movs	r0, #255	; 0xff
 80022d8:	f7ff fe36 	bl	8001f48 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a7 	beq.w	8002434 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80022e6:	f7ff fe23 	bl	8001f30 <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	461a      	mov	r2, r3
 80022f2:	2101      	movs	r1, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8cd 	bl	8002494 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80022fa:	f7ff fe19 	bl	8001f30 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d90f      	bls.n	800232c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f98c 	bl	8002630 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0ae      	b.n	800248a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0da      	beq.n	80022ec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800233a:	2100      	movs	r1, #0
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f911 	bl	8002564 <HAL_ETH_WritePHYRegister>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800234c:	6939      	ldr	r1, [r7, #16]
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f96e 	bl	8002630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800235c:	2301      	movs	r3, #1
 800235e:	e094      	b.n	800248a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002360:	f7ff fde6 	bl	8001f30 <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	461a      	mov	r2, r3
 800236c:	2101      	movs	r1, #1
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f890 	bl	8002494 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002374:	f7ff fddc 	bl	8001f30 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d90f      	bls.n	80023a6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f94f 	bl	8002630 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e071      	b.n	800248a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0da      	beq.n	8002366 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	461a      	mov	r2, r3
 80023b6:	211f      	movs	r1, #31
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f86b 	bl	8002494 <HAL_ETH_ReadPHYRegister>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f930 	bl	8002630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023d8:	2301      	movs	r3, #1
 80023da:	e056      	b.n	800248a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	e002      	b.n	80023f6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	e037      	b.n	8002478 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	e032      	b.n	8002478 <HAL_ETH_Init+0x320>
 8002412:	bf00      	nop
 8002414:	03938700 	.word	0x03938700
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	01312cff 	.word	0x01312cff
 8002424:	02160ebf 	.word	0x02160ebf
 8002428:	039386ff 	.word	0x039386ff
 800242c:	05f5e0ff 	.word	0x05f5e0ff
 8002430:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002444:	4313      	orrs	r3, r2
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f889 	bl	8002564 <HAL_ETH_WritePHYRegister>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8e6 	bl	8002630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e00c      	b.n	800248a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002470:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002474:	f7ff fd68 	bl	8001f48 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8d8 	bl	8002630 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop

08002494 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	460b      	mov	r3, r1
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b82      	cmp	r3, #130	; 0x82
 80024b4:	d101      	bne.n	80024ba <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
 80024b8:	e050      	b.n	800255c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2282      	movs	r2, #130	; 0x82
 80024be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 031c 	and.w	r3, r3, #28
 80024d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8a1b      	ldrh	r3, [r3, #16]
 80024d6:	02db      	lsls	r3, r3, #11
 80024d8:	b29b      	uxth	r3, r3
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024e0:	897b      	ldrh	r3, [r7, #10]
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 0302 	bic.w	r3, r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002506:	f7ff fd13 	bl	8001f30 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800250c:	e015      	b.n	800253a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800250e:	f7ff fd0f 	bl	8001f30 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d309      	bcc.n	8002532 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e014      	b.n	800255c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e4      	bne.n	800250e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	460b      	mov	r3, r1
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b42      	cmp	r3, #66	; 0x42
 8002584:	d101      	bne.n	800258a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e04e      	b.n	8002628 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2242      	movs	r2, #66	; 0x42
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 031c 	and.w	r3, r3, #28
 80025a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8a1b      	ldrh	r3, [r3, #16]
 80025a6:	02db      	lsls	r3, r3, #11
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80025b0:	897b      	ldrh	r3, [r7, #10]
 80025b2:	019b      	lsls	r3, r3, #6
 80025b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025e0:	f7ff fca6 	bl	8001f30 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025e6:	e015      	b.n	8002614 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80025e8:	f7ff fca2 	bl	8001f30 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d309      	bcc.n	800260c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e00d      	b.n	8002628 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e4      	bne.n	80025e8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0b0      	sub	sp, #192	; 0xc0
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800264c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002654:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800265e:	2300      	movs	r3, #0
 8002660:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267a:	663b      	str	r3, [r7, #96]	; 0x60
 800267c:	e001      	b.n	8002682 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002686:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800268c:	2300      	movs	r3, #0
 800268e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800269c:	2340      	movs	r3, #64	; 0x40
 800269e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002704:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002708:	4bac      	ldr	r3, [pc, #688]	; (80029bc <ETH_MACDMAConfig+0x38c>)
 800270a:	4013      	ands	r3, r2
 800270c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002710:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002714:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002718:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800271c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002722:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002726:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800272a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002730:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002734:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002738:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800273a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800273c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002740:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002744:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002758:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff fbef 	bl	8001f48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002772:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002774:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002778:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800277a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800277c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800277e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002782:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002788:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800278a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800278e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002794:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002798:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80027a0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027a2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff fbca 	bl	8001f48 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027bc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027c6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80027d0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027e0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027e4:	4013      	ands	r3, r2
 80027e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027ee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80027f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027f4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80027f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80027fa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80027fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002800:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002806:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800280c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800280e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002820:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fb8b 	bl	8001f48 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800283a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800283c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002840:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff fb76 	bl	8001f48 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002864:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800286a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002878:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800288a:	2304      	movs	r3, #4
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800289a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ba:	3318      	adds	r3, #24
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <ETH_MACDMAConfig+0x390>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028ce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80028d0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028d2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80028d4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80028d6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80028d8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80028da:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80028dc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80028de:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80028e0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80028e2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80028e4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80028e6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80028ea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80028ee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	3318      	adds	r3, #24
 8002904:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002908:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002912:	3318      	adds	r3, #24
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800291a:	2001      	movs	r0, #1
 800291c:	f7ff fb14 	bl	8001f48 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002928:	3318      	adds	r3, #24
 800292a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002934:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002938:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800293c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002940:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002944:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002946:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800294a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002958:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff faed 	bl	8001f48 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800297a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10f      	bne.n	80029a4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298c:	331c      	adds	r3, #28
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	331c      	adds	r3, #28
 80029a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	461a      	mov	r2, r3
 80029aa:	2100      	movs	r1, #0
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f809 	bl	80029c4 <ETH_MACAddressConfig>
}
 80029b2:	bf00      	nop
 80029b4:	37c0      	adds	r7, #192	; 0xc0
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	ff20810f 	.word	0xff20810f
 80029c0:	f8de3f23 	.word	0xf8de3f23

080029c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3305      	adds	r3, #5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	3204      	adds	r2, #4
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <ETH_MACAddressConfig+0x68>)
 80029e6:	4413      	add	r3, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3303      	adds	r3, #3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	061a      	lsls	r2, r3, #24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3302      	adds	r3, #2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <ETH_MACAddressConfig+0x6c>)
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40028040 	.word	0x40028040
 8002a30:	40028044 	.word	0x40028044

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e177      	b.n	8002d40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8166 	bne.w	8002d3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d00b      	beq.n	8002a8e <HAL_GPIO_Init+0x5a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a82:	2b11      	cmp	r3, #17
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d130      	bne.n	8002af0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0xfc>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b12      	cmp	r3, #18
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80c0 	beq.w	8002d3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a64      	ldr	r2, [pc, #400]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b62      	ldr	r3, [pc, #392]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d037      	beq.n	8002c72 <HAL_GPIO_Init+0x23e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_GPIO_Init+0x32c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_GPIO_Init+0x23a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_GPIO_Init+0x330>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02b      	beq.n	8002c6a <HAL_GPIO_Init+0x236>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x232>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a53      	ldr	r2, [pc, #332]	; (8002d6c <HAL_GPIO_Init+0x338>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x22e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_GPIO_Init+0x33c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x22a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_GPIO_Init+0x340>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a50      	ldr	r2, [pc, #320]	; (8002d78 <HAL_GPIO_Init+0x344>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x222>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4f      	ldr	r2, [pc, #316]	; (8002d7c <HAL_GPIO_Init+0x348>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x21e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4e      	ldr	r2, [pc, #312]	; (8002d80 <HAL_GPIO_Init+0x34c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c4a:	2309      	movs	r3, #9
 8002c4c:	e012      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c4e:	230a      	movs	r3, #10
 8002c50:	e010      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c52:	2308      	movs	r3, #8
 8002c54:	e00e      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c56:	2307      	movs	r3, #7
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4934      	ldr	r1, [pc, #208]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c92:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb6:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae84 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3724      	adds	r7, #36	; 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40020800 	.word	0x40020800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40021400 	.word	0x40021400
 8002d74:	40021800 	.word	0x40021800
 8002d78:	40021c00 	.word	0x40021c00
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40022400 	.word	0x40022400
 8002d84:	40013c00 	.word	0x40013c00

08002d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
 8002d94:	4613      	mov	r3, r2
 8002d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d98:	787b      	ldrb	r3, [r7, #1]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da4:	e003      	b.n	8002dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	041a      	lsls	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dbc:	b08f      	sub	sp, #60	; 0x3c
 8002dbe:	af0a      	add	r7, sp, #40	; 0x28
 8002dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e10f      	b.n	8002fec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe ffb8 	bl	8001d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2203      	movs	r2, #3
 8002df0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 fc3b 	bl	8004686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	687e      	ldr	r6, [r7, #4]
 8002e18:	466d      	mov	r5, sp
 8002e1a:	f106 0410 	add.w	r4, r6, #16
 8002e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e2e:	1d33      	adds	r3, r6, #4
 8002e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e32:	6838      	ldr	r0, [r7, #0]
 8002e34:	f001 fbc6 	bl	80045c4 <USB_CoreInit>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0d0      	b.n	8002fec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fc29 	bl	80046a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e04a      	b.n	8002ef2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	333d      	adds	r3, #61	; 0x3d
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	333c      	adds	r3, #60	; 0x3c
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	b298      	uxth	r0, r3
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3342      	adds	r3, #66	; 0x42
 8002e98:	4602      	mov	r2, r0
 8002e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3344      	adds	r3, #68	; 0x44
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3348      	adds	r3, #72	; 0x48
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3350      	adds	r3, #80	; 0x50
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d3af      	bcc.n	8002e5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e044      	b.n	8002f8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3b5      	bcc.n	8002f02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	687e      	ldr	r6, [r7, #4]
 8002f9e:	466d      	mov	r5, sp
 8002fa0:	f106 0410 	add.w	r4, r6, #16
 8002fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb4:	1d33      	adds	r3, r6, #4
 8002fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb8:	6838      	ldr	r0, [r7, #0]
 8002fba:	f001 fb9f 	bl	80046fc <USB_DevInit>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e00d      	b.n	8002fec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fd5c 	bl	8004aa2 <USB_DevDisconnect>

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e25b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b9d      	ldr	r3, [pc, #628]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e236      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b91      	ldr	r3, [pc, #580]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a8a      	ldr	r2, [pc, #552]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a87      	ldr	r2, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a80      	ldr	r2, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff40 	bl	8001f30 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe ff3c 	bl	8001f30 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1fb      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe ff2c 	bl	8001f30 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe ff28 	bl	8001f30 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1e7      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1bb      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4952      	ldr	r1, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fee1 	bl	8001f30 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fedd 	bl	8001f30 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e19c      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4940      	ldr	r1, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fec0 	bl	8001f30 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe febc 	bl	8001f30 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e17b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d030      	beq.n	8003240 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fea0 	bl	8001f30 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fe9c 	bl	8001f30 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e15b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e015      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fe89 	bl	8001f30 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fe85 	bl	8001f30 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e144      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a0 	beq.w	800338e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d121      	bne.n	80032ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fe fe4b 	bl	8001f30 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e011      	b.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
 80032ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe fe3e 	bl	8001f30 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0fd      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x4d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2f0>
 80032d6:	4b7d      	ldr	r3, [pc, #500]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a7c      	ldr	r2, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	e01c      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d10c      	bne.n	8003306 <HAL_RCC_OscConfig+0x312>
 80032ec:	4b77      	ldr	r3, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a76      	ldr	r2, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	4b74      	ldr	r3, [pc, #464]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a73      	ldr	r2, [pc, #460]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e00b      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 8003306:	4b71      	ldr	r3, [pc, #452]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a70      	ldr	r2, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	4b6e      	ldr	r3, [pc, #440]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a6d      	ldr	r2, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fe03 	bl	8001f30 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe fdff 	bl	8001f30 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0bc      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ee      	beq.n	800332e <HAL_RCC_OscConfig+0x33a>
 8003350:	e014      	b.n	800337c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe fded 	bl	8001f30 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe fde9 	bl	8001f30 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0a6      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ee      	bne.n	800335a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b52      	ldr	r3, [pc, #328]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a51      	ldr	r2, [pc, #324]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8092 	beq.w	80034bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d05c      	beq.n	800345e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d141      	bne.n	8003430 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe fdbd 	bl	8001f30 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe fdb9 	bl	8001f30 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e078      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	4933      	ldr	r1, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fd92 	bl	8001f30 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fd8e 	bl	8001f30 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04d      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x41c>
 800342e:	e045      	b.n	80034bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe fd7b 	bl	8001f30 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe fd77 	bl	8001f30 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e036      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x44a>
 800345c:	e02e      	b.n	80034bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e029      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	429a      	cmp	r2, r3
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d115      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003492:	4013      	ands	r3, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003498:	4293      	cmp	r3, r2
 800349a:	d10d      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40007000 	.word	0x40007000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470060 	.word	0x42470060

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cc      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a58      	ldr	r2, [pc, #352]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494d      	ldr	r1, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d044      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e067      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4934      	ldr	r1, [pc, #208]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fe fcb4 	bl	8001f30 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe fcb0 	bl	8001f30 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 020c 	and.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1eb      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20c      	bcs.n	800361c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e032      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4916      	ldr	r1, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365a:	f000 f821 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	fa21 f303 	lsr.w	r3, r1, r3
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fc14 	bl	8001ea8 <HAL_InitTick>

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	08006608 	.word	0x08006608
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d007      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x32>
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x38>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80b4 	bne.w	8003834 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ce:	60bb      	str	r3, [r7, #8]
       break;
 80036d0:	e0b3      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d2:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036d4:	60bb      	str	r3, [r7, #8]
      break;
 80036d6:	e0b0      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d8:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e2:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04a      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	ea03 0501 	and.w	r5, r3, r1
 8003704:	ea04 0602 	and.w	r6, r4, r2
 8003708:	4629      	mov	r1, r5
 800370a:	4632      	mov	r2, r6
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	0154      	lsls	r4, r2, #5
 8003716:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	4619      	mov	r1, r3
 800371e:	4622      	mov	r2, r4
 8003720:	1b49      	subs	r1, r1, r5
 8003722:	eb62 0206 	sbc.w	r2, r2, r6
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	0194      	lsls	r4, r2, #6
 8003730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003734:	018b      	lsls	r3, r1, #6
 8003736:	1a5b      	subs	r3, r3, r1
 8003738:	eb64 0402 	sbc.w	r4, r4, r2
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	00e2      	lsls	r2, r4, #3
 8003746:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	195b      	adds	r3, r3, r5
 8003752:	eb44 0406 	adc.w	r4, r4, r6
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	0262      	lsls	r2, r4, #9
 8003760:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003764:	0259      	lsls	r1, r3, #9
 8003766:	460b      	mov	r3, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4618      	mov	r0, r3
 800376c:	4621      	mov	r1, r4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	f7fd f9f6 	bl	8000b68 <__aeabi_uldivmod>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e049      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	ea03 0501 	and.w	r5, r3, r1
 800379a:	ea04 0602 	and.w	r6, r4, r2
 800379e:	4629      	mov	r1, r5
 80037a0:	4632      	mov	r2, r6
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0154      	lsls	r4, r2, #5
 80037ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037b0:	014b      	lsls	r3, r1, #5
 80037b2:	4619      	mov	r1, r3
 80037b4:	4622      	mov	r2, r4
 80037b6:	1b49      	subs	r1, r1, r5
 80037b8:	eb62 0206 	sbc.w	r2, r2, r6
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	0194      	lsls	r4, r2, #6
 80037c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	1a5b      	subs	r3, r3, r1
 80037ce:	eb64 0402 	sbc.w	r4, r4, r2
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	00e2      	lsls	r2, r4, #3
 80037dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037e0:	00d9      	lsls	r1, r3, #3
 80037e2:	460b      	mov	r3, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	195b      	adds	r3, r3, r5
 80037e8:	eb44 0406 	adc.w	r4, r4, r6
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	02a2      	lsls	r2, r4, #10
 80037f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037fa:	0299      	lsls	r1, r3, #10
 80037fc:	460b      	mov	r3, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	4618      	mov	r0, r3
 8003802:	4621      	mov	r1, r4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	461a      	mov	r2, r3
 800380c:	4623      	mov	r3, r4
 800380e:	f7fd f9ab 	bl	8000b68 <__aeabi_uldivmod>
 8003812:	4603      	mov	r3, r0
 8003814:	460c      	mov	r4, r1
 8003816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	60bb      	str	r3, [r7, #8]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003836:	60bb      	str	r3, [r7, #8]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	68bb      	ldr	r3, [r7, #8]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4601      	mov	r1, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4a03      	ldr	r2, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5cd3      	ldrb	r3, [r2, r3]
 8003880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	08006618 	.word	0x08006618

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4601      	mov	r1, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08006618 	.word	0x08006618

080038b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e01d      	b.n	8003906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe f8f8 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 f8e4 	bl	8003ac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b06      	cmp	r3, #6
 800392e:	d007      	beq.n	8003940 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_ConfigClockSource+0x18>
 800396a:	2302      	movs	r3, #2
 800396c:	e0a6      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x166>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800398c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003994:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d067      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x120>
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d80b      	bhi.n	80039c2 <HAL_TIM_ConfigClockSource+0x6c>
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d073      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x140>
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d802      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x62>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06f      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039b6:	e078      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d06c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x140>
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d06a      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039c0:	e073      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039c2:	2b70      	cmp	r3, #112	; 0x70
 80039c4:	d00d      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x8c>
 80039c6:	2b70      	cmp	r3, #112	; 0x70
 80039c8:	d804      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x7e>
 80039ca:	2b50      	cmp	r3, #80	; 0x50
 80039cc:	d033      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0xe0>
 80039ce:	2b60      	cmp	r3, #96	; 0x60
 80039d0:	d041      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80039d2:	e06a      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d8:	d066      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0x152>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d017      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80039e0:	e063      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f000 f981 	bl	8003cf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
      break;
 8003a0e:	e04c      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f000 f96a 	bl	8003cf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a32:	609a      	str	r2, [r3, #8]
      break;
 8003a34:	e039      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 f8de 	bl	8003c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2150      	movs	r1, #80	; 0x50
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f937 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e029      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 f8fd 	bl	8003c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f927 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e019      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 f8be 	bl	8003c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f917 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 8003a94:	e009      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 f90e 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e000      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003aa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a40      	ldr	r2, [pc, #256]	; (8003bd8 <TIM_Base_SetConfig+0x114>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d00f      	beq.n	8003b04 <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3d      	ldr	r2, [pc, #244]	; (8003bdc <TIM_Base_SetConfig+0x118>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a3c      	ldr	r2, [pc, #240]	; (8003be0 <TIM_Base_SetConfig+0x11c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	; (8003be4 <TIM_Base_SetConfig+0x120>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3a      	ldr	r2, [pc, #232]	; (8003be8 <TIM_Base_SetConfig+0x124>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <TIM_Base_SetConfig+0x114>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02b      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d027      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <TIM_Base_SetConfig+0x118>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d023      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <TIM_Base_SetConfig+0x11c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <TIM_Base_SetConfig+0x120>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01b      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <TIM_Base_SetConfig+0x124>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d017      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <TIM_Base_SetConfig+0x128>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <TIM_Base_SetConfig+0x12c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00f      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <TIM_Base_SetConfig+0x130>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <TIM_Base_SetConfig+0x134>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <TIM_Base_SetConfig+0x138>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <TIM_Base_SetConfig+0x13c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <TIM_Base_SetConfig+0x114>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_Base_SetConfig+0xf8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <TIM_Base_SetConfig+0x124>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d103      	bne.n	8003bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	615a      	str	r2, [r3, #20]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40000c00 	.word	0x40000c00
 8003be8:	40010400 	.word	0x40010400
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800
 8003bf8:	40001800 	.word	0x40001800
 8003bfc:	40001c00 	.word	0x40001c00
 8003c00:	40002000 	.word	0x40002000

08003c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f023 0201 	bic.w	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 030a 	bic.w	r3, r3, #10
 8003c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0210 	bic.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f043 0307 	orr.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	021a      	lsls	r2, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e05a      	b.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d022      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d01d      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d018      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00e      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d10c      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	40010400 	.word	0x40010400
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40001800 	.word	0x40001800

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e03f      	b.n	8003ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd feb2 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f829 	bl	8003ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f0e:	f023 030c 	bic.w	r3, r3, #12
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	f040 818b 	bne.w	8004254 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4ac1      	ldr	r2, [pc, #772]	; (8004248 <UART_SetConfig+0x37c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d005      	beq.n	8003f54 <UART_SetConfig+0x88>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4abf      	ldr	r2, [pc, #764]	; (800424c <UART_SetConfig+0x380>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f040 80bd 	bne.w	80040ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff fc9c 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8003f58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	f04f 0600 	mov.w	r6, #0
 8003f62:	46a8      	mov	r8, r5
 8003f64:	46b1      	mov	r9, r6
 8003f66:	eb18 0308 	adds.w	r3, r8, r8
 8003f6a:	eb49 0409 	adc.w	r4, r9, r9
 8003f6e:	4698      	mov	r8, r3
 8003f70:	46a1      	mov	r9, r4
 8003f72:	eb18 0805 	adds.w	r8, r8, r5
 8003f76:	eb49 0906 	adc.w	r9, r9, r6
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f8e:	4688      	mov	r8, r1
 8003f90:	4691      	mov	r9, r2
 8003f92:	eb18 0005 	adds.w	r0, r8, r5
 8003f96:	eb49 0106 	adc.w	r1, r9, r6
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	f04f 0600 	mov.w	r6, #0
 8003fa4:	196b      	adds	r3, r5, r5
 8003fa6:	eb46 0406 	adc.w	r4, r6, r6
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	f7fc fddb 	bl	8000b68 <__aeabi_uldivmod>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4ba5      	ldr	r3, [pc, #660]	; (8004250 <UART_SetConfig+0x384>)
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	f04f 0600 	mov.w	r6, #0
 8003fcc:	46a9      	mov	r9, r5
 8003fce:	46b2      	mov	sl, r6
 8003fd0:	eb19 0309 	adds.w	r3, r9, r9
 8003fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd8:	4699      	mov	r9, r3
 8003fda:	46a2      	mov	sl, r4
 8003fdc:	eb19 0905 	adds.w	r9, r9, r5
 8003fe0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fe4:	f04f 0100 	mov.w	r1, #0
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff8:	4689      	mov	r9, r1
 8003ffa:	4692      	mov	sl, r2
 8003ffc:	eb19 0005 	adds.w	r0, r9, r5
 8004000:	eb4a 0106 	adc.w	r1, sl, r6
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	461d      	mov	r5, r3
 800400a:	f04f 0600 	mov.w	r6, #0
 800400e:	196b      	adds	r3, r5, r5
 8004010:	eb46 0406 	adc.w	r4, r6, r6
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	f7fc fda6 	bl	8000b68 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	461a      	mov	r2, r3
 8004022:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <UART_SetConfig+0x384>)
 8004024:	fba3 1302 	umull	r1, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	2164      	movs	r1, #100	; 0x64
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3332      	adds	r3, #50	; 0x32
 8004036:	4a86      	ldr	r2, [pc, #536]	; (8004250 <UART_SetConfig+0x384>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004044:	4498      	add	r8, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	461d      	mov	r5, r3
 800404a:	f04f 0600 	mov.w	r6, #0
 800404e:	46a9      	mov	r9, r5
 8004050:	46b2      	mov	sl, r6
 8004052:	eb19 0309 	adds.w	r3, r9, r9
 8004056:	eb4a 040a 	adc.w	r4, sl, sl
 800405a:	4699      	mov	r9, r3
 800405c:	46a2      	mov	sl, r4
 800405e:	eb19 0905 	adds.w	r9, r9, r5
 8004062:	eb4a 0a06 	adc.w	sl, sl, r6
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004072:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004076:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800407a:	4689      	mov	r9, r1
 800407c:	4692      	mov	sl, r2
 800407e:	eb19 0005 	adds.w	r0, r9, r5
 8004082:	eb4a 0106 	adc.w	r1, sl, r6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	461d      	mov	r5, r3
 800408c:	f04f 0600 	mov.w	r6, #0
 8004090:	196b      	adds	r3, r5, r5
 8004092:	eb46 0406 	adc.w	r4, r6, r6
 8004096:	461a      	mov	r2, r3
 8004098:	4623      	mov	r3, r4
 800409a:	f7fc fd65 	bl	8000b68 <__aeabi_uldivmod>
 800409e:	4603      	mov	r3, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <UART_SetConfig+0x384>)
 80040a6:	fba3 1302 	umull	r1, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2164      	movs	r1, #100	; 0x64
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a65      	ldr	r2, [pc, #404]	; (8004250 <UART_SetConfig+0x384>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 0207 	and.w	r2, r3, #7
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4442      	add	r2, r8
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	e26f      	b.n	80045ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ce:	f7ff fbcb 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 80040d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	461d      	mov	r5, r3
 80040d8:	f04f 0600 	mov.w	r6, #0
 80040dc:	46a8      	mov	r8, r5
 80040de:	46b1      	mov	r9, r6
 80040e0:	eb18 0308 	adds.w	r3, r8, r8
 80040e4:	eb49 0409 	adc.w	r4, r9, r9
 80040e8:	4698      	mov	r8, r3
 80040ea:	46a1      	mov	r9, r4
 80040ec:	eb18 0805 	adds.w	r8, r8, r5
 80040f0:	eb49 0906 	adc.w	r9, r9, r6
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004100:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004104:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004108:	4688      	mov	r8, r1
 800410a:	4691      	mov	r9, r2
 800410c:	eb18 0005 	adds.w	r0, r8, r5
 8004110:	eb49 0106 	adc.w	r1, r9, r6
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	461d      	mov	r5, r3
 800411a:	f04f 0600 	mov.w	r6, #0
 800411e:	196b      	adds	r3, r5, r5
 8004120:	eb46 0406 	adc.w	r4, r6, r6
 8004124:	461a      	mov	r2, r3
 8004126:	4623      	mov	r3, r4
 8004128:	f7fc fd1e 	bl	8000b68 <__aeabi_uldivmod>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	461a      	mov	r2, r3
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <UART_SetConfig+0x384>)
 8004134:	fba3 2302 	umull	r2, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	46a9      	mov	r9, r5
 8004148:	46b2      	mov	sl, r6
 800414a:	eb19 0309 	adds.w	r3, r9, r9
 800414e:	eb4a 040a 	adc.w	r4, sl, sl
 8004152:	4699      	mov	r9, r3
 8004154:	46a2      	mov	sl, r4
 8004156:	eb19 0905 	adds.w	r9, r9, r5
 800415a:	eb4a 0a06 	adc.w	sl, sl, r6
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800416e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004172:	4689      	mov	r9, r1
 8004174:	4692      	mov	sl, r2
 8004176:	eb19 0005 	adds.w	r0, r9, r5
 800417a:	eb4a 0106 	adc.w	r1, sl, r6
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	461d      	mov	r5, r3
 8004184:	f04f 0600 	mov.w	r6, #0
 8004188:	196b      	adds	r3, r5, r5
 800418a:	eb46 0406 	adc.w	r4, r6, r6
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	f7fc fce9 	bl	8000b68 <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <UART_SetConfig+0x384>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <UART_SetConfig+0x384>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041be:	4498      	add	r8, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	461d      	mov	r5, r3
 80041c4:	f04f 0600 	mov.w	r6, #0
 80041c8:	46a9      	mov	r9, r5
 80041ca:	46b2      	mov	sl, r6
 80041cc:	eb19 0309 	adds.w	r3, r9, r9
 80041d0:	eb4a 040a 	adc.w	r4, sl, sl
 80041d4:	4699      	mov	r9, r3
 80041d6:	46a2      	mov	sl, r4
 80041d8:	eb19 0905 	adds.w	r9, r9, r5
 80041dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041f4:	4689      	mov	r9, r1
 80041f6:	4692      	mov	sl, r2
 80041f8:	eb19 0005 	adds.w	r0, r9, r5
 80041fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	461d      	mov	r5, r3
 8004206:	f04f 0600 	mov.w	r6, #0
 800420a:	196b      	adds	r3, r5, r5
 800420c:	eb46 0406 	adc.w	r4, r6, r6
 8004210:	461a      	mov	r2, r3
 8004212:	4623      	mov	r3, r4
 8004214:	f7fc fca8 	bl	8000b68 <__aeabi_uldivmod>
 8004218:	4603      	mov	r3, r0
 800421a:	460c      	mov	r4, r1
 800421c:	461a      	mov	r2, r3
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <UART_SetConfig+0x384>)
 8004220:	fba3 1302 	umull	r1, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	3332      	adds	r3, #50	; 0x32
 8004232:	4a07      	ldr	r2, [pc, #28]	; (8004250 <UART_SetConfig+0x384>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 0207 	and.w	r2, r3, #7
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4442      	add	r2, r8
 8004244:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004246:	e1b2      	b.n	80045ae <UART_SetConfig+0x6e2>
 8004248:	40011000 	.word	0x40011000
 800424c:	40011400 	.word	0x40011400
 8004250:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4ad7      	ldr	r2, [pc, #860]	; (80045b8 <UART_SetConfig+0x6ec>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d005      	beq.n	800426a <UART_SetConfig+0x39e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4ad6      	ldr	r2, [pc, #856]	; (80045bc <UART_SetConfig+0x6f0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	f040 80d1 	bne.w	800440c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800426a:	f7ff fb11 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 800426e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	469a      	mov	sl, r3
 8004274:	f04f 0b00 	mov.w	fp, #0
 8004278:	46d0      	mov	r8, sl
 800427a:	46d9      	mov	r9, fp
 800427c:	eb18 0308 	adds.w	r3, r8, r8
 8004280:	eb49 0409 	adc.w	r4, r9, r9
 8004284:	4698      	mov	r8, r3
 8004286:	46a1      	mov	r9, r4
 8004288:	eb18 080a 	adds.w	r8, r8, sl
 800428c:	eb49 090b 	adc.w	r9, r9, fp
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800429c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042a4:	4688      	mov	r8, r1
 80042a6:	4691      	mov	r9, r2
 80042a8:	eb1a 0508 	adds.w	r5, sl, r8
 80042ac:	eb4b 0609 	adc.w	r6, fp, r9
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	0094      	lsls	r4, r2, #2
 80042c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042c8:	008b      	lsls	r3, r1, #2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	4628      	mov	r0, r5
 80042d0:	4631      	mov	r1, r6
 80042d2:	f7fc fc49 	bl	8000b68 <__aeabi_uldivmod>
 80042d6:	4603      	mov	r3, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	461a      	mov	r2, r3
 80042dc:	4bb8      	ldr	r3, [pc, #736]	; (80045c0 <UART_SetConfig+0x6f4>)
 80042de:	fba3 2302 	umull	r2, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	469b      	mov	fp, r3
 80042ec:	f04f 0c00 	mov.w	ip, #0
 80042f0:	46d9      	mov	r9, fp
 80042f2:	46e2      	mov	sl, ip
 80042f4:	eb19 0309 	adds.w	r3, r9, r9
 80042f8:	eb4a 040a 	adc.w	r4, sl, sl
 80042fc:	4699      	mov	r9, r3
 80042fe:	46a2      	mov	sl, r4
 8004300:	eb19 090b 	adds.w	r9, r9, fp
 8004304:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004314:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004318:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800431c:	4689      	mov	r9, r1
 800431e:	4692      	mov	sl, r2
 8004320:	eb1b 0509 	adds.w	r5, fp, r9
 8004324:	eb4c 060a 	adc.w	r6, ip, sl
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	0094      	lsls	r4, r2, #2
 800433c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004340:	008b      	lsls	r3, r1, #2
 8004342:	461a      	mov	r2, r3
 8004344:	4623      	mov	r3, r4
 8004346:	4628      	mov	r0, r5
 8004348:	4631      	mov	r1, r6
 800434a:	f7fc fc0d 	bl	8000b68 <__aeabi_uldivmod>
 800434e:	4603      	mov	r3, r0
 8004350:	460c      	mov	r4, r1
 8004352:	461a      	mov	r2, r3
 8004354:	4b9a      	ldr	r3, [pc, #616]	; (80045c0 <UART_SetConfig+0x6f4>)
 8004356:	fba3 1302 	umull	r1, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	; 0x32
 8004368:	4a95      	ldr	r2, [pc, #596]	; (80045c0 <UART_SetConfig+0x6f4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004374:	4498      	add	r8, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	469b      	mov	fp, r3
 800437a:	f04f 0c00 	mov.w	ip, #0
 800437e:	46d9      	mov	r9, fp
 8004380:	46e2      	mov	sl, ip
 8004382:	eb19 0309 	adds.w	r3, r9, r9
 8004386:	eb4a 040a 	adc.w	r4, sl, sl
 800438a:	4699      	mov	r9, r3
 800438c:	46a2      	mov	sl, r4
 800438e:	eb19 090b 	adds.w	r9, r9, fp
 8004392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043aa:	4689      	mov	r9, r1
 80043ac:	4692      	mov	sl, r2
 80043ae:	eb1b 0509 	adds.w	r5, fp, r9
 80043b2:	eb4c 060a 	adc.w	r6, ip, sl
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4619      	mov	r1, r3
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	0094      	lsls	r4, r2, #2
 80043ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ce:	008b      	lsls	r3, r1, #2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	4631      	mov	r1, r6
 80043d8:	f7fc fbc6 	bl	8000b68 <__aeabi_uldivmod>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b77      	ldr	r3, [pc, #476]	; (80045c0 <UART_SetConfig+0x6f4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a72      	ldr	r2, [pc, #456]	; (80045c0 <UART_SetConfig+0x6f4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4442      	add	r2, r8
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	e0d0      	b.n	80045ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff fa2c 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8004410:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	469a      	mov	sl, r3
 8004416:	f04f 0b00 	mov.w	fp, #0
 800441a:	46d0      	mov	r8, sl
 800441c:	46d9      	mov	r9, fp
 800441e:	eb18 0308 	adds.w	r3, r8, r8
 8004422:	eb49 0409 	adc.w	r4, r9, r9
 8004426:	4698      	mov	r8, r3
 8004428:	46a1      	mov	r9, r4
 800442a:	eb18 080a 	adds.w	r8, r8, sl
 800442e:	eb49 090b 	adc.w	r9, r9, fp
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800443e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004442:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004446:	4688      	mov	r8, r1
 8004448:	4691      	mov	r9, r2
 800444a:	eb1a 0508 	adds.w	r5, sl, r8
 800444e:	eb4b 0609 	adc.w	r6, fp, r9
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4619      	mov	r1, r3
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	0094      	lsls	r4, r2, #2
 8004466:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800446a:	008b      	lsls	r3, r1, #2
 800446c:	461a      	mov	r2, r3
 800446e:	4623      	mov	r3, r4
 8004470:	4628      	mov	r0, r5
 8004472:	4631      	mov	r1, r6
 8004474:	f7fc fb78 	bl	8000b68 <__aeabi_uldivmod>
 8004478:	4603      	mov	r3, r0
 800447a:	460c      	mov	r4, r1
 800447c:	461a      	mov	r2, r3
 800447e:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <UART_SetConfig+0x6f4>)
 8004480:	fba3 2302 	umull	r2, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	469b      	mov	fp, r3
 800448e:	f04f 0c00 	mov.w	ip, #0
 8004492:	46d9      	mov	r9, fp
 8004494:	46e2      	mov	sl, ip
 8004496:	eb19 0309 	adds.w	r3, r9, r9
 800449a:	eb4a 040a 	adc.w	r4, sl, sl
 800449e:	4699      	mov	r9, r3
 80044a0:	46a2      	mov	sl, r4
 80044a2:	eb19 090b 	adds.w	r9, r9, fp
 80044a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044be:	4689      	mov	r9, r1
 80044c0:	4692      	mov	sl, r2
 80044c2:	eb1b 0509 	adds.w	r5, fp, r9
 80044c6:	eb4c 060a 	adc.w	r6, ip, sl
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	f04f 0400 	mov.w	r4, #0
 80044dc:	0094      	lsls	r4, r2, #2
 80044de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e2:	008b      	lsls	r3, r1, #2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	4628      	mov	r0, r5
 80044ea:	4631      	mov	r1, r6
 80044ec:	f7fc fb3c 	bl	8000b68 <__aeabi_uldivmod>
 80044f0:	4603      	mov	r3, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <UART_SetConfig+0x6f4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	3332      	adds	r3, #50	; 0x32
 800450a:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <UART_SetConfig+0x6f4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004516:	4498      	add	r8, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	469b      	mov	fp, r3
 800451c:	f04f 0c00 	mov.w	ip, #0
 8004520:	46d9      	mov	r9, fp
 8004522:	46e2      	mov	sl, ip
 8004524:	eb19 0309 	adds.w	r3, r9, r9
 8004528:	eb4a 040a 	adc.w	r4, sl, sl
 800452c:	4699      	mov	r9, r3
 800452e:	46a2      	mov	sl, r4
 8004530:	eb19 090b 	adds.w	r9, r9, fp
 8004534:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004538:	f04f 0100 	mov.w	r1, #0
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800454c:	4689      	mov	r9, r1
 800454e:	4692      	mov	sl, r2
 8004550:	eb1b 0509 	adds.w	r5, fp, r9
 8004554:	eb4c 060a 	adc.w	r6, ip, sl
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	0094      	lsls	r4, r2, #2
 800456c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	461a      	mov	r2, r3
 8004574:	4623      	mov	r3, r4
 8004576:	4628      	mov	r0, r5
 8004578:	4631      	mov	r1, r6
 800457a:	f7fc faf5 	bl	8000b68 <__aeabi_uldivmod>
 800457e:	4603      	mov	r3, r0
 8004580:	460c      	mov	r4, r1
 8004582:	461a      	mov	r2, r3
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <UART_SetConfig+0x6f4>)
 8004586:	fba3 1302 	umull	r1, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2164      	movs	r1, #100	; 0x64
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	3332      	adds	r3, #50	; 0x32
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <UART_SetConfig+0x6f4>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4442      	add	r2, r8
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	e7ff      	b.n	80045ae <UART_SetConfig+0x6e2>
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b8:	40011000 	.word	0x40011000
 80045bc:	40011400 	.word	0x40011400
 80045c0:	51eb851f 	.word	0x51eb851f

080045c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c4:	b084      	sub	sp, #16
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	f107 001c 	add.w	r0, r7, #28
 80045d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d122      	bne.n	8004622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa5c 	bl	8004ad4 <USB_CoreReset>
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e01a      	b.n	8004658 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa50 	bl	8004ad4 <USB_CoreReset>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
 800464a:	e005      	b.n	8004658 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10b      	bne.n	8004676 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f043 0206 	orr.w	r2, r3, #6
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004682:	b004      	add	sp, #16
 8004684:	4770      	bx	lr

08004686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d106      	bne.n	80046d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e00b      	b.n	80046ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e001      	b.n	80046ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e003      	b.n	80046f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046ec:	2032      	movs	r0, #50	; 0x32
 80046ee:	f7fd fc2b 	bl	8001f48 <HAL_Delay>

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046fc:	b084      	sub	sp, #16
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800470a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e009      	b.n	8004730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b0e      	cmp	r3, #14
 8004734:	d9f2      	bls.n	800471c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d112      	bne.n	8004762 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
 8004760:	e00b      	b.n	800477a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004780:	461a      	mov	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	4619      	mov	r1, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	461a      	mov	r2, r3
 8004796:	680b      	ldr	r3, [r1, #0]
 8004798:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10c      	bne.n	80047ba <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047a6:	2100      	movs	r1, #0
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f961 	bl	8004a70 <USB_SetDevSpeed>
 80047ae:	e008      	b.n	80047c2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047b0:	2101      	movs	r1, #1
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f95c 	bl	8004a70 <USB_SetDevSpeed>
 80047b8:	e003      	b.n	80047c2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ba:	2103      	movs	r1, #3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f957 	bl	8004a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047c2:	2110      	movs	r1, #16
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f90b 	bl	80049e0 <USB_FlushTxFifo>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f929 	bl	8004a2c <USB_FlushRxFifo>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	461a      	mov	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f6:	461a      	mov	r2, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e043      	b.n	8004896 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004824:	d118      	bne.n	8004858 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	461a      	mov	r2, r3
 800483a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e013      	b.n	800486a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	461a      	mov	r2, r3
 8004850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e008      	b.n	800486a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	461a      	mov	r2, r3
 8004878:	2300      	movs	r3, #0
 800487a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	461a      	mov	r2, r3
 800488a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800488e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3301      	adds	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	d3b7      	bcc.n	800480e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e043      	b.n	800492c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ba:	d118      	bne.n	80048ee <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e013      	b.n	8004900 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	461a      	mov	r2, r3
 80048e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e008      	b.n	8004900 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	2300      	movs	r3, #0
 8004910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	461a      	mov	r2, r3
 8004920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3301      	adds	r3, #1
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3b7      	bcc.n	80048a4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004946:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b01      	cmp	r3, #1
 800494c:	d111      	bne.n	8004972 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <USB_DevInit+0x2dc>)
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	f043 0303 	orr.w	r3, r3, #3
 8004970:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800497e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	4b11      	ldr	r3, [pc, #68]	; (80049dc <USB_DevInit+0x2e0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f043 0208 	orr.w	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d107      	bne.n	80049c6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049be:	f043 0304 	orr.w	r3, r3, #4
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d2:	b004      	add	sp, #16
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	00800100 	.word	0x00800100
 80049dc:	803c3800 	.word	0x803c3800

080049e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <USB_FlushTxFifo+0x48>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d0f0      	beq.n	80049fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	00030d40 	.word	0x00030d40

08004a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <USB_FlushRxFifo+0x40>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d0f0      	beq.n	8004a3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	00030d40 	.word	0x00030d40

08004a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ac2:	2003      	movs	r0, #3
 8004ac4:	f7fd fa40 	bl	8001f48 <HAL_Delay>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <USB_CoreReset+0x64>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e01b      	b.n	8004b2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	daf2      	bge.n	8004ae0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <USB_CoreReset+0x64>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e006      	b.n	8004b2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d0f0      	beq.n	8004b0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	00030d40 	.word	0x00030d40

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000000c 	.word	0x2000000c

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4e0d      	ldr	r6, [pc, #52]	; (8004b80 <__libc_init_array+0x38>)
 8004b4c:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b4e:	1ba4      	subs	r4, r4, r6
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	2500      	movs	r5, #0
 8004b54:	42a5      	cmp	r5, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	4e0b      	ldr	r6, [pc, #44]	; (8004b88 <__libc_init_array+0x40>)
 8004b5a:	4c0c      	ldr	r4, [pc, #48]	; (8004b8c <__libc_init_array+0x44>)
 8004b5c:	f001 fd46 	bl	80065ec <_init>
 8004b60:	1ba4      	subs	r4, r4, r6
 8004b62:	10a4      	asrs	r4, r4, #2
 8004b64:	2500      	movs	r5, #0
 8004b66:	42a5      	cmp	r5, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b70:	4798      	blx	r3
 8004b72:	3501      	adds	r5, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7a:	4798      	blx	r3
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08006850 	.word	0x08006850
 8004b84:	08006850 	.word	0x08006850
 8004b88:	08006850 	.word	0x08006850
 8004b8c:	08006854 	.word	0x08006854

08004b90 <memset>:
 8004b90:	4402      	add	r2, r0
 8004b92:	4603      	mov	r3, r0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d100      	bne.n	8004b9a <memset+0xa>
 8004b98:	4770      	bx	lr
 8004b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9e:	e7f9      	b.n	8004b94 <memset+0x4>

08004ba0 <__cvt>:
 8004ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	ec55 4b10 	vmov	r4, r5, d0
 8004ba8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004baa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	460e      	mov	r6, r1
 8004bb2:	4691      	mov	r9, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4622      	movlt	r2, r4
 8004bba:	462b      	mov	r3, r5
 8004bbc:	f027 0720 	bic.w	r7, r7, #32
 8004bc0:	bfbb      	ittet	lt
 8004bc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bc6:	461d      	movlt	r5, r3
 8004bc8:	2300      	movge	r3, #0
 8004bca:	232d      	movlt	r3, #45	; 0x2d
 8004bcc:	bfb8      	it	lt
 8004bce:	4614      	movlt	r4, r2
 8004bd0:	2f46      	cmp	r7, #70	; 0x46
 8004bd2:	700b      	strb	r3, [r1, #0]
 8004bd4:	d004      	beq.n	8004be0 <__cvt+0x40>
 8004bd6:	2f45      	cmp	r7, #69	; 0x45
 8004bd8:	d100      	bne.n	8004bdc <__cvt+0x3c>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	2102      	movs	r1, #2
 8004bde:	e000      	b.n	8004be2 <__cvt+0x42>
 8004be0:	2103      	movs	r1, #3
 8004be2:	ab03      	add	r3, sp, #12
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	ab02      	add	r3, sp, #8
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4632      	mov	r2, r6
 8004bec:	4653      	mov	r3, sl
 8004bee:	ec45 4b10 	vmov	d0, r4, r5
 8004bf2:	f000 fbad 	bl	8005350 <_dtoa_r>
 8004bf6:	2f47      	cmp	r7, #71	; 0x47
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	d102      	bne.n	8004c02 <__cvt+0x62>
 8004bfc:	f019 0f01 	tst.w	r9, #1
 8004c00:	d026      	beq.n	8004c50 <__cvt+0xb0>
 8004c02:	2f46      	cmp	r7, #70	; 0x46
 8004c04:	eb08 0906 	add.w	r9, r8, r6
 8004c08:	d111      	bne.n	8004c2e <__cvt+0x8e>
 8004c0a:	f898 3000 	ldrb.w	r3, [r8]
 8004c0e:	2b30      	cmp	r3, #48	; 0x30
 8004c10:	d10a      	bne.n	8004c28 <__cvt+0x88>
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb ff15 	bl	8000a48 <__aeabi_dcmpeq>
 8004c1e:	b918      	cbnz	r0, 8004c28 <__cvt+0x88>
 8004c20:	f1c6 0601 	rsb	r6, r6, #1
 8004c24:	f8ca 6000 	str.w	r6, [sl]
 8004c28:	f8da 3000 	ldr.w	r3, [sl]
 8004c2c:	4499      	add	r9, r3
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2300      	movs	r3, #0
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7fb ff07 	bl	8000a48 <__aeabi_dcmpeq>
 8004c3a:	b938      	cbnz	r0, 8004c4c <__cvt+0xac>
 8004c3c:	2230      	movs	r2, #48	; 0x30
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	454b      	cmp	r3, r9
 8004c42:	d205      	bcs.n	8004c50 <__cvt+0xb0>
 8004c44:	1c59      	adds	r1, r3, #1
 8004c46:	9103      	str	r1, [sp, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e7f8      	b.n	8004c3e <__cvt+0x9e>
 8004c4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c50:	9b03      	ldr	r3, [sp, #12]
 8004c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c54:	eba3 0308 	sub.w	r3, r3, r8
 8004c58:	4640      	mov	r0, r8
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	b004      	add	sp, #16
 8004c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c62 <__exponent>:
 8004c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c64:	2900      	cmp	r1, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	bfba      	itte	lt
 8004c6a:	4249      	neglt	r1, r1
 8004c6c:	232d      	movlt	r3, #45	; 0x2d
 8004c6e:	232b      	movge	r3, #43	; 0x2b
 8004c70:	2909      	cmp	r1, #9
 8004c72:	f804 2b02 	strb.w	r2, [r4], #2
 8004c76:	7043      	strb	r3, [r0, #1]
 8004c78:	dd20      	ble.n	8004cbc <__exponent+0x5a>
 8004c7a:	f10d 0307 	add.w	r3, sp, #7
 8004c7e:	461f      	mov	r7, r3
 8004c80:	260a      	movs	r6, #10
 8004c82:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c86:	fb06 1115 	mls	r1, r6, r5, r1
 8004c8a:	3130      	adds	r1, #48	; 0x30
 8004c8c:	2d09      	cmp	r5, #9
 8004c8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c92:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c96:	4629      	mov	r1, r5
 8004c98:	dc09      	bgt.n	8004cae <__exponent+0x4c>
 8004c9a:	3130      	adds	r1, #48	; 0x30
 8004c9c:	3b02      	subs	r3, #2
 8004c9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ca2:	42bb      	cmp	r3, r7
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	d304      	bcc.n	8004cb2 <__exponent+0x50>
 8004ca8:	1a10      	subs	r0, r2, r0
 8004caa:	b003      	add	sp, #12
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	4613      	mov	r3, r2
 8004cb0:	e7e7      	b.n	8004c82 <__exponent+0x20>
 8004cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb6:	f804 2b01 	strb.w	r2, [r4], #1
 8004cba:	e7f2      	b.n	8004ca2 <__exponent+0x40>
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	4419      	add	r1, r3
 8004cc0:	7083      	strb	r3, [r0, #2]
 8004cc2:	1d02      	adds	r2, r0, #4
 8004cc4:	70c1      	strb	r1, [r0, #3]
 8004cc6:	e7ef      	b.n	8004ca8 <__exponent+0x46>

08004cc8 <_printf_float>:
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	b08d      	sub	sp, #52	; 0x34
 8004cce:	460c      	mov	r4, r1
 8004cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004cd4:	4616      	mov	r6, r2
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	4605      	mov	r5, r0
 8004cda:	f001 f8f1 	bl	8005ec0 <_localeconv_r>
 8004cde:	6803      	ldr	r3, [r0, #0]
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fa84 	bl	80001f0 <strlen>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	930a      	str	r3, [sp, #40]	; 0x28
 8004cec:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf0:	9005      	str	r0, [sp, #20]
 8004cf2:	3307      	adds	r3, #7
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	f103 0208 	add.w	r2, r3, #8
 8004cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d00:	f8d4 b000 	ldr.w	fp, [r4]
 8004d04:	f8c8 2000 	str.w	r2, [r8]
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d18:	9307      	str	r3, [sp, #28]
 8004d1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d22:	4ba7      	ldr	r3, [pc, #668]	; (8004fc0 <_printf_float+0x2f8>)
 8004d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d28:	f7fb fec0 	bl	8000aac <__aeabi_dcmpun>
 8004d2c:	bb70      	cbnz	r0, 8004d8c <_printf_float+0xc4>
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d32:	4ba3      	ldr	r3, [pc, #652]	; (8004fc0 <_printf_float+0x2f8>)
 8004d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d38:	f7fb fe9a 	bl	8000a70 <__aeabi_dcmple>
 8004d3c:	bb30      	cbnz	r0, 8004d8c <_printf_float+0xc4>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2300      	movs	r3, #0
 8004d42:	4640      	mov	r0, r8
 8004d44:	4649      	mov	r1, r9
 8004d46:	f7fb fe89 	bl	8000a5c <__aeabi_dcmplt>
 8004d4a:	b110      	cbz	r0, 8004d52 <_printf_float+0x8a>
 8004d4c:	232d      	movs	r3, #45	; 0x2d
 8004d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d52:	4a9c      	ldr	r2, [pc, #624]	; (8004fc4 <_printf_float+0x2fc>)
 8004d54:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <_printf_float+0x300>)
 8004d56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d5a:	bf8c      	ite	hi
 8004d5c:	4690      	movhi	r8, r2
 8004d5e:	4698      	movls	r8, r3
 8004d60:	2303      	movs	r3, #3
 8004d62:	f02b 0204 	bic.w	r2, fp, #4
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	f04f 0900 	mov.w	r9, #0
 8004d6e:	9700      	str	r7, [sp, #0]
 8004d70:	4633      	mov	r3, r6
 8004d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f9e6 	bl	8005148 <_printf_common>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f040 808d 	bne.w	8004e9c <_printf_float+0x1d4>
 8004d82:	f04f 30ff 	mov.w	r0, #4294967295
 8004d86:	b00d      	add	sp, #52	; 0x34
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb fe8a 	bl	8000aac <__aeabi_dcmpun>
 8004d98:	b110      	cbz	r0, 8004da0 <_printf_float+0xd8>
 8004d9a:	4a8c      	ldr	r2, [pc, #560]	; (8004fcc <_printf_float+0x304>)
 8004d9c:	4b8c      	ldr	r3, [pc, #560]	; (8004fd0 <_printf_float+0x308>)
 8004d9e:	e7da      	b.n	8004d56 <_printf_float+0x8e>
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	1c4b      	adds	r3, r1, #1
 8004da4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004da8:	a80a      	add	r0, sp, #40	; 0x28
 8004daa:	d13e      	bne.n	8004e2a <_printf_float+0x162>
 8004dac:	2306      	movs	r3, #6
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	2300      	movs	r3, #0
 8004db2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004db6:	ab09      	add	r3, sp, #36	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	ec49 8b10 	vmov	d0, r8, r9
 8004dbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dc2:	6022      	str	r2, [r4, #0]
 8004dc4:	f8cd a004 	str.w	sl, [sp, #4]
 8004dc8:	6861      	ldr	r1, [r4, #4]
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7ff fee8 	bl	8004ba0 <__cvt>
 8004dd0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004dd4:	2b47      	cmp	r3, #71	; 0x47
 8004dd6:	4680      	mov	r8, r0
 8004dd8:	d109      	bne.n	8004dee <_printf_float+0x126>
 8004dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ddc:	1cd8      	adds	r0, r3, #3
 8004dde:	db02      	blt.n	8004de6 <_printf_float+0x11e>
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	dd47      	ble.n	8004e76 <_printf_float+0x1ae>
 8004de6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dea:	fa5f fa8a 	uxtb.w	sl, sl
 8004dee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004df4:	d824      	bhi.n	8004e40 <_printf_float+0x178>
 8004df6:	3901      	subs	r1, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dfe:	9109      	str	r1, [sp, #36]	; 0x24
 8004e00:	f7ff ff2f 	bl	8004c62 <__exponent>
 8004e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e06:	1813      	adds	r3, r2, r0
 8004e08:	2a01      	cmp	r2, #1
 8004e0a:	4681      	mov	r9, r0
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	dc02      	bgt.n	8004e16 <_printf_float+0x14e>
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	07d1      	lsls	r1, r2, #31
 8004e14:	d501      	bpl.n	8004e1a <_printf_float+0x152>
 8004e16:	3301      	adds	r3, #1
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0a5      	beq.n	8004d6e <_printf_float+0xa6>
 8004e22:	232d      	movs	r3, #45	; 0x2d
 8004e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e28:	e7a1      	b.n	8004d6e <_printf_float+0xa6>
 8004e2a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e2e:	f000 8177 	beq.w	8005120 <_printf_float+0x458>
 8004e32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e36:	d1bb      	bne.n	8004db0 <_printf_float+0xe8>
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d1b9      	bne.n	8004db0 <_printf_float+0xe8>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e7b6      	b.n	8004dae <_printf_float+0xe6>
 8004e40:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e44:	d119      	bne.n	8004e7a <_printf_float+0x1b2>
 8004e46:	2900      	cmp	r1, #0
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	dd0c      	ble.n	8004e66 <_printf_float+0x19e>
 8004e4c:	6121      	str	r1, [r4, #16]
 8004e4e:	b913      	cbnz	r3, 8004e56 <_printf_float+0x18e>
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	07d2      	lsls	r2, r2, #31
 8004e54:	d502      	bpl.n	8004e5c <_printf_float+0x194>
 8004e56:	3301      	adds	r3, #1
 8004e58:	440b      	add	r3, r1
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e60:	f04f 0900 	mov.w	r9, #0
 8004e64:	e7d9      	b.n	8004e1a <_printf_float+0x152>
 8004e66:	b913      	cbnz	r3, 8004e6e <_printf_float+0x1a6>
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	07d0      	lsls	r0, r2, #31
 8004e6c:	d501      	bpl.n	8004e72 <_printf_float+0x1aa>
 8004e6e:	3302      	adds	r3, #2
 8004e70:	e7f3      	b.n	8004e5a <_printf_float+0x192>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7f1      	b.n	8004e5a <_printf_float+0x192>
 8004e76:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	db05      	blt.n	8004e8e <_printf_float+0x1c6>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	07d1      	lsls	r1, r2, #31
 8004e88:	d5e8      	bpl.n	8004e5c <_printf_float+0x194>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	e7e5      	b.n	8004e5a <_printf_float+0x192>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfd4      	ite	le
 8004e92:	f1c3 0302 	rsble	r3, r3, #2
 8004e96:	2301      	movgt	r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	e7de      	b.n	8004e5a <_printf_float+0x192>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	055a      	lsls	r2, r3, #21
 8004ea0:	d407      	bmi.n	8004eb2 <_printf_float+0x1ea>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	d12b      	bne.n	8004f08 <_printf_float+0x240>
 8004eb0:	e767      	b.n	8004d82 <_printf_float+0xba>
 8004eb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004eb6:	f240 80dc 	bls.w	8005072 <_printf_float+0x3aa>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec2:	f7fb fdc1 	bl	8000a48 <__aeabi_dcmpeq>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d033      	beq.n	8004f32 <_printf_float+0x26a>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4a41      	ldr	r2, [pc, #260]	; (8004fd4 <_printf_float+0x30c>)
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	f43f af54 	beq.w	8004d82 <_printf_float+0xba>
 8004eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	db02      	blt.n	8004ee8 <_printf_float+0x220>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	07d8      	lsls	r0, r3, #31
 8004ee6:	d50f      	bpl.n	8004f08 <_printf_float+0x240>
 8004ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af45 	beq.w	8004d82 <_printf_float+0xba>
 8004ef8:	f04f 0800 	mov.w	r8, #0
 8004efc:	f104 091a 	add.w	r9, r4, #26
 8004f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	4543      	cmp	r3, r8
 8004f06:	dc09      	bgt.n	8004f1c <_printf_float+0x254>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	f100 8103 	bmi.w	8005116 <_printf_float+0x44e>
 8004f10:	68e0      	ldr	r0, [r4, #12]
 8004f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f14:	4298      	cmp	r0, r3
 8004f16:	bfb8      	it	lt
 8004f18:	4618      	movlt	r0, r3
 8004f1a:	e734      	b.n	8004d86 <_printf_float+0xbe>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	464a      	mov	r2, r9
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f af2b 	beq.w	8004d82 <_printf_float+0xba>
 8004f2c:	f108 0801 	add.w	r8, r8, #1
 8004f30:	e7e6      	b.n	8004f00 <_printf_float+0x238>
 8004f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dc2b      	bgt.n	8004f90 <_printf_float+0x2c8>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <_printf_float+0x30c>)
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f af1d 	beq.w	8004d82 <_printf_float+0xba>
 8004f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4a:	b923      	cbnz	r3, 8004f56 <_printf_float+0x28e>
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4e:	b913      	cbnz	r3, 8004f56 <_printf_float+0x28e>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	d5d8      	bpl.n	8004f08 <_printf_float+0x240>
 8004f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f af0e 	beq.w	8004d82 <_printf_float+0xba>
 8004f66:	f04f 0900 	mov.w	r9, #0
 8004f6a:	f104 0a1a 	add.w	sl, r4, #26
 8004f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f70:	425b      	negs	r3, r3
 8004f72:	454b      	cmp	r3, r9
 8004f74:	dc01      	bgt.n	8004f7a <_printf_float+0x2b2>
 8004f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f78:	e794      	b.n	8004ea4 <_printf_float+0x1dc>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f aefc 	beq.w	8004d82 <_printf_float+0xba>
 8004f8a:	f109 0901 	add.w	r9, r9, #1
 8004f8e:	e7ee      	b.n	8004f6e <_printf_float+0x2a6>
 8004f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f94:	429a      	cmp	r2, r3
 8004f96:	bfa8      	it	ge
 8004f98:	461a      	movge	r2, r3
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	dd07      	ble.n	8004fb0 <_printf_float+0x2e8>
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	47b8      	blx	r7
 8004faa:	3001      	adds	r0, #1
 8004fac:	f43f aee9 	beq.w	8004d82 <_printf_float+0xba>
 8004fb0:	f104 031a 	add.w	r3, r4, #26
 8004fb4:	f04f 0b00 	mov.w	fp, #0
 8004fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fbc:	9306      	str	r3, [sp, #24]
 8004fbe:	e015      	b.n	8004fec <_printf_float+0x324>
 8004fc0:	7fefffff 	.word	0x7fefffff
 8004fc4:	08006624 	.word	0x08006624
 8004fc8:	08006620 	.word	0x08006620
 8004fcc:	0800662c 	.word	0x0800662c
 8004fd0:	08006628 	.word	0x08006628
 8004fd4:	08006630 	.word	0x08006630
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9a06      	ldr	r2, [sp, #24]
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f aecd 	beq.w	8004d82 <_printf_float+0xba>
 8004fe8:	f10b 0b01 	add.w	fp, fp, #1
 8004fec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ff0:	ebaa 0309 	sub.w	r3, sl, r9
 8004ff4:	455b      	cmp	r3, fp
 8004ff6:	dcef      	bgt.n	8004fd8 <_printf_float+0x310>
 8004ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	44d0      	add	r8, sl
 8005000:	db15      	blt.n	800502e <_printf_float+0x366>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	d412      	bmi.n	800502e <_printf_float+0x366>
 8005008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800500c:	eba3 020a 	sub.w	r2, r3, sl
 8005010:	eba3 0a01 	sub.w	sl, r3, r1
 8005014:	4592      	cmp	sl, r2
 8005016:	bfa8      	it	ge
 8005018:	4692      	movge	sl, r2
 800501a:	f1ba 0f00 	cmp.w	sl, #0
 800501e:	dc0e      	bgt.n	800503e <_printf_float+0x376>
 8005020:	f04f 0800 	mov.w	r8, #0
 8005024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005028:	f104 091a 	add.w	r9, r4, #26
 800502c:	e019      	b.n	8005062 <_printf_float+0x39a>
 800502e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005032:	4631      	mov	r1, r6
 8005034:	4628      	mov	r0, r5
 8005036:	47b8      	blx	r7
 8005038:	3001      	adds	r0, #1
 800503a:	d1e5      	bne.n	8005008 <_printf_float+0x340>
 800503c:	e6a1      	b.n	8004d82 <_printf_float+0xba>
 800503e:	4653      	mov	r3, sl
 8005040:	4642      	mov	r2, r8
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	d1e9      	bne.n	8005020 <_printf_float+0x358>
 800504c:	e699      	b.n	8004d82 <_printf_float+0xba>
 800504e:	2301      	movs	r3, #1
 8005050:	464a      	mov	r2, r9
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	f43f ae92 	beq.w	8004d82 <_printf_float+0xba>
 800505e:	f108 0801 	add.w	r8, r8, #1
 8005062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	eba3 030a 	sub.w	r3, r3, sl
 800506c:	4543      	cmp	r3, r8
 800506e:	dcee      	bgt.n	800504e <_printf_float+0x386>
 8005070:	e74a      	b.n	8004f08 <_printf_float+0x240>
 8005072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005074:	2a01      	cmp	r2, #1
 8005076:	dc01      	bgt.n	800507c <_printf_float+0x3b4>
 8005078:	07db      	lsls	r3, r3, #31
 800507a:	d53a      	bpl.n	80050f2 <_printf_float+0x42a>
 800507c:	2301      	movs	r3, #1
 800507e:	4642      	mov	r2, r8
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f ae7b 	beq.w	8004d82 <_printf_float+0xba>
 800508c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005090:	4631      	mov	r1, r6
 8005092:	4628      	mov	r0, r5
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	f108 0801 	add.w	r8, r8, #1
 800509c:	f43f ae71 	beq.w	8004d82 <_printf_float+0xba>
 80050a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a2:	2200      	movs	r2, #0
 80050a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80050a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050ac:	2300      	movs	r3, #0
 80050ae:	f7fb fccb 	bl	8000a48 <__aeabi_dcmpeq>
 80050b2:	b9c8      	cbnz	r0, 80050e8 <_printf_float+0x420>
 80050b4:	4653      	mov	r3, sl
 80050b6:	4642      	mov	r2, r8
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	d10e      	bne.n	80050e0 <_printf_float+0x418>
 80050c2:	e65e      	b.n	8004d82 <_printf_float+0xba>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4652      	mov	r2, sl
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f ae57 	beq.w	8004d82 <_printf_float+0xba>
 80050d4:	f108 0801 	add.w	r8, r8, #1
 80050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050da:	3b01      	subs	r3, #1
 80050dc:	4543      	cmp	r3, r8
 80050de:	dcf1      	bgt.n	80050c4 <_printf_float+0x3fc>
 80050e0:	464b      	mov	r3, r9
 80050e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050e6:	e6de      	b.n	8004ea6 <_printf_float+0x1de>
 80050e8:	f04f 0800 	mov.w	r8, #0
 80050ec:	f104 0a1a 	add.w	sl, r4, #26
 80050f0:	e7f2      	b.n	80050d8 <_printf_float+0x410>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e7df      	b.n	80050b6 <_printf_float+0x3ee>
 80050f6:	2301      	movs	r3, #1
 80050f8:	464a      	mov	r2, r9
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae3e 	beq.w	8004d82 <_printf_float+0xba>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	4543      	cmp	r3, r8
 8005112:	dcf0      	bgt.n	80050f6 <_printf_float+0x42e>
 8005114:	e6fc      	b.n	8004f10 <_printf_float+0x248>
 8005116:	f04f 0800 	mov.w	r8, #0
 800511a:	f104 0919 	add.w	r9, r4, #25
 800511e:	e7f4      	b.n	800510a <_printf_float+0x442>
 8005120:	2900      	cmp	r1, #0
 8005122:	f43f ae8b 	beq.w	8004e3c <_printf_float+0x174>
 8005126:	2300      	movs	r3, #0
 8005128:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800512c:	ab09      	add	r3, sp, #36	; 0x24
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	ec49 8b10 	vmov	d0, r8, r9
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	f8cd a004 	str.w	sl, [sp, #4]
 800513a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800513e:	4628      	mov	r0, r5
 8005140:	f7ff fd2e 	bl	8004ba0 <__cvt>
 8005144:	4680      	mov	r8, r0
 8005146:	e648      	b.n	8004dda <_printf_float+0x112>

08005148 <_printf_common>:
 8005148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	4691      	mov	r9, r2
 800514e:	461f      	mov	r7, r3
 8005150:	688a      	ldr	r2, [r1, #8]
 8005152:	690b      	ldr	r3, [r1, #16]
 8005154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005158:	4293      	cmp	r3, r2
 800515a:	bfb8      	it	lt
 800515c:	4613      	movlt	r3, r2
 800515e:	f8c9 3000 	str.w	r3, [r9]
 8005162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005166:	4606      	mov	r6, r0
 8005168:	460c      	mov	r4, r1
 800516a:	b112      	cbz	r2, 8005172 <_printf_common+0x2a>
 800516c:	3301      	adds	r3, #1
 800516e:	f8c9 3000 	str.w	r3, [r9]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0699      	lsls	r1, r3, #26
 8005176:	bf42      	ittt	mi
 8005178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800517c:	3302      	addmi	r3, #2
 800517e:	f8c9 3000 	strmi.w	r3, [r9]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d107      	bne.n	800519a <_printf_common+0x52>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	f8d9 2000 	ldr.w	r2, [r9]
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	42ab      	cmp	r3, r5
 8005198:	dc28      	bgt.n	80051ec <_printf_common+0xa4>
 800519a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	3300      	adds	r3, #0
 80051a2:	bf18      	it	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	0692      	lsls	r2, r2, #26
 80051a8:	d42d      	bmi.n	8005206 <_printf_common+0xbe>
 80051aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d020      	beq.n	80051fa <_printf_common+0xb2>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	68e5      	ldr	r5, [r4, #12]
 80051bc:	f8d9 2000 	ldr.w	r2, [r9]
 80051c0:	f003 0306 	and.w	r3, r3, #6
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	bf08      	it	eq
 80051c8:	1aad      	subeq	r5, r5, r2
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	6922      	ldr	r2, [r4, #16]
 80051ce:	bf0c      	ite	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	2500      	movne	r5, #0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfc4      	itt	gt
 80051da:	1a9b      	subgt	r3, r3, r2
 80051dc:	18ed      	addgt	r5, r5, r3
 80051de:	f04f 0900 	mov.w	r9, #0
 80051e2:	341a      	adds	r4, #26
 80051e4:	454d      	cmp	r5, r9
 80051e6:	d11a      	bne.n	800521e <_printf_common+0xd6>
 80051e8:	2000      	movs	r0, #0
 80051ea:	e008      	b.n	80051fe <_printf_common+0xb6>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4652      	mov	r2, sl
 80051f0:	4639      	mov	r1, r7
 80051f2:	4630      	mov	r0, r6
 80051f4:	47c0      	blx	r8
 80051f6:	3001      	adds	r0, #1
 80051f8:	d103      	bne.n	8005202 <_printf_common+0xba>
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005202:	3501      	adds	r5, #1
 8005204:	e7c3      	b.n	800518e <_printf_common+0x46>
 8005206:	18e1      	adds	r1, r4, r3
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	2030      	movs	r0, #48	; 0x30
 800520c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005210:	4422      	add	r2, r4
 8005212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005216:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800521a:	3302      	adds	r3, #2
 800521c:	e7c5      	b.n	80051aa <_printf_common+0x62>
 800521e:	2301      	movs	r3, #1
 8005220:	4622      	mov	r2, r4
 8005222:	4639      	mov	r1, r7
 8005224:	4630      	mov	r0, r6
 8005226:	47c0      	blx	r8
 8005228:	3001      	adds	r0, #1
 800522a:	d0e6      	beq.n	80051fa <_printf_common+0xb2>
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e7d8      	b.n	80051e4 <_printf_common+0x9c>

08005232 <quorem>:
 8005232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	6903      	ldr	r3, [r0, #16]
 8005238:	690c      	ldr	r4, [r1, #16]
 800523a:	42a3      	cmp	r3, r4
 800523c:	4680      	mov	r8, r0
 800523e:	f2c0 8082 	blt.w	8005346 <quorem+0x114>
 8005242:	3c01      	subs	r4, #1
 8005244:	f101 0714 	add.w	r7, r1, #20
 8005248:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800524c:	f100 0614 	add.w	r6, r0, #20
 8005250:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005254:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005258:	eb06 030c 	add.w	r3, r6, ip
 800525c:	3501      	adds	r5, #1
 800525e:	eb07 090c 	add.w	r9, r7, ip
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	fbb0 f5f5 	udiv	r5, r0, r5
 8005268:	b395      	cbz	r5, 80052d0 <quorem+0x9e>
 800526a:	f04f 0a00 	mov.w	sl, #0
 800526e:	4638      	mov	r0, r7
 8005270:	46b6      	mov	lr, r6
 8005272:	46d3      	mov	fp, sl
 8005274:	f850 2b04 	ldr.w	r2, [r0], #4
 8005278:	b293      	uxth	r3, r2
 800527a:	fb05 a303 	mla	r3, r5, r3, sl
 800527e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005282:	b29b      	uxth	r3, r3
 8005284:	ebab 0303 	sub.w	r3, fp, r3
 8005288:	0c12      	lsrs	r2, r2, #16
 800528a:	f8de b000 	ldr.w	fp, [lr]
 800528e:	fb05 a202 	mla	r2, r5, r2, sl
 8005292:	fa13 f38b 	uxtah	r3, r3, fp
 8005296:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800529a:	fa1f fb82 	uxth.w	fp, r2
 800529e:	f8de 2000 	ldr.w	r2, [lr]
 80052a2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052b0:	4581      	cmp	r9, r0
 80052b2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052b6:	f84e 3b04 	str.w	r3, [lr], #4
 80052ba:	d2db      	bcs.n	8005274 <quorem+0x42>
 80052bc:	f856 300c 	ldr.w	r3, [r6, ip]
 80052c0:	b933      	cbnz	r3, 80052d0 <quorem+0x9e>
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	429e      	cmp	r6, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	d330      	bcc.n	800532e <quorem+0xfc>
 80052cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80052d0:	4640      	mov	r0, r8
 80052d2:	f001 f82b 	bl	800632c <__mcmp>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	db25      	blt.n	8005326 <quorem+0xf4>
 80052da:	3501      	adds	r5, #1
 80052dc:	4630      	mov	r0, r6
 80052de:	f04f 0c00 	mov.w	ip, #0
 80052e2:	f857 2b04 	ldr.w	r2, [r7], #4
 80052e6:	f8d0 e000 	ldr.w	lr, [r0]
 80052ea:	b293      	uxth	r3, r2
 80052ec:	ebac 0303 	sub.w	r3, ip, r3
 80052f0:	0c12      	lsrs	r2, r2, #16
 80052f2:	fa13 f38e 	uxtah	r3, r3, lr
 80052f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005304:	45b9      	cmp	r9, r7
 8005306:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800530a:	f840 3b04 	str.w	r3, [r0], #4
 800530e:	d2e8      	bcs.n	80052e2 <quorem+0xb0>
 8005310:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005314:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005318:	b92a      	cbnz	r2, 8005326 <quorem+0xf4>
 800531a:	3b04      	subs	r3, #4
 800531c:	429e      	cmp	r6, r3
 800531e:	461a      	mov	r2, r3
 8005320:	d30b      	bcc.n	800533a <quorem+0x108>
 8005322:	f8c8 4010 	str.w	r4, [r8, #16]
 8005326:	4628      	mov	r0, r5
 8005328:	b003      	add	sp, #12
 800532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	3b04      	subs	r3, #4
 8005332:	2a00      	cmp	r2, #0
 8005334:	d1ca      	bne.n	80052cc <quorem+0x9a>
 8005336:	3c01      	subs	r4, #1
 8005338:	e7c5      	b.n	80052c6 <quorem+0x94>
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	3b04      	subs	r3, #4
 800533e:	2a00      	cmp	r2, #0
 8005340:	d1ef      	bne.n	8005322 <quorem+0xf0>
 8005342:	3c01      	subs	r4, #1
 8005344:	e7ea      	b.n	800531c <quorem+0xea>
 8005346:	2000      	movs	r0, #0
 8005348:	e7ee      	b.n	8005328 <quorem+0xf6>
 800534a:	0000      	movs	r0, r0
 800534c:	0000      	movs	r0, r0
	...

08005350 <_dtoa_r>:
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	ec57 6b10 	vmov	r6, r7, d0
 8005358:	b097      	sub	sp, #92	; 0x5c
 800535a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800535c:	9106      	str	r1, [sp, #24]
 800535e:	4604      	mov	r4, r0
 8005360:	920b      	str	r2, [sp, #44]	; 0x2c
 8005362:	9312      	str	r3, [sp, #72]	; 0x48
 8005364:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005368:	e9cd 6700 	strd	r6, r7, [sp]
 800536c:	b93d      	cbnz	r5, 800537e <_dtoa_r+0x2e>
 800536e:	2010      	movs	r0, #16
 8005370:	f000 fdb4 	bl	8005edc <malloc>
 8005374:	6260      	str	r0, [r4, #36]	; 0x24
 8005376:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800537a:	6005      	str	r5, [r0, #0]
 800537c:	60c5      	str	r5, [r0, #12]
 800537e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005380:	6819      	ldr	r1, [r3, #0]
 8005382:	b151      	cbz	r1, 800539a <_dtoa_r+0x4a>
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	604a      	str	r2, [r1, #4]
 8005388:	2301      	movs	r3, #1
 800538a:	4093      	lsls	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
 800538e:	4620      	mov	r0, r4
 8005390:	f000 fdeb 	bl	8005f6a <_Bfree>
 8005394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	1e3b      	subs	r3, r7, #0
 800539c:	bfbb      	ittet	lt
 800539e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053a2:	9301      	strlt	r3, [sp, #4]
 80053a4:	2300      	movge	r3, #0
 80053a6:	2201      	movlt	r2, #1
 80053a8:	bfac      	ite	ge
 80053aa:	f8c8 3000 	strge.w	r3, [r8]
 80053ae:	f8c8 2000 	strlt.w	r2, [r8]
 80053b2:	4baf      	ldr	r3, [pc, #700]	; (8005670 <_dtoa_r+0x320>)
 80053b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80053b8:	ea33 0308 	bics.w	r3, r3, r8
 80053bc:	d114      	bne.n	80053e8 <_dtoa_r+0x98>
 80053be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	b923      	cbnz	r3, 80053d4 <_dtoa_r+0x84>
 80053ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f000 8542 	beq.w	8005e58 <_dtoa_r+0xb08>
 80053d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005684 <_dtoa_r+0x334>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8544 	beq.w	8005e68 <_dtoa_r+0xb18>
 80053e0:	f10b 0303 	add.w	r3, fp, #3
 80053e4:	f000 bd3e 	b.w	8005e64 <_dtoa_r+0xb14>
 80053e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2300      	movs	r3, #0
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fb fb28 	bl	8000a48 <__aeabi_dcmpeq>
 80053f8:	4681      	mov	r9, r0
 80053fa:	b168      	cbz	r0, 8005418 <_dtoa_r+0xc8>
 80053fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053fe:	2301      	movs	r3, #1
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8524 	beq.w	8005e52 <_dtoa_r+0xb02>
 800540a:	4b9a      	ldr	r3, [pc, #616]	; (8005674 <_dtoa_r+0x324>)
 800540c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800540e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	f000 bd28 	b.w	8005e68 <_dtoa_r+0xb18>
 8005418:	aa14      	add	r2, sp, #80	; 0x50
 800541a:	a915      	add	r1, sp, #84	; 0x54
 800541c:	ec47 6b10 	vmov	d0, r6, r7
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fffa 	bl	800641a <__d2b>
 8005426:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800542a:	9004      	str	r0, [sp, #16]
 800542c:	2d00      	cmp	r5, #0
 800542e:	d07c      	beq.n	800552a <_dtoa_r+0x1da>
 8005430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005434:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005438:	46b2      	mov	sl, r6
 800543a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800543e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005442:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005446:	2200      	movs	r2, #0
 8005448:	4b8b      	ldr	r3, [pc, #556]	; (8005678 <_dtoa_r+0x328>)
 800544a:	4650      	mov	r0, sl
 800544c:	4659      	mov	r1, fp
 800544e:	f7fa fedb 	bl	8000208 <__aeabi_dsub>
 8005452:	a381      	add	r3, pc, #516	; (adr r3, 8005658 <_dtoa_r+0x308>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f7fb f88e 	bl	8000578 <__aeabi_dmul>
 800545c:	a380      	add	r3, pc, #512	; (adr r3, 8005660 <_dtoa_r+0x310>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa fed3 	bl	800020c <__adddf3>
 8005466:	4606      	mov	r6, r0
 8005468:	4628      	mov	r0, r5
 800546a:	460f      	mov	r7, r1
 800546c:	f7fb f81a 	bl	80004a4 <__aeabi_i2d>
 8005470:	a37d      	add	r3, pc, #500	; (adr r3, 8005668 <_dtoa_r+0x318>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fb f87f 	bl	8000578 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fa fec3 	bl	800020c <__adddf3>
 8005486:	4606      	mov	r6, r0
 8005488:	460f      	mov	r7, r1
 800548a:	f7fb fb25 	bl	8000ad8 <__aeabi_d2iz>
 800548e:	2200      	movs	r2, #0
 8005490:	4682      	mov	sl, r0
 8005492:	2300      	movs	r3, #0
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f7fb fae0 	bl	8000a5c <__aeabi_dcmplt>
 800549c:	b148      	cbz	r0, 80054b2 <_dtoa_r+0x162>
 800549e:	4650      	mov	r0, sl
 80054a0:	f7fb f800 	bl	80004a4 <__aeabi_i2d>
 80054a4:	4632      	mov	r2, r6
 80054a6:	463b      	mov	r3, r7
 80054a8:	f7fb face 	bl	8000a48 <__aeabi_dcmpeq>
 80054ac:	b908      	cbnz	r0, 80054b2 <_dtoa_r+0x162>
 80054ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054b2:	f1ba 0f16 	cmp.w	sl, #22
 80054b6:	d859      	bhi.n	800556c <_dtoa_r+0x21c>
 80054b8:	4970      	ldr	r1, [pc, #448]	; (800567c <_dtoa_r+0x32c>)
 80054ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054c6:	f7fb fae7 	bl	8000a98 <__aeabi_dcmpgt>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d050      	beq.n	8005570 <_dtoa_r+0x220>
 80054ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d2:	2300      	movs	r3, #0
 80054d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054d8:	1b5d      	subs	r5, r3, r5
 80054da:	f1b5 0801 	subs.w	r8, r5, #1
 80054de:	bf49      	itett	mi
 80054e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80054e4:	2300      	movpl	r3, #0
 80054e6:	9305      	strmi	r3, [sp, #20]
 80054e8:	f04f 0800 	movmi.w	r8, #0
 80054ec:	bf58      	it	pl
 80054ee:	9305      	strpl	r3, [sp, #20]
 80054f0:	f1ba 0f00 	cmp.w	sl, #0
 80054f4:	db3e      	blt.n	8005574 <_dtoa_r+0x224>
 80054f6:	2300      	movs	r3, #0
 80054f8:	44d0      	add	r8, sl
 80054fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80054fe:	9307      	str	r3, [sp, #28]
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	2b09      	cmp	r3, #9
 8005504:	f200 8090 	bhi.w	8005628 <_dtoa_r+0x2d8>
 8005508:	2b05      	cmp	r3, #5
 800550a:	bfc4      	itt	gt
 800550c:	3b04      	subgt	r3, #4
 800550e:	9306      	strgt	r3, [sp, #24]
 8005510:	9b06      	ldr	r3, [sp, #24]
 8005512:	f1a3 0302 	sub.w	r3, r3, #2
 8005516:	bfcc      	ite	gt
 8005518:	2500      	movgt	r5, #0
 800551a:	2501      	movle	r5, #1
 800551c:	2b03      	cmp	r3, #3
 800551e:	f200 808f 	bhi.w	8005640 <_dtoa_r+0x2f0>
 8005522:	e8df f003 	tbb	[pc, r3]
 8005526:	7f7d      	.short	0x7f7d
 8005528:	7131      	.short	0x7131
 800552a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800552e:	441d      	add	r5, r3
 8005530:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005534:	2820      	cmp	r0, #32
 8005536:	dd13      	ble.n	8005560 <_dtoa_r+0x210>
 8005538:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800553c:	9b00      	ldr	r3, [sp, #0]
 800553e:	fa08 f800 	lsl.w	r8, r8, r0
 8005542:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005546:	fa23 f000 	lsr.w	r0, r3, r0
 800554a:	ea48 0000 	orr.w	r0, r8, r0
 800554e:	f7fa ff99 	bl	8000484 <__aeabi_ui2d>
 8005552:	2301      	movs	r3, #1
 8005554:	4682      	mov	sl, r0
 8005556:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800555a:	3d01      	subs	r5, #1
 800555c:	9313      	str	r3, [sp, #76]	; 0x4c
 800555e:	e772      	b.n	8005446 <_dtoa_r+0xf6>
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	f1c0 0020 	rsb	r0, r0, #32
 8005566:	fa03 f000 	lsl.w	r0, r3, r0
 800556a:	e7f0      	b.n	800554e <_dtoa_r+0x1fe>
 800556c:	2301      	movs	r3, #1
 800556e:	e7b1      	b.n	80054d4 <_dtoa_r+0x184>
 8005570:	900f      	str	r0, [sp, #60]	; 0x3c
 8005572:	e7b0      	b.n	80054d6 <_dtoa_r+0x186>
 8005574:	9b05      	ldr	r3, [sp, #20]
 8005576:	eba3 030a 	sub.w	r3, r3, sl
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	f1ca 0300 	rsb	r3, sl, #0
 8005580:	9307      	str	r3, [sp, #28]
 8005582:	2300      	movs	r3, #0
 8005584:	930e      	str	r3, [sp, #56]	; 0x38
 8005586:	e7bb      	b.n	8005500 <_dtoa_r+0x1b0>
 8005588:	2301      	movs	r3, #1
 800558a:	930a      	str	r3, [sp, #40]	; 0x28
 800558c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	dd59      	ble.n	8005646 <_dtoa_r+0x2f6>
 8005592:	9302      	str	r3, [sp, #8]
 8005594:	4699      	mov	r9, r3
 8005596:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005598:	2200      	movs	r2, #0
 800559a:	6072      	str	r2, [r6, #4]
 800559c:	2204      	movs	r2, #4
 800559e:	f102 0014 	add.w	r0, r2, #20
 80055a2:	4298      	cmp	r0, r3
 80055a4:	6871      	ldr	r1, [r6, #4]
 80055a6:	d953      	bls.n	8005650 <_dtoa_r+0x300>
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fcaa 	bl	8005f02 <_Balloc>
 80055ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	f1b9 0f0e 	cmp.w	r9, #14
 80055b6:	f8d3 b000 	ldr.w	fp, [r3]
 80055ba:	f200 80e6 	bhi.w	800578a <_dtoa_r+0x43a>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	f000 80e3 	beq.w	800578a <_dtoa_r+0x43a>
 80055c4:	ed9d 7b00 	vldr	d7, [sp]
 80055c8:	f1ba 0f00 	cmp.w	sl, #0
 80055cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80055d0:	dd74      	ble.n	80056bc <_dtoa_r+0x36c>
 80055d2:	4a2a      	ldr	r2, [pc, #168]	; (800567c <_dtoa_r+0x32c>)
 80055d4:	f00a 030f 	and.w	r3, sl, #15
 80055d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055dc:	ed93 7b00 	vldr	d7, [r3]
 80055e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055e4:	06f0      	lsls	r0, r6, #27
 80055e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055ea:	d565      	bpl.n	80056b8 <_dtoa_r+0x368>
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <_dtoa_r+0x330>)
 80055ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055f6:	f7fb f8e9 	bl	80007cc <__aeabi_ddiv>
 80055fa:	e9cd 0100 	strd	r0, r1, [sp]
 80055fe:	f006 060f 	and.w	r6, r6, #15
 8005602:	2503      	movs	r5, #3
 8005604:	4f1e      	ldr	r7, [pc, #120]	; (8005680 <_dtoa_r+0x330>)
 8005606:	e04c      	b.n	80056a2 <_dtoa_r+0x352>
 8005608:	2301      	movs	r3, #1
 800560a:	930a      	str	r3, [sp, #40]	; 0x28
 800560c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560e:	4453      	add	r3, sl
 8005610:	f103 0901 	add.w	r9, r3, #1
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	464b      	mov	r3, r9
 8005618:	2b01      	cmp	r3, #1
 800561a:	bfb8      	it	lt
 800561c:	2301      	movlt	r3, #1
 800561e:	e7ba      	b.n	8005596 <_dtoa_r+0x246>
 8005620:	2300      	movs	r3, #0
 8005622:	e7b2      	b.n	800558a <_dtoa_r+0x23a>
 8005624:	2300      	movs	r3, #0
 8005626:	e7f0      	b.n	800560a <_dtoa_r+0x2ba>
 8005628:	2501      	movs	r5, #1
 800562a:	2300      	movs	r3, #0
 800562c:	9306      	str	r3, [sp, #24]
 800562e:	950a      	str	r5, [sp, #40]	; 0x28
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	4699      	mov	r9, r3
 8005638:	2200      	movs	r2, #0
 800563a:	2312      	movs	r3, #18
 800563c:	920b      	str	r2, [sp, #44]	; 0x2c
 800563e:	e7aa      	b.n	8005596 <_dtoa_r+0x246>
 8005640:	2301      	movs	r3, #1
 8005642:	930a      	str	r3, [sp, #40]	; 0x28
 8005644:	e7f4      	b.n	8005630 <_dtoa_r+0x2e0>
 8005646:	2301      	movs	r3, #1
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	4699      	mov	r9, r3
 800564c:	461a      	mov	r2, r3
 800564e:	e7f5      	b.n	800563c <_dtoa_r+0x2ec>
 8005650:	3101      	adds	r1, #1
 8005652:	6071      	str	r1, [r6, #4]
 8005654:	0052      	lsls	r2, r2, #1
 8005656:	e7a2      	b.n	800559e <_dtoa_r+0x24e>
 8005658:	636f4361 	.word	0x636f4361
 800565c:	3fd287a7 	.word	0x3fd287a7
 8005660:	8b60c8b3 	.word	0x8b60c8b3
 8005664:	3fc68a28 	.word	0x3fc68a28
 8005668:	509f79fb 	.word	0x509f79fb
 800566c:	3fd34413 	.word	0x3fd34413
 8005670:	7ff00000 	.word	0x7ff00000
 8005674:	08006631 	.word	0x08006631
 8005678:	3ff80000 	.word	0x3ff80000
 800567c:	08006668 	.word	0x08006668
 8005680:	08006640 	.word	0x08006640
 8005684:	0800663b 	.word	0x0800663b
 8005688:	07f1      	lsls	r1, r6, #31
 800568a:	d508      	bpl.n	800569e <_dtoa_r+0x34e>
 800568c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	f7fa ff70 	bl	8000578 <__aeabi_dmul>
 8005698:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800569c:	3501      	adds	r5, #1
 800569e:	1076      	asrs	r6, r6, #1
 80056a0:	3708      	adds	r7, #8
 80056a2:	2e00      	cmp	r6, #0
 80056a4:	d1f0      	bne.n	8005688 <_dtoa_r+0x338>
 80056a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ae:	f7fb f88d 	bl	80007cc <__aeabi_ddiv>
 80056b2:	e9cd 0100 	strd	r0, r1, [sp]
 80056b6:	e01a      	b.n	80056ee <_dtoa_r+0x39e>
 80056b8:	2502      	movs	r5, #2
 80056ba:	e7a3      	b.n	8005604 <_dtoa_r+0x2b4>
 80056bc:	f000 80a0 	beq.w	8005800 <_dtoa_r+0x4b0>
 80056c0:	f1ca 0600 	rsb	r6, sl, #0
 80056c4:	4b9f      	ldr	r3, [pc, #636]	; (8005944 <_dtoa_r+0x5f4>)
 80056c6:	4fa0      	ldr	r7, [pc, #640]	; (8005948 <_dtoa_r+0x5f8>)
 80056c8:	f006 020f 	and.w	r2, r6, #15
 80056cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056d8:	f7fa ff4e 	bl	8000578 <__aeabi_dmul>
 80056dc:	e9cd 0100 	strd	r0, r1, [sp]
 80056e0:	1136      	asrs	r6, r6, #4
 80056e2:	2300      	movs	r3, #0
 80056e4:	2502      	movs	r5, #2
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d17f      	bne.n	80057ea <_dtoa_r+0x49a>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e1      	bne.n	80056b2 <_dtoa_r+0x362>
 80056ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8087 	beq.w	8005804 <_dtoa_r+0x4b4>
 80056f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b93      	ldr	r3, [pc, #588]	; (800594c <_dtoa_r+0x5fc>)
 80056fe:	4630      	mov	r0, r6
 8005700:	4639      	mov	r1, r7
 8005702:	f7fb f9ab 	bl	8000a5c <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	d07c      	beq.n	8005804 <_dtoa_r+0x4b4>
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	d079      	beq.n	8005804 <_dtoa_r+0x4b4>
 8005710:	9b02      	ldr	r3, [sp, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd35      	ble.n	8005782 <_dtoa_r+0x432>
 8005716:	f10a 33ff 	add.w	r3, sl, #4294967295
 800571a:	9308      	str	r3, [sp, #32]
 800571c:	4639      	mov	r1, r7
 800571e:	2200      	movs	r2, #0
 8005720:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <_dtoa_r+0x600>)
 8005722:	4630      	mov	r0, r6
 8005724:	f7fa ff28 	bl	8000578 <__aeabi_dmul>
 8005728:	e9cd 0100 	strd	r0, r1, [sp]
 800572c:	9f02      	ldr	r7, [sp, #8]
 800572e:	3501      	adds	r5, #1
 8005730:	4628      	mov	r0, r5
 8005732:	f7fa feb7 	bl	80004a4 <__aeabi_i2d>
 8005736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800573a:	f7fa ff1d 	bl	8000578 <__aeabi_dmul>
 800573e:	2200      	movs	r2, #0
 8005740:	4b84      	ldr	r3, [pc, #528]	; (8005954 <_dtoa_r+0x604>)
 8005742:	f7fa fd63 	bl	800020c <__adddf3>
 8005746:	4605      	mov	r5, r0
 8005748:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800574c:	2f00      	cmp	r7, #0
 800574e:	d15d      	bne.n	800580c <_dtoa_r+0x4bc>
 8005750:	2200      	movs	r2, #0
 8005752:	4b81      	ldr	r3, [pc, #516]	; (8005958 <_dtoa_r+0x608>)
 8005754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005758:	f7fa fd56 	bl	8000208 <__aeabi_dsub>
 800575c:	462a      	mov	r2, r5
 800575e:	4633      	mov	r3, r6
 8005760:	e9cd 0100 	strd	r0, r1, [sp]
 8005764:	f7fb f998 	bl	8000a98 <__aeabi_dcmpgt>
 8005768:	2800      	cmp	r0, #0
 800576a:	f040 8288 	bne.w	8005c7e <_dtoa_r+0x92e>
 800576e:	462a      	mov	r2, r5
 8005770:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005778:	f7fb f970 	bl	8000a5c <__aeabi_dcmplt>
 800577c:	2800      	cmp	r0, #0
 800577e:	f040 827c 	bne.w	8005c7a <_dtoa_r+0x92a>
 8005782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005786:	e9cd 2300 	strd	r2, r3, [sp]
 800578a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578c:	2b00      	cmp	r3, #0
 800578e:	f2c0 8150 	blt.w	8005a32 <_dtoa_r+0x6e2>
 8005792:	f1ba 0f0e 	cmp.w	sl, #14
 8005796:	f300 814c 	bgt.w	8005a32 <_dtoa_r+0x6e2>
 800579a:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <_dtoa_r+0x5f4>)
 800579c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057a0:	ed93 7b00 	vldr	d7, [r3]
 80057a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057ac:	f280 80d8 	bge.w	8005960 <_dtoa_r+0x610>
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	f300 80d4 	bgt.w	8005960 <_dtoa_r+0x610>
 80057b8:	f040 825e 	bne.w	8005c78 <_dtoa_r+0x928>
 80057bc:	2200      	movs	r2, #0
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <_dtoa_r+0x608>)
 80057c0:	ec51 0b17 	vmov	r0, r1, d7
 80057c4:	f7fa fed8 	bl	8000578 <__aeabi_dmul>
 80057c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057cc:	f7fb f95a 	bl	8000a84 <__aeabi_dcmpge>
 80057d0:	464f      	mov	r7, r9
 80057d2:	464e      	mov	r6, r9
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 8234 	bne.w	8005c42 <_dtoa_r+0x8f2>
 80057da:	2331      	movs	r3, #49	; 0x31
 80057dc:	f10b 0501 	add.w	r5, fp, #1
 80057e0:	f88b 3000 	strb.w	r3, [fp]
 80057e4:	f10a 0a01 	add.w	sl, sl, #1
 80057e8:	e22f      	b.n	8005c4a <_dtoa_r+0x8fa>
 80057ea:	07f2      	lsls	r2, r6, #31
 80057ec:	d505      	bpl.n	80057fa <_dtoa_r+0x4aa>
 80057ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f2:	f7fa fec1 	bl	8000578 <__aeabi_dmul>
 80057f6:	3501      	adds	r5, #1
 80057f8:	2301      	movs	r3, #1
 80057fa:	1076      	asrs	r6, r6, #1
 80057fc:	3708      	adds	r7, #8
 80057fe:	e772      	b.n	80056e6 <_dtoa_r+0x396>
 8005800:	2502      	movs	r5, #2
 8005802:	e774      	b.n	80056ee <_dtoa_r+0x39e>
 8005804:	f8cd a020 	str.w	sl, [sp, #32]
 8005808:	464f      	mov	r7, r9
 800580a:	e791      	b.n	8005730 <_dtoa_r+0x3e0>
 800580c:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <_dtoa_r+0x5f4>)
 800580e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005812:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d047      	beq.n	80058ac <_dtoa_r+0x55c>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	2000      	movs	r0, #0
 8005822:	494e      	ldr	r1, [pc, #312]	; (800595c <_dtoa_r+0x60c>)
 8005824:	f7fa ffd2 	bl	80007cc <__aeabi_ddiv>
 8005828:	462a      	mov	r2, r5
 800582a:	4633      	mov	r3, r6
 800582c:	f7fa fcec 	bl	8000208 <__aeabi_dsub>
 8005830:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005834:	465d      	mov	r5, fp
 8005836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800583a:	f7fb f94d 	bl	8000ad8 <__aeabi_d2iz>
 800583e:	4606      	mov	r6, r0
 8005840:	f7fa fe30 	bl	80004a4 <__aeabi_i2d>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584c:	f7fa fcdc 	bl	8000208 <__aeabi_dsub>
 8005850:	3630      	adds	r6, #48	; 0x30
 8005852:	f805 6b01 	strb.w	r6, [r5], #1
 8005856:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800585a:	e9cd 0100 	strd	r0, r1, [sp]
 800585e:	f7fb f8fd 	bl	8000a5c <__aeabi_dcmplt>
 8005862:	2800      	cmp	r0, #0
 8005864:	d163      	bne.n	800592e <_dtoa_r+0x5de>
 8005866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800586a:	2000      	movs	r0, #0
 800586c:	4937      	ldr	r1, [pc, #220]	; (800594c <_dtoa_r+0x5fc>)
 800586e:	f7fa fccb 	bl	8000208 <__aeabi_dsub>
 8005872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005876:	f7fb f8f1 	bl	8000a5c <__aeabi_dcmplt>
 800587a:	2800      	cmp	r0, #0
 800587c:	f040 80b7 	bne.w	80059ee <_dtoa_r+0x69e>
 8005880:	eba5 030b 	sub.w	r3, r5, fp
 8005884:	429f      	cmp	r7, r3
 8005886:	f77f af7c 	ble.w	8005782 <_dtoa_r+0x432>
 800588a:	2200      	movs	r2, #0
 800588c:	4b30      	ldr	r3, [pc, #192]	; (8005950 <_dtoa_r+0x600>)
 800588e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005892:	f7fa fe71 	bl	8000578 <__aeabi_dmul>
 8005896:	2200      	movs	r2, #0
 8005898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <_dtoa_r+0x600>)
 800589e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a2:	f7fa fe69 	bl	8000578 <__aeabi_dmul>
 80058a6:	e9cd 0100 	strd	r0, r1, [sp]
 80058aa:	e7c4      	b.n	8005836 <_dtoa_r+0x4e6>
 80058ac:	462a      	mov	r2, r5
 80058ae:	4633      	mov	r3, r6
 80058b0:	f7fa fe62 	bl	8000578 <__aeabi_dmul>
 80058b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058b8:	eb0b 0507 	add.w	r5, fp, r7
 80058bc:	465e      	mov	r6, fp
 80058be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058c2:	f7fb f909 	bl	8000ad8 <__aeabi_d2iz>
 80058c6:	4607      	mov	r7, r0
 80058c8:	f7fa fdec 	bl	80004a4 <__aeabi_i2d>
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d6:	f7fa fc97 	bl	8000208 <__aeabi_dsub>
 80058da:	f806 7b01 	strb.w	r7, [r6], #1
 80058de:	42ae      	cmp	r6, r5
 80058e0:	e9cd 0100 	strd	r0, r1, [sp]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	d126      	bne.n	8005938 <_dtoa_r+0x5e8>
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <_dtoa_r+0x60c>)
 80058ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058f0:	f7fa fc8c 	bl	800020c <__adddf3>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fc:	f7fb f8cc 	bl	8000a98 <__aeabi_dcmpgt>
 8005900:	2800      	cmp	r0, #0
 8005902:	d174      	bne.n	80059ee <_dtoa_r+0x69e>
 8005904:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005908:	2000      	movs	r0, #0
 800590a:	4914      	ldr	r1, [pc, #80]	; (800595c <_dtoa_r+0x60c>)
 800590c:	f7fa fc7c 	bl	8000208 <__aeabi_dsub>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005918:	f7fb f8a0 	bl	8000a5c <__aeabi_dcmplt>
 800591c:	2800      	cmp	r0, #0
 800591e:	f43f af30 	beq.w	8005782 <_dtoa_r+0x432>
 8005922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005926:	2b30      	cmp	r3, #48	; 0x30
 8005928:	f105 32ff 	add.w	r2, r5, #4294967295
 800592c:	d002      	beq.n	8005934 <_dtoa_r+0x5e4>
 800592e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005932:	e04a      	b.n	80059ca <_dtoa_r+0x67a>
 8005934:	4615      	mov	r5, r2
 8005936:	e7f4      	b.n	8005922 <_dtoa_r+0x5d2>
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <_dtoa_r+0x600>)
 800593a:	f7fa fe1d 	bl	8000578 <__aeabi_dmul>
 800593e:	e9cd 0100 	strd	r0, r1, [sp]
 8005942:	e7bc      	b.n	80058be <_dtoa_r+0x56e>
 8005944:	08006668 	.word	0x08006668
 8005948:	08006640 	.word	0x08006640
 800594c:	3ff00000 	.word	0x3ff00000
 8005950:	40240000 	.word	0x40240000
 8005954:	401c0000 	.word	0x401c0000
 8005958:	40140000 	.word	0x40140000
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005964:	465d      	mov	r5, fp
 8005966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa ff2d 	bl	80007cc <__aeabi_ddiv>
 8005972:	f7fb f8b1 	bl	8000ad8 <__aeabi_d2iz>
 8005976:	4680      	mov	r8, r0
 8005978:	f7fa fd94 	bl	80004a4 <__aeabi_i2d>
 800597c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005980:	f7fa fdfa 	bl	8000578 <__aeabi_dmul>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4630      	mov	r0, r6
 800598a:	4639      	mov	r1, r7
 800598c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005990:	f7fa fc3a 	bl	8000208 <__aeabi_dsub>
 8005994:	f805 6b01 	strb.w	r6, [r5], #1
 8005998:	eba5 060b 	sub.w	r6, r5, fp
 800599c:	45b1      	cmp	r9, r6
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	d139      	bne.n	8005a18 <_dtoa_r+0x6c8>
 80059a4:	f7fa fc32 	bl	800020c <__adddf3>
 80059a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	f7fb f872 	bl	8000a98 <__aeabi_dcmpgt>
 80059b4:	b9c8      	cbnz	r0, 80059ea <_dtoa_r+0x69a>
 80059b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ba:	4630      	mov	r0, r6
 80059bc:	4639      	mov	r1, r7
 80059be:	f7fb f843 	bl	8000a48 <__aeabi_dcmpeq>
 80059c2:	b110      	cbz	r0, 80059ca <_dtoa_r+0x67a>
 80059c4:	f018 0f01 	tst.w	r8, #1
 80059c8:	d10f      	bne.n	80059ea <_dtoa_r+0x69a>
 80059ca:	9904      	ldr	r1, [sp, #16]
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 facc 	bl	8005f6a <_Bfree>
 80059d2:	2300      	movs	r3, #0
 80059d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059d6:	702b      	strb	r3, [r5, #0]
 80059d8:	f10a 0301 	add.w	r3, sl, #1
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8241 	beq.w	8005e68 <_dtoa_r+0xb18>
 80059e6:	601d      	str	r5, [r3, #0]
 80059e8:	e23e      	b.n	8005e68 <_dtoa_r+0xb18>
 80059ea:	f8cd a020 	str.w	sl, [sp, #32]
 80059ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059f2:	2a39      	cmp	r2, #57	; 0x39
 80059f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80059f8:	d108      	bne.n	8005a0c <_dtoa_r+0x6bc>
 80059fa:	459b      	cmp	fp, r3
 80059fc:	d10a      	bne.n	8005a14 <_dtoa_r+0x6c4>
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	3301      	adds	r3, #1
 8005a02:	9308      	str	r3, [sp, #32]
 8005a04:	2330      	movs	r3, #48	; 0x30
 8005a06:	f88b 3000 	strb.w	r3, [fp]
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	3201      	adds	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e78c      	b.n	800592e <_dtoa_r+0x5de>
 8005a14:	461d      	mov	r5, r3
 8005a16:	e7ea      	b.n	80059ee <_dtoa_r+0x69e>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b9b      	ldr	r3, [pc, #620]	; (8005c88 <_dtoa_r+0x938>)
 8005a1c:	f7fa fdac 	bl	8000578 <__aeabi_dmul>
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	f7fb f80e 	bl	8000a48 <__aeabi_dcmpeq>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d09a      	beq.n	8005966 <_dtoa_r+0x616>
 8005a30:	e7cb      	b.n	80059ca <_dtoa_r+0x67a>
 8005a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 808b 	beq.w	8005b50 <_dtoa_r+0x800>
 8005a3a:	9a06      	ldr	r2, [sp, #24]
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	dc6e      	bgt.n	8005b1e <_dtoa_r+0x7ce>
 8005a40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	d067      	beq.n	8005b16 <_dtoa_r+0x7c6>
 8005a46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a4a:	9f07      	ldr	r7, [sp, #28]
 8005a4c:	9d05      	ldr	r5, [sp, #20]
 8005a4e:	9a05      	ldr	r2, [sp, #20]
 8005a50:	2101      	movs	r1, #1
 8005a52:	441a      	add	r2, r3
 8005a54:	4620      	mov	r0, r4
 8005a56:	9205      	str	r2, [sp, #20]
 8005a58:	4498      	add	r8, r3
 8005a5a:	f000 fb26 	bl	80060aa <__i2b>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	dd0c      	ble.n	8005a7e <_dtoa_r+0x72e>
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	dd09      	ble.n	8005a7e <_dtoa_r+0x72e>
 8005a6a:	4545      	cmp	r5, r8
 8005a6c:	9a05      	ldr	r2, [sp, #20]
 8005a6e:	462b      	mov	r3, r5
 8005a70:	bfa8      	it	ge
 8005a72:	4643      	movge	r3, r8
 8005a74:	1ad2      	subs	r2, r2, r3
 8005a76:	9205      	str	r2, [sp, #20]
 8005a78:	1aed      	subs	r5, r5, r3
 8005a7a:	eba8 0803 	sub.w	r8, r8, r3
 8005a7e:	9b07      	ldr	r3, [sp, #28]
 8005a80:	b1eb      	cbz	r3, 8005abe <_dtoa_r+0x76e>
 8005a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d067      	beq.n	8005b58 <_dtoa_r+0x808>
 8005a88:	b18f      	cbz	r7, 8005aae <_dtoa_r+0x75e>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	463a      	mov	r2, r7
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fbaa 	bl	80061e8 <__pow5mult>
 8005a94:	9a04      	ldr	r2, [sp, #16]
 8005a96:	4601      	mov	r1, r0
 8005a98:	4606      	mov	r6, r0
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fb0e 	bl	80060bc <__multiply>
 8005aa0:	9904      	ldr	r1, [sp, #16]
 8005aa2:	9008      	str	r0, [sp, #32]
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 fa60 	bl	8005f6a <_Bfree>
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	9b07      	ldr	r3, [sp, #28]
 8005ab0:	1bda      	subs	r2, r3, r7
 8005ab2:	d004      	beq.n	8005abe <_dtoa_r+0x76e>
 8005ab4:	9904      	ldr	r1, [sp, #16]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fb96 	bl	80061e8 <__pow5mult>
 8005abc:	9004      	str	r0, [sp, #16]
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 faf2 	bl	80060aa <__i2b>
 8005ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac8:	4607      	mov	r7, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 81d0 	beq.w	8005e70 <_dtoa_r+0xb20>
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fb87 	bl	80061e8 <__pow5mult>
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	4607      	mov	r7, r0
 8005ae0:	dc40      	bgt.n	8005b64 <_dtoa_r+0x814>
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d139      	bne.n	8005b5c <_dtoa_r+0x80c>
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d136      	bne.n	8005b60 <_dtoa_r+0x810>
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005af8:	0d1b      	lsrs	r3, r3, #20
 8005afa:	051b      	lsls	r3, r3, #20
 8005afc:	b12b      	cbz	r3, 8005b0a <_dtoa_r+0x7ba>
 8005afe:	9b05      	ldr	r3, [sp, #20]
 8005b00:	3301      	adds	r3, #1
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	f108 0801 	add.w	r8, r8, #1
 8005b08:	2301      	movs	r3, #1
 8005b0a:	9307      	str	r3, [sp, #28]
 8005b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12a      	bne.n	8005b68 <_dtoa_r+0x818>
 8005b12:	2001      	movs	r0, #1
 8005b14:	e030      	b.n	8005b78 <_dtoa_r+0x828>
 8005b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b1c:	e795      	b.n	8005a4a <_dtoa_r+0x6fa>
 8005b1e:	9b07      	ldr	r3, [sp, #28]
 8005b20:	f109 37ff 	add.w	r7, r9, #4294967295
 8005b24:	42bb      	cmp	r3, r7
 8005b26:	bfbf      	itttt	lt
 8005b28:	9b07      	ldrlt	r3, [sp, #28]
 8005b2a:	9707      	strlt	r7, [sp, #28]
 8005b2c:	1afa      	sublt	r2, r7, r3
 8005b2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b30:	bfbb      	ittet	lt
 8005b32:	189b      	addlt	r3, r3, r2
 8005b34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b36:	1bdf      	subge	r7, r3, r7
 8005b38:	2700      	movlt	r7, #0
 8005b3a:	f1b9 0f00 	cmp.w	r9, #0
 8005b3e:	bfb5      	itete	lt
 8005b40:	9b05      	ldrlt	r3, [sp, #20]
 8005b42:	9d05      	ldrge	r5, [sp, #20]
 8005b44:	eba3 0509 	sublt.w	r5, r3, r9
 8005b48:	464b      	movge	r3, r9
 8005b4a:	bfb8      	it	lt
 8005b4c:	2300      	movlt	r3, #0
 8005b4e:	e77e      	b.n	8005a4e <_dtoa_r+0x6fe>
 8005b50:	9f07      	ldr	r7, [sp, #28]
 8005b52:	9d05      	ldr	r5, [sp, #20]
 8005b54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b56:	e783      	b.n	8005a60 <_dtoa_r+0x710>
 8005b58:	9a07      	ldr	r2, [sp, #28]
 8005b5a:	e7ab      	b.n	8005ab4 <_dtoa_r+0x764>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e7d4      	b.n	8005b0a <_dtoa_r+0x7ba>
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	e7d2      	b.n	8005b0a <_dtoa_r+0x7ba>
 8005b64:	2300      	movs	r3, #0
 8005b66:	9307      	str	r3, [sp, #28]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b6e:	6918      	ldr	r0, [r3, #16]
 8005b70:	f000 fa4d 	bl	800600e <__hi0bits>
 8005b74:	f1c0 0020 	rsb	r0, r0, #32
 8005b78:	4440      	add	r0, r8
 8005b7a:	f010 001f 	ands.w	r0, r0, #31
 8005b7e:	d047      	beq.n	8005c10 <_dtoa_r+0x8c0>
 8005b80:	f1c0 0320 	rsb	r3, r0, #32
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	dd3b      	ble.n	8005c00 <_dtoa_r+0x8b0>
 8005b88:	9b05      	ldr	r3, [sp, #20]
 8005b8a:	f1c0 001c 	rsb	r0, r0, #28
 8005b8e:	4403      	add	r3, r0
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	4405      	add	r5, r0
 8005b94:	4480      	add	r8, r0
 8005b96:	9b05      	ldr	r3, [sp, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dd05      	ble.n	8005ba8 <_dtoa_r+0x858>
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	9904      	ldr	r1, [sp, #16]
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 fb6f 	bl	8006284 <__lshift>
 8005ba6:	9004      	str	r0, [sp, #16]
 8005ba8:	f1b8 0f00 	cmp.w	r8, #0
 8005bac:	dd05      	ble.n	8005bba <_dtoa_r+0x86a>
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 fb66 	bl	8006284 <__lshift>
 8005bb8:	4607      	mov	r7, r0
 8005bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bbc:	b353      	cbz	r3, 8005c14 <_dtoa_r+0x8c4>
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	9804      	ldr	r0, [sp, #16]
 8005bc2:	f000 fbb3 	bl	800632c <__mcmp>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	da24      	bge.n	8005c14 <_dtoa_r+0x8c4>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	220a      	movs	r2, #10
 8005bce:	9904      	ldr	r1, [sp, #16]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 f9e1 	bl	8005f98 <__multadd>
 8005bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd8:	9004      	str	r0, [sp, #16]
 8005bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 814d 	beq.w	8005e7e <_dtoa_r+0xb2e>
 8005be4:	2300      	movs	r3, #0
 8005be6:	4631      	mov	r1, r6
 8005be8:	220a      	movs	r2, #10
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f9d4 	bl	8005f98 <__multadd>
 8005bf0:	9b02      	ldr	r3, [sp, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	dc4f      	bgt.n	8005c98 <_dtoa_r+0x948>
 8005bf8:	9b06      	ldr	r3, [sp, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	dd4c      	ble.n	8005c98 <_dtoa_r+0x948>
 8005bfe:	e011      	b.n	8005c24 <_dtoa_r+0x8d4>
 8005c00:	d0c9      	beq.n	8005b96 <_dtoa_r+0x846>
 8005c02:	9a05      	ldr	r2, [sp, #20]
 8005c04:	331c      	adds	r3, #28
 8005c06:	441a      	add	r2, r3
 8005c08:	9205      	str	r2, [sp, #20]
 8005c0a:	441d      	add	r5, r3
 8005c0c:	4498      	add	r8, r3
 8005c0e:	e7c2      	b.n	8005b96 <_dtoa_r+0x846>
 8005c10:	4603      	mov	r3, r0
 8005c12:	e7f6      	b.n	8005c02 <_dtoa_r+0x8b2>
 8005c14:	f1b9 0f00 	cmp.w	r9, #0
 8005c18:	dc38      	bgt.n	8005c8c <_dtoa_r+0x93c>
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	dd35      	ble.n	8005c8c <_dtoa_r+0x93c>
 8005c20:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	b963      	cbnz	r3, 8005c42 <_dtoa_r+0x8f2>
 8005c28:	4639      	mov	r1, r7
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 f9b3 	bl	8005f98 <__multadd>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4607      	mov	r7, r0
 8005c36:	9804      	ldr	r0, [sp, #16]
 8005c38:	f000 fb78 	bl	800632c <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f73f adcc 	bgt.w	80057da <_dtoa_r+0x48a>
 8005c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c44:	465d      	mov	r5, fp
 8005c46:	ea6f 0a03 	mvn.w	sl, r3
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	4639      	mov	r1, r7
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 f98a 	bl	8005f6a <_Bfree>
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	f43f aeb7 	beq.w	80059ca <_dtoa_r+0x67a>
 8005c5c:	f1b9 0f00 	cmp.w	r9, #0
 8005c60:	d005      	beq.n	8005c6e <_dtoa_r+0x91e>
 8005c62:	45b1      	cmp	r9, r6
 8005c64:	d003      	beq.n	8005c6e <_dtoa_r+0x91e>
 8005c66:	4649      	mov	r1, r9
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f97e 	bl	8005f6a <_Bfree>
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f97a 	bl	8005f6a <_Bfree>
 8005c76:	e6a8      	b.n	80059ca <_dtoa_r+0x67a>
 8005c78:	2700      	movs	r7, #0
 8005c7a:	463e      	mov	r6, r7
 8005c7c:	e7e1      	b.n	8005c42 <_dtoa_r+0x8f2>
 8005c7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c82:	463e      	mov	r6, r7
 8005c84:	e5a9      	b.n	80057da <_dtoa_r+0x48a>
 8005c86:	bf00      	nop
 8005c88:	40240000 	.word	0x40240000
 8005c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80fa 	beq.w	8005e8c <_dtoa_r+0xb3c>
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	dd05      	ble.n	8005ca8 <_dtoa_r+0x958>
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 faef 	bl	8006284 <__lshift>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	9b07      	ldr	r3, [sp, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d04c      	beq.n	8005d48 <_dtoa_r+0x9f8>
 8005cae:	6871      	ldr	r1, [r6, #4]
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f000 f926 	bl	8005f02 <_Balloc>
 8005cb6:	6932      	ldr	r2, [r6, #16]
 8005cb8:	3202      	adds	r2, #2
 8005cba:	4605      	mov	r5, r0
 8005cbc:	0092      	lsls	r2, r2, #2
 8005cbe:	f106 010c 	add.w	r1, r6, #12
 8005cc2:	300c      	adds	r0, #12
 8005cc4:	f000 f912 	bl	8005eec <memcpy>
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 fad9 	bl	8006284 <__lshift>
 8005cd2:	9b00      	ldr	r3, [sp, #0]
 8005cd4:	f8cd b014 	str.w	fp, [sp, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	46b1      	mov	r9, r6
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	9804      	ldr	r0, [sp, #16]
 8005ce6:	f7ff faa4 	bl	8005232 <quorem>
 8005cea:	4649      	mov	r1, r9
 8005cec:	4605      	mov	r5, r0
 8005cee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cf2:	9804      	ldr	r0, [sp, #16]
 8005cf4:	f000 fb1a 	bl	800632c <__mcmp>
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	9000      	str	r0, [sp, #0]
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 fb2e 	bl	8006360 <__mdiff>
 8005d04:	68c3      	ldr	r3, [r0, #12]
 8005d06:	4602      	mov	r2, r0
 8005d08:	bb03      	cbnz	r3, 8005d4c <_dtoa_r+0x9fc>
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	9008      	str	r0, [sp, #32]
 8005d0e:	9804      	ldr	r0, [sp, #16]
 8005d10:	f000 fb0c 	bl	800632c <__mcmp>
 8005d14:	9a08      	ldr	r2, [sp, #32]
 8005d16:	4603      	mov	r3, r0
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	f000 f924 	bl	8005f6a <_Bfree>
 8005d22:	9b08      	ldr	r3, [sp, #32]
 8005d24:	b9a3      	cbnz	r3, 8005d50 <_dtoa_r+0xa00>
 8005d26:	9a06      	ldr	r2, [sp, #24]
 8005d28:	b992      	cbnz	r2, 8005d50 <_dtoa_r+0xa00>
 8005d2a:	9a07      	ldr	r2, [sp, #28]
 8005d2c:	b982      	cbnz	r2, 8005d50 <_dtoa_r+0xa00>
 8005d2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d32:	d029      	beq.n	8005d88 <_dtoa_r+0xa38>
 8005d34:	9b00      	ldr	r3, [sp, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	dd01      	ble.n	8005d3e <_dtoa_r+0x9ee>
 8005d3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d3e:	9b05      	ldr	r3, [sp, #20]
 8005d40:	1c5d      	adds	r5, r3, #1
 8005d42:	f883 8000 	strb.w	r8, [r3]
 8005d46:	e782      	b.n	8005c4e <_dtoa_r+0x8fe>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	e7c2      	b.n	8005cd2 <_dtoa_r+0x982>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e7e3      	b.n	8005d18 <_dtoa_r+0x9c8>
 8005d50:	9a00      	ldr	r2, [sp, #0]
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	db04      	blt.n	8005d60 <_dtoa_r+0xa10>
 8005d56:	d125      	bne.n	8005da4 <_dtoa_r+0xa54>
 8005d58:	9a06      	ldr	r2, [sp, #24]
 8005d5a:	bb1a      	cbnz	r2, 8005da4 <_dtoa_r+0xa54>
 8005d5c:	9a07      	ldr	r2, [sp, #28]
 8005d5e:	bb0a      	cbnz	r2, 8005da4 <_dtoa_r+0xa54>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	ddec      	ble.n	8005d3e <_dtoa_r+0x9ee>
 8005d64:	2201      	movs	r2, #1
 8005d66:	9904      	ldr	r1, [sp, #16]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fa8b 	bl	8006284 <__lshift>
 8005d6e:	4639      	mov	r1, r7
 8005d70:	9004      	str	r0, [sp, #16]
 8005d72:	f000 fadb 	bl	800632c <__mcmp>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	dc03      	bgt.n	8005d82 <_dtoa_r+0xa32>
 8005d7a:	d1e0      	bne.n	8005d3e <_dtoa_r+0x9ee>
 8005d7c:	f018 0f01 	tst.w	r8, #1
 8005d80:	d0dd      	beq.n	8005d3e <_dtoa_r+0x9ee>
 8005d82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d86:	d1d8      	bne.n	8005d3a <_dtoa_r+0x9ea>
 8005d88:	9b05      	ldr	r3, [sp, #20]
 8005d8a:	9a05      	ldr	r2, [sp, #20]
 8005d8c:	1c5d      	adds	r5, r3, #1
 8005d8e:	2339      	movs	r3, #57	; 0x39
 8005d90:	7013      	strb	r3, [r2, #0]
 8005d92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d96:	2b39      	cmp	r3, #57	; 0x39
 8005d98:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d9c:	d04f      	beq.n	8005e3e <_dtoa_r+0xaee>
 8005d9e:	3301      	adds	r3, #1
 8005da0:	7013      	strb	r3, [r2, #0]
 8005da2:	e754      	b.n	8005c4e <_dtoa_r+0x8fe>
 8005da4:	9a05      	ldr	r2, [sp, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f102 0501 	add.w	r5, r2, #1
 8005dac:	dd06      	ble.n	8005dbc <_dtoa_r+0xa6c>
 8005dae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005db2:	d0e9      	beq.n	8005d88 <_dtoa_r+0xa38>
 8005db4:	f108 0801 	add.w	r8, r8, #1
 8005db8:	9b05      	ldr	r3, [sp, #20]
 8005dba:	e7c2      	b.n	8005d42 <_dtoa_r+0x9f2>
 8005dbc:	9a02      	ldr	r2, [sp, #8]
 8005dbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005dc2:	eba5 030b 	sub.w	r3, r5, fp
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d021      	beq.n	8005e0e <_dtoa_r+0xabe>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	220a      	movs	r2, #10
 8005dce:	9904      	ldr	r1, [sp, #16]
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 f8e1 	bl	8005f98 <__multadd>
 8005dd6:	45b1      	cmp	r9, r6
 8005dd8:	9004      	str	r0, [sp, #16]
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	f04f 020a 	mov.w	r2, #10
 8005de2:	4649      	mov	r1, r9
 8005de4:	4620      	mov	r0, r4
 8005de6:	d105      	bne.n	8005df4 <_dtoa_r+0xaa4>
 8005de8:	f000 f8d6 	bl	8005f98 <__multadd>
 8005dec:	4681      	mov	r9, r0
 8005dee:	4606      	mov	r6, r0
 8005df0:	9505      	str	r5, [sp, #20]
 8005df2:	e776      	b.n	8005ce2 <_dtoa_r+0x992>
 8005df4:	f000 f8d0 	bl	8005f98 <__multadd>
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4681      	mov	r9, r0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	220a      	movs	r2, #10
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 f8c9 	bl	8005f98 <__multadd>
 8005e06:	4606      	mov	r6, r0
 8005e08:	e7f2      	b.n	8005df0 <_dtoa_r+0xaa0>
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	2201      	movs	r2, #1
 8005e10:	9904      	ldr	r1, [sp, #16]
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fa36 	bl	8006284 <__lshift>
 8005e18:	4639      	mov	r1, r7
 8005e1a:	9004      	str	r0, [sp, #16]
 8005e1c:	f000 fa86 	bl	800632c <__mcmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dcb6      	bgt.n	8005d92 <_dtoa_r+0xa42>
 8005e24:	d102      	bne.n	8005e2c <_dtoa_r+0xadc>
 8005e26:	f018 0f01 	tst.w	r8, #1
 8005e2a:	d1b2      	bne.n	8005d92 <_dtoa_r+0xa42>
 8005e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e36:	f47f af0a 	bne.w	8005c4e <_dtoa_r+0x8fe>
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	e7f6      	b.n	8005e2c <_dtoa_r+0xadc>
 8005e3e:	4593      	cmp	fp, r2
 8005e40:	d105      	bne.n	8005e4e <_dtoa_r+0xafe>
 8005e42:	2331      	movs	r3, #49	; 0x31
 8005e44:	f10a 0a01 	add.w	sl, sl, #1
 8005e48:	f88b 3000 	strb.w	r3, [fp]
 8005e4c:	e6ff      	b.n	8005c4e <_dtoa_r+0x8fe>
 8005e4e:	4615      	mov	r5, r2
 8005e50:	e79f      	b.n	8005d92 <_dtoa_r+0xa42>
 8005e52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005eb8 <_dtoa_r+0xb68>
 8005e56:	e007      	b.n	8005e68 <_dtoa_r+0xb18>
 8005e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005ebc <_dtoa_r+0xb6c>
 8005e5e:	b11b      	cbz	r3, 8005e68 <_dtoa_r+0xb18>
 8005e60:	f10b 0308 	add.w	r3, fp, #8
 8005e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	4658      	mov	r0, fp
 8005e6a:	b017      	add	sp, #92	; 0x5c
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	f77f ae35 	ble.w	8005ae2 <_dtoa_r+0x792>
 8005e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	e649      	b.n	8005b12 <_dtoa_r+0x7c2>
 8005e7e:	9b02      	ldr	r3, [sp, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dc03      	bgt.n	8005e8c <_dtoa_r+0xb3c>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	f73f aecc 	bgt.w	8005c24 <_dtoa_r+0x8d4>
 8005e8c:	465d      	mov	r5, fp
 8005e8e:	4639      	mov	r1, r7
 8005e90:	9804      	ldr	r0, [sp, #16]
 8005e92:	f7ff f9ce 	bl	8005232 <quorem>
 8005e96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e9a:	f805 8b01 	strb.w	r8, [r5], #1
 8005e9e:	9a02      	ldr	r2, [sp, #8]
 8005ea0:	eba5 030b 	sub.w	r3, r5, fp
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	ddb0      	ble.n	8005e0a <_dtoa_r+0xaba>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	220a      	movs	r2, #10
 8005eac:	9904      	ldr	r1, [sp, #16]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f872 	bl	8005f98 <__multadd>
 8005eb4:	9004      	str	r0, [sp, #16]
 8005eb6:	e7ea      	b.n	8005e8e <_dtoa_r+0xb3e>
 8005eb8:	08006630 	.word	0x08006630
 8005ebc:	08006632 	.word	0x08006632

08005ec0 <_localeconv_r>:
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_localeconv_r+0x14>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a18      	ldr	r0, [r3, #32]
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <_localeconv_r+0x18>)
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	bf08      	it	eq
 8005ecc:	4618      	moveq	r0, r3
 8005ece:	30f0      	adds	r0, #240	; 0xf0
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
 8005ed8:	20000070 	.word	0x20000070

08005edc <malloc>:
 8005edc:	4b02      	ldr	r3, [pc, #8]	; (8005ee8 <malloc+0xc>)
 8005ede:	4601      	mov	r1, r0
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	f000 baf7 	b.w	80064d4 <_malloc_r>
 8005ee6:	bf00      	nop
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <memcpy>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	1e43      	subs	r3, r0, #1
 8005ef0:	440a      	add	r2, r1
 8005ef2:	4291      	cmp	r1, r2
 8005ef4:	d100      	bne.n	8005ef8 <memcpy+0xc>
 8005ef6:	bd10      	pop	{r4, pc}
 8005ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f00:	e7f7      	b.n	8005ef2 <memcpy+0x6>

08005f02 <_Balloc>:
 8005f02:	b570      	push	{r4, r5, r6, lr}
 8005f04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f06:	4604      	mov	r4, r0
 8005f08:	460e      	mov	r6, r1
 8005f0a:	b93d      	cbnz	r5, 8005f1c <_Balloc+0x1a>
 8005f0c:	2010      	movs	r0, #16
 8005f0e:	f7ff ffe5 	bl	8005edc <malloc>
 8005f12:	6260      	str	r0, [r4, #36]	; 0x24
 8005f14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f18:	6005      	str	r5, [r0, #0]
 8005f1a:	60c5      	str	r5, [r0, #12]
 8005f1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f1e:	68eb      	ldr	r3, [r5, #12]
 8005f20:	b183      	cbz	r3, 8005f44 <_Balloc+0x42>
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f2a:	b9b8      	cbnz	r0, 8005f5c <_Balloc+0x5a>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f506 	lsl.w	r5, r1, r6
 8005f32:	1d6a      	adds	r2, r5, #5
 8005f34:	0092      	lsls	r2, r2, #2
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fabe 	bl	80064b8 <_calloc_r>
 8005f3c:	b160      	cbz	r0, 8005f58 <_Balloc+0x56>
 8005f3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f42:	e00e      	b.n	8005f62 <_Balloc+0x60>
 8005f44:	2221      	movs	r2, #33	; 0x21
 8005f46:	2104      	movs	r1, #4
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fab5 	bl	80064b8 <_calloc_r>
 8005f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f50:	60e8      	str	r0, [r5, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <_Balloc+0x20>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	6802      	ldr	r2, [r0, #0]
 8005f5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f68:	e7f7      	b.n	8005f5a <_Balloc+0x58>

08005f6a <_Bfree>:
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460d      	mov	r5, r1
 8005f72:	b93c      	cbnz	r4, 8005f84 <_Bfree+0x1a>
 8005f74:	2010      	movs	r0, #16
 8005f76:	f7ff ffb1 	bl	8005edc <malloc>
 8005f7a:	6270      	str	r0, [r6, #36]	; 0x24
 8005f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f80:	6004      	str	r4, [r0, #0]
 8005f82:	60c4      	str	r4, [r0, #12]
 8005f84:	b13d      	cbz	r5, 8005f96 <_Bfree+0x2c>
 8005f86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f88:	686a      	ldr	r2, [r5, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f90:	6029      	str	r1, [r5, #0]
 8005f92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f96:	bd70      	pop	{r4, r5, r6, pc}

08005f98 <__multadd>:
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	690d      	ldr	r5, [r1, #16]
 8005f9e:	461f      	mov	r7, r3
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f101 0c14 	add.w	ip, r1, #20
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8dc 0000 	ldr.w	r0, [ip]
 8005fae:	b281      	uxth	r1, r0
 8005fb0:	fb02 7101 	mla	r1, r2, r1, r7
 8005fb4:	0c0f      	lsrs	r7, r1, #16
 8005fb6:	0c00      	lsrs	r0, r0, #16
 8005fb8:	fb02 7000 	mla	r0, r2, r0, r7
 8005fbc:	b289      	uxth	r1, r1
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fc4:	429d      	cmp	r5, r3
 8005fc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fca:	f84c 1b04 	str.w	r1, [ip], #4
 8005fce:	dcec      	bgt.n	8005faa <__multadd+0x12>
 8005fd0:	b1d7      	cbz	r7, 8006008 <__multadd+0x70>
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	dc12      	bgt.n	8005ffe <__multadd+0x66>
 8005fd8:	6861      	ldr	r1, [r4, #4]
 8005fda:	4630      	mov	r0, r6
 8005fdc:	3101      	adds	r1, #1
 8005fde:	f7ff ff90 	bl	8005f02 <_Balloc>
 8005fe2:	6922      	ldr	r2, [r4, #16]
 8005fe4:	3202      	adds	r2, #2
 8005fe6:	f104 010c 	add.w	r1, r4, #12
 8005fea:	4680      	mov	r8, r0
 8005fec:	0092      	lsls	r2, r2, #2
 8005fee:	300c      	adds	r0, #12
 8005ff0:	f7ff ff7c 	bl	8005eec <memcpy>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7ff ffb7 	bl	8005f6a <_Bfree>
 8005ffc:	4644      	mov	r4, r8
 8005ffe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006002:	3501      	adds	r5, #1
 8006004:	615f      	str	r7, [r3, #20]
 8006006:	6125      	str	r5, [r4, #16]
 8006008:	4620      	mov	r0, r4
 800600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800600e <__hi0bits>:
 800600e:	0c02      	lsrs	r2, r0, #16
 8006010:	0412      	lsls	r2, r2, #16
 8006012:	4603      	mov	r3, r0
 8006014:	b9b2      	cbnz	r2, 8006044 <__hi0bits+0x36>
 8006016:	0403      	lsls	r3, r0, #16
 8006018:	2010      	movs	r0, #16
 800601a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800601e:	bf04      	itt	eq
 8006020:	021b      	lsleq	r3, r3, #8
 8006022:	3008      	addeq	r0, #8
 8006024:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006028:	bf04      	itt	eq
 800602a:	011b      	lsleq	r3, r3, #4
 800602c:	3004      	addeq	r0, #4
 800602e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006032:	bf04      	itt	eq
 8006034:	009b      	lsleq	r3, r3, #2
 8006036:	3002      	addeq	r0, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	db06      	blt.n	800604a <__hi0bits+0x3c>
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	d503      	bpl.n	8006048 <__hi0bits+0x3a>
 8006040:	3001      	adds	r0, #1
 8006042:	4770      	bx	lr
 8006044:	2000      	movs	r0, #0
 8006046:	e7e8      	b.n	800601a <__hi0bits+0xc>
 8006048:	2020      	movs	r0, #32
 800604a:	4770      	bx	lr

0800604c <__lo0bits>:
 800604c:	6803      	ldr	r3, [r0, #0]
 800604e:	f013 0207 	ands.w	r2, r3, #7
 8006052:	4601      	mov	r1, r0
 8006054:	d00b      	beq.n	800606e <__lo0bits+0x22>
 8006056:	07da      	lsls	r2, r3, #31
 8006058:	d423      	bmi.n	80060a2 <__lo0bits+0x56>
 800605a:	0798      	lsls	r0, r3, #30
 800605c:	bf49      	itett	mi
 800605e:	085b      	lsrmi	r3, r3, #1
 8006060:	089b      	lsrpl	r3, r3, #2
 8006062:	2001      	movmi	r0, #1
 8006064:	600b      	strmi	r3, [r1, #0]
 8006066:	bf5c      	itt	pl
 8006068:	600b      	strpl	r3, [r1, #0]
 800606a:	2002      	movpl	r0, #2
 800606c:	4770      	bx	lr
 800606e:	b298      	uxth	r0, r3
 8006070:	b9a8      	cbnz	r0, 800609e <__lo0bits+0x52>
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	2010      	movs	r0, #16
 8006076:	f013 0fff 	tst.w	r3, #255	; 0xff
 800607a:	bf04      	itt	eq
 800607c:	0a1b      	lsreq	r3, r3, #8
 800607e:	3008      	addeq	r0, #8
 8006080:	071a      	lsls	r2, r3, #28
 8006082:	bf04      	itt	eq
 8006084:	091b      	lsreq	r3, r3, #4
 8006086:	3004      	addeq	r0, #4
 8006088:	079a      	lsls	r2, r3, #30
 800608a:	bf04      	itt	eq
 800608c:	089b      	lsreq	r3, r3, #2
 800608e:	3002      	addeq	r0, #2
 8006090:	07da      	lsls	r2, r3, #31
 8006092:	d402      	bmi.n	800609a <__lo0bits+0x4e>
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	d006      	beq.n	80060a6 <__lo0bits+0x5a>
 8006098:	3001      	adds	r0, #1
 800609a:	600b      	str	r3, [r1, #0]
 800609c:	4770      	bx	lr
 800609e:	4610      	mov	r0, r2
 80060a0:	e7e9      	b.n	8006076 <__lo0bits+0x2a>
 80060a2:	2000      	movs	r0, #0
 80060a4:	4770      	bx	lr
 80060a6:	2020      	movs	r0, #32
 80060a8:	4770      	bx	lr

080060aa <__i2b>:
 80060aa:	b510      	push	{r4, lr}
 80060ac:	460c      	mov	r4, r1
 80060ae:	2101      	movs	r1, #1
 80060b0:	f7ff ff27 	bl	8005f02 <_Balloc>
 80060b4:	2201      	movs	r2, #1
 80060b6:	6144      	str	r4, [r0, #20]
 80060b8:	6102      	str	r2, [r0, #16]
 80060ba:	bd10      	pop	{r4, pc}

080060bc <__multiply>:
 80060bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	4614      	mov	r4, r2
 80060c2:	690a      	ldr	r2, [r1, #16]
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	bfb8      	it	lt
 80060ca:	460b      	movlt	r3, r1
 80060cc:	4688      	mov	r8, r1
 80060ce:	bfbc      	itt	lt
 80060d0:	46a0      	movlt	r8, r4
 80060d2:	461c      	movlt	r4, r3
 80060d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060e4:	eb07 0609 	add.w	r6, r7, r9
 80060e8:	42b3      	cmp	r3, r6
 80060ea:	bfb8      	it	lt
 80060ec:	3101      	addlt	r1, #1
 80060ee:	f7ff ff08 	bl	8005f02 <_Balloc>
 80060f2:	f100 0514 	add.w	r5, r0, #20
 80060f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060fa:	462b      	mov	r3, r5
 80060fc:	2200      	movs	r2, #0
 80060fe:	4573      	cmp	r3, lr
 8006100:	d316      	bcc.n	8006130 <__multiply+0x74>
 8006102:	f104 0214 	add.w	r2, r4, #20
 8006106:	f108 0114 	add.w	r1, r8, #20
 800610a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800610e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	9b00      	ldr	r3, [sp, #0]
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	4293      	cmp	r3, r2
 800611a:	d80c      	bhi.n	8006136 <__multiply+0x7a>
 800611c:	2e00      	cmp	r6, #0
 800611e:	dd03      	ble.n	8006128 <__multiply+0x6c>
 8006120:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05d      	beq.n	80061e4 <__multiply+0x128>
 8006128:	6106      	str	r6, [r0, #16]
 800612a:	b003      	add	sp, #12
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	f843 2b04 	str.w	r2, [r3], #4
 8006134:	e7e3      	b.n	80060fe <__multiply+0x42>
 8006136:	f8b2 b000 	ldrh.w	fp, [r2]
 800613a:	f1bb 0f00 	cmp.w	fp, #0
 800613e:	d023      	beq.n	8006188 <__multiply+0xcc>
 8006140:	4689      	mov	r9, r1
 8006142:	46ac      	mov	ip, r5
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	f859 4b04 	ldr.w	r4, [r9], #4
 800614c:	f8dc a000 	ldr.w	sl, [ip]
 8006150:	b2a3      	uxth	r3, r4
 8006152:	fa1f fa8a 	uxth.w	sl, sl
 8006156:	fb0b a303 	mla	r3, fp, r3, sl
 800615a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800615e:	f8dc 4000 	ldr.w	r4, [ip]
 8006162:	4443      	add	r3, r8
 8006164:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006168:	fb0b 840a 	mla	r4, fp, sl, r8
 800616c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006170:	46e2      	mov	sl, ip
 8006172:	b29b      	uxth	r3, r3
 8006174:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006178:	454f      	cmp	r7, r9
 800617a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800617e:	f84a 3b04 	str.w	r3, [sl], #4
 8006182:	d82b      	bhi.n	80061dc <__multiply+0x120>
 8006184:	f8cc 8004 	str.w	r8, [ip, #4]
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800618e:	3204      	adds	r2, #4
 8006190:	f1ba 0f00 	cmp.w	sl, #0
 8006194:	d020      	beq.n	80061d8 <__multiply+0x11c>
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	4689      	mov	r9, r1
 800619a:	46a8      	mov	r8, r5
 800619c:	f04f 0b00 	mov.w	fp, #0
 80061a0:	f8b9 c000 	ldrh.w	ip, [r9]
 80061a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80061ac:	445c      	add	r4, fp
 80061ae:	46c4      	mov	ip, r8
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061b6:	f84c 3b04 	str.w	r3, [ip], #4
 80061ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80061be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061c2:	0c1b      	lsrs	r3, r3, #16
 80061c4:	fb0a b303 	mla	r3, sl, r3, fp
 80061c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061cc:	454f      	cmp	r7, r9
 80061ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061d2:	d805      	bhi.n	80061e0 <__multiply+0x124>
 80061d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80061d8:	3504      	adds	r5, #4
 80061da:	e79b      	b.n	8006114 <__multiply+0x58>
 80061dc:	46d4      	mov	ip, sl
 80061de:	e7b3      	b.n	8006148 <__multiply+0x8c>
 80061e0:	46e0      	mov	r8, ip
 80061e2:	e7dd      	b.n	80061a0 <__multiply+0xe4>
 80061e4:	3e01      	subs	r6, #1
 80061e6:	e799      	b.n	800611c <__multiply+0x60>

080061e8 <__pow5mult>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4615      	mov	r5, r2
 80061ee:	f012 0203 	ands.w	r2, r2, #3
 80061f2:	4606      	mov	r6, r0
 80061f4:	460f      	mov	r7, r1
 80061f6:	d007      	beq.n	8006208 <__pow5mult+0x20>
 80061f8:	3a01      	subs	r2, #1
 80061fa:	4c21      	ldr	r4, [pc, #132]	; (8006280 <__pow5mult+0x98>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006202:	f7ff fec9 	bl	8005f98 <__multadd>
 8006206:	4607      	mov	r7, r0
 8006208:	10ad      	asrs	r5, r5, #2
 800620a:	d035      	beq.n	8006278 <__pow5mult+0x90>
 800620c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800620e:	b93c      	cbnz	r4, 8006220 <__pow5mult+0x38>
 8006210:	2010      	movs	r0, #16
 8006212:	f7ff fe63 	bl	8005edc <malloc>
 8006216:	6270      	str	r0, [r6, #36]	; 0x24
 8006218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800621c:	6004      	str	r4, [r0, #0]
 800621e:	60c4      	str	r4, [r0, #12]
 8006220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006228:	b94c      	cbnz	r4, 800623e <__pow5mult+0x56>
 800622a:	f240 2171 	movw	r1, #625	; 0x271
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff ff3b 	bl	80060aa <__i2b>
 8006234:	2300      	movs	r3, #0
 8006236:	f8c8 0008 	str.w	r0, [r8, #8]
 800623a:	4604      	mov	r4, r0
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	f04f 0800 	mov.w	r8, #0
 8006242:	07eb      	lsls	r3, r5, #31
 8006244:	d50a      	bpl.n	800625c <__pow5mult+0x74>
 8006246:	4639      	mov	r1, r7
 8006248:	4622      	mov	r2, r4
 800624a:	4630      	mov	r0, r6
 800624c:	f7ff ff36 	bl	80060bc <__multiply>
 8006250:	4639      	mov	r1, r7
 8006252:	4681      	mov	r9, r0
 8006254:	4630      	mov	r0, r6
 8006256:	f7ff fe88 	bl	8005f6a <_Bfree>
 800625a:	464f      	mov	r7, r9
 800625c:	106d      	asrs	r5, r5, #1
 800625e:	d00b      	beq.n	8006278 <__pow5mult+0x90>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	b938      	cbnz	r0, 8006274 <__pow5mult+0x8c>
 8006264:	4622      	mov	r2, r4
 8006266:	4621      	mov	r1, r4
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff ff27 	bl	80060bc <__multiply>
 800626e:	6020      	str	r0, [r4, #0]
 8006270:	f8c0 8000 	str.w	r8, [r0]
 8006274:	4604      	mov	r4, r0
 8006276:	e7e4      	b.n	8006242 <__pow5mult+0x5a>
 8006278:	4638      	mov	r0, r7
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	bf00      	nop
 8006280:	08006730 	.word	0x08006730

08006284 <__lshift>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	460c      	mov	r4, r1
 800628a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6849      	ldr	r1, [r1, #4]
 8006292:	eb0a 0903 	add.w	r9, sl, r3
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	4607      	mov	r7, r0
 800629a:	4616      	mov	r6, r2
 800629c:	f109 0501 	add.w	r5, r9, #1
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	db32      	blt.n	800630a <__lshift+0x86>
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff fe2c 	bl	8005f02 <_Balloc>
 80062aa:	2300      	movs	r3, #0
 80062ac:	4680      	mov	r8, r0
 80062ae:	f100 0114 	add.w	r1, r0, #20
 80062b2:	461a      	mov	r2, r3
 80062b4:	4553      	cmp	r3, sl
 80062b6:	db2b      	blt.n	8006310 <__lshift+0x8c>
 80062b8:	6920      	ldr	r0, [r4, #16]
 80062ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062be:	f104 0314 	add.w	r3, r4, #20
 80062c2:	f016 021f 	ands.w	r2, r6, #31
 80062c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062ce:	d025      	beq.n	800631c <__lshift+0x98>
 80062d0:	f1c2 0e20 	rsb	lr, r2, #32
 80062d4:	2000      	movs	r0, #0
 80062d6:	681e      	ldr	r6, [r3, #0]
 80062d8:	468a      	mov	sl, r1
 80062da:	4096      	lsls	r6, r2
 80062dc:	4330      	orrs	r0, r6
 80062de:	f84a 0b04 	str.w	r0, [sl], #4
 80062e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80062e6:	459c      	cmp	ip, r3
 80062e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80062ec:	d814      	bhi.n	8006318 <__lshift+0x94>
 80062ee:	6048      	str	r0, [r1, #4]
 80062f0:	b108      	cbz	r0, 80062f6 <__lshift+0x72>
 80062f2:	f109 0502 	add.w	r5, r9, #2
 80062f6:	3d01      	subs	r5, #1
 80062f8:	4638      	mov	r0, r7
 80062fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80062fe:	4621      	mov	r1, r4
 8006300:	f7ff fe33 	bl	8005f6a <_Bfree>
 8006304:	4640      	mov	r0, r8
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	3101      	adds	r1, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	e7c7      	b.n	80062a0 <__lshift+0x1c>
 8006310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006314:	3301      	adds	r3, #1
 8006316:	e7cd      	b.n	80062b4 <__lshift+0x30>
 8006318:	4651      	mov	r1, sl
 800631a:	e7dc      	b.n	80062d6 <__lshift+0x52>
 800631c:	3904      	subs	r1, #4
 800631e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006322:	f841 2f04 	str.w	r2, [r1, #4]!
 8006326:	459c      	cmp	ip, r3
 8006328:	d8f9      	bhi.n	800631e <__lshift+0x9a>
 800632a:	e7e4      	b.n	80062f6 <__lshift+0x72>

0800632c <__mcmp>:
 800632c:	6903      	ldr	r3, [r0, #16]
 800632e:	690a      	ldr	r2, [r1, #16]
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	b530      	push	{r4, r5, lr}
 8006334:	d10c      	bne.n	8006350 <__mcmp+0x24>
 8006336:	0092      	lsls	r2, r2, #2
 8006338:	3014      	adds	r0, #20
 800633a:	3114      	adds	r1, #20
 800633c:	1884      	adds	r4, r0, r2
 800633e:	4411      	add	r1, r2
 8006340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006348:	4295      	cmp	r5, r2
 800634a:	d003      	beq.n	8006354 <__mcmp+0x28>
 800634c:	d305      	bcc.n	800635a <__mcmp+0x2e>
 800634e:	2301      	movs	r3, #1
 8006350:	4618      	mov	r0, r3
 8006352:	bd30      	pop	{r4, r5, pc}
 8006354:	42a0      	cmp	r0, r4
 8006356:	d3f3      	bcc.n	8006340 <__mcmp+0x14>
 8006358:	e7fa      	b.n	8006350 <__mcmp+0x24>
 800635a:	f04f 33ff 	mov.w	r3, #4294967295
 800635e:	e7f7      	b.n	8006350 <__mcmp+0x24>

08006360 <__mdiff>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	460d      	mov	r5, r1
 8006366:	4607      	mov	r7, r0
 8006368:	4611      	mov	r1, r2
 800636a:	4628      	mov	r0, r5
 800636c:	4614      	mov	r4, r2
 800636e:	f7ff ffdd 	bl	800632c <__mcmp>
 8006372:	1e06      	subs	r6, r0, #0
 8006374:	d108      	bne.n	8006388 <__mdiff+0x28>
 8006376:	4631      	mov	r1, r6
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff fdc2 	bl	8005f02 <_Balloc>
 800637e:	2301      	movs	r3, #1
 8006380:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	bfa4      	itt	ge
 800638a:	4623      	movge	r3, r4
 800638c:	462c      	movge	r4, r5
 800638e:	4638      	mov	r0, r7
 8006390:	6861      	ldr	r1, [r4, #4]
 8006392:	bfa6      	itte	ge
 8006394:	461d      	movge	r5, r3
 8006396:	2600      	movge	r6, #0
 8006398:	2601      	movlt	r6, #1
 800639a:	f7ff fdb2 	bl	8005f02 <_Balloc>
 800639e:	692b      	ldr	r3, [r5, #16]
 80063a0:	60c6      	str	r6, [r0, #12]
 80063a2:	6926      	ldr	r6, [r4, #16]
 80063a4:	f105 0914 	add.w	r9, r5, #20
 80063a8:	f104 0214 	add.w	r2, r4, #20
 80063ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063b4:	f100 0514 	add.w	r5, r0, #20
 80063b8:	f04f 0e00 	mov.w	lr, #0
 80063bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80063c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80063c4:	fa1e f18a 	uxtah	r1, lr, sl
 80063c8:	b2a3      	uxth	r3, r4
 80063ca:	1ac9      	subs	r1, r1, r3
 80063cc:	0c23      	lsrs	r3, r4, #16
 80063ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063d6:	b289      	uxth	r1, r1
 80063d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063dc:	45c8      	cmp	r8, r9
 80063de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063e2:	4694      	mov	ip, r2
 80063e4:	f845 3b04 	str.w	r3, [r5], #4
 80063e8:	d8e8      	bhi.n	80063bc <__mdiff+0x5c>
 80063ea:	45bc      	cmp	ip, r7
 80063ec:	d304      	bcc.n	80063f8 <__mdiff+0x98>
 80063ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063f2:	b183      	cbz	r3, 8006416 <__mdiff+0xb6>
 80063f4:	6106      	str	r6, [r0, #16]
 80063f6:	e7c5      	b.n	8006384 <__mdiff+0x24>
 80063f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063fc:	fa1e f381 	uxtah	r3, lr, r1
 8006400:	141a      	asrs	r2, r3, #16
 8006402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006406:	b29b      	uxth	r3, r3
 8006408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006410:	f845 3b04 	str.w	r3, [r5], #4
 8006414:	e7e9      	b.n	80063ea <__mdiff+0x8a>
 8006416:	3e01      	subs	r6, #1
 8006418:	e7e9      	b.n	80063ee <__mdiff+0x8e>

0800641a <__d2b>:
 800641a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	2101      	movs	r1, #1
 8006422:	ec59 8b10 	vmov	r8, r9, d0
 8006426:	4615      	mov	r5, r2
 8006428:	f7ff fd6b 	bl	8005f02 <_Balloc>
 800642c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006430:	4607      	mov	r7, r0
 8006432:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006436:	bb34      	cbnz	r4, 8006486 <__d2b+0x6c>
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	f1b8 0300 	subs.w	r3, r8, #0
 800643e:	d027      	beq.n	8006490 <__d2b+0x76>
 8006440:	a802      	add	r0, sp, #8
 8006442:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006446:	f7ff fe01 	bl	800604c <__lo0bits>
 800644a:	9900      	ldr	r1, [sp, #0]
 800644c:	b1f0      	cbz	r0, 800648c <__d2b+0x72>
 800644e:	9a01      	ldr	r2, [sp, #4]
 8006450:	f1c0 0320 	rsb	r3, r0, #32
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	430b      	orrs	r3, r1
 800645a:	40c2      	lsrs	r2, r0
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	9201      	str	r2, [sp, #4]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf14      	ite	ne
 8006468:	2102      	movne	r1, #2
 800646a:	2101      	moveq	r1, #1
 800646c:	6139      	str	r1, [r7, #16]
 800646e:	b1c4      	cbz	r4, 80064a2 <__d2b+0x88>
 8006470:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006474:	4404      	add	r4, r0
 8006476:	6034      	str	r4, [r6, #0]
 8006478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800647c:	6028      	str	r0, [r5, #0]
 800647e:	4638      	mov	r0, r7
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800648a:	e7d5      	b.n	8006438 <__d2b+0x1e>
 800648c:	6179      	str	r1, [r7, #20]
 800648e:	e7e7      	b.n	8006460 <__d2b+0x46>
 8006490:	a801      	add	r0, sp, #4
 8006492:	f7ff fddb 	bl	800604c <__lo0bits>
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	2101      	movs	r1, #1
 800649c:	6139      	str	r1, [r7, #16]
 800649e:	3020      	adds	r0, #32
 80064a0:	e7e5      	b.n	800646e <__d2b+0x54>
 80064a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064aa:	6030      	str	r0, [r6, #0]
 80064ac:	6918      	ldr	r0, [r3, #16]
 80064ae:	f7ff fdae 	bl	800600e <__hi0bits>
 80064b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064b6:	e7e1      	b.n	800647c <__d2b+0x62>

080064b8 <_calloc_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	fb02 f401 	mul.w	r4, r2, r1
 80064be:	4621      	mov	r1, r4
 80064c0:	f000 f808 	bl	80064d4 <_malloc_r>
 80064c4:	4605      	mov	r5, r0
 80064c6:	b118      	cbz	r0, 80064d0 <_calloc_r+0x18>
 80064c8:	4622      	mov	r2, r4
 80064ca:	2100      	movs	r1, #0
 80064cc:	f7fe fb60 	bl	8004b90 <memset>
 80064d0:	4628      	mov	r0, r5
 80064d2:	bd38      	pop	{r3, r4, r5, pc}

080064d4 <_malloc_r>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	1ccd      	adds	r5, r1, #3
 80064d8:	f025 0503 	bic.w	r5, r5, #3
 80064dc:	3508      	adds	r5, #8
 80064de:	2d0c      	cmp	r5, #12
 80064e0:	bf38      	it	cc
 80064e2:	250c      	movcc	r5, #12
 80064e4:	2d00      	cmp	r5, #0
 80064e6:	4606      	mov	r6, r0
 80064e8:	db01      	blt.n	80064ee <_malloc_r+0x1a>
 80064ea:	42a9      	cmp	r1, r5
 80064ec:	d903      	bls.n	80064f6 <_malloc_r+0x22>
 80064ee:	230c      	movs	r3, #12
 80064f0:	6033      	str	r3, [r6, #0]
 80064f2:	2000      	movs	r0, #0
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	f000 f869 	bl	80065cc <__malloc_lock>
 80064fa:	4a21      	ldr	r2, [pc, #132]	; (8006580 <_malloc_r+0xac>)
 80064fc:	6814      	ldr	r4, [r2, #0]
 80064fe:	4621      	mov	r1, r4
 8006500:	b991      	cbnz	r1, 8006528 <_malloc_r+0x54>
 8006502:	4c20      	ldr	r4, [pc, #128]	; (8006584 <_malloc_r+0xb0>)
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	b91b      	cbnz	r3, 8006510 <_malloc_r+0x3c>
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f83d 	bl	8006588 <_sbrk_r>
 800650e:	6020      	str	r0, [r4, #0]
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f000 f838 	bl	8006588 <_sbrk_r>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d124      	bne.n	8006566 <_malloc_r+0x92>
 800651c:	230c      	movs	r3, #12
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	4630      	mov	r0, r6
 8006522:	f000 f854 	bl	80065ce <__malloc_unlock>
 8006526:	e7e4      	b.n	80064f2 <_malloc_r+0x1e>
 8006528:	680b      	ldr	r3, [r1, #0]
 800652a:	1b5b      	subs	r3, r3, r5
 800652c:	d418      	bmi.n	8006560 <_malloc_r+0x8c>
 800652e:	2b0b      	cmp	r3, #11
 8006530:	d90f      	bls.n	8006552 <_malloc_r+0x7e>
 8006532:	600b      	str	r3, [r1, #0]
 8006534:	50cd      	str	r5, [r1, r3]
 8006536:	18cc      	adds	r4, r1, r3
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f848 	bl	80065ce <__malloc_unlock>
 800653e:	f104 000b 	add.w	r0, r4, #11
 8006542:	1d23      	adds	r3, r4, #4
 8006544:	f020 0007 	bic.w	r0, r0, #7
 8006548:	1ac3      	subs	r3, r0, r3
 800654a:	d0d3      	beq.n	80064f4 <_malloc_r+0x20>
 800654c:	425a      	negs	r2, r3
 800654e:	50e2      	str	r2, [r4, r3]
 8006550:	e7d0      	b.n	80064f4 <_malloc_r+0x20>
 8006552:	428c      	cmp	r4, r1
 8006554:	684b      	ldr	r3, [r1, #4]
 8006556:	bf16      	itet	ne
 8006558:	6063      	strne	r3, [r4, #4]
 800655a:	6013      	streq	r3, [r2, #0]
 800655c:	460c      	movne	r4, r1
 800655e:	e7eb      	b.n	8006538 <_malloc_r+0x64>
 8006560:	460c      	mov	r4, r1
 8006562:	6849      	ldr	r1, [r1, #4]
 8006564:	e7cc      	b.n	8006500 <_malloc_r+0x2c>
 8006566:	1cc4      	adds	r4, r0, #3
 8006568:	f024 0403 	bic.w	r4, r4, #3
 800656c:	42a0      	cmp	r0, r4
 800656e:	d005      	beq.n	800657c <_malloc_r+0xa8>
 8006570:	1a21      	subs	r1, r4, r0
 8006572:	4630      	mov	r0, r6
 8006574:	f000 f808 	bl	8006588 <_sbrk_r>
 8006578:	3001      	adds	r0, #1
 800657a:	d0cf      	beq.n	800651c <_malloc_r+0x48>
 800657c:	6025      	str	r5, [r4, #0]
 800657e:	e7db      	b.n	8006538 <_malloc_r+0x64>
 8006580:	200001fc 	.word	0x200001fc
 8006584:	20000200 	.word	0x20000200

08006588 <_sbrk_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4c06      	ldr	r4, [pc, #24]	; (80065a4 <_sbrk_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4605      	mov	r5, r0
 8006590:	4608      	mov	r0, r1
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	f7fb fa0c 	bl	80019b0 <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_sbrk_r+0x1a>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_sbrk_r+0x1a>
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20000f18 	.word	0x20000f18

080065a8 <__ascii_mbtowc>:
 80065a8:	b082      	sub	sp, #8
 80065aa:	b901      	cbnz	r1, 80065ae <__ascii_mbtowc+0x6>
 80065ac:	a901      	add	r1, sp, #4
 80065ae:	b142      	cbz	r2, 80065c2 <__ascii_mbtowc+0x1a>
 80065b0:	b14b      	cbz	r3, 80065c6 <__ascii_mbtowc+0x1e>
 80065b2:	7813      	ldrb	r3, [r2, #0]
 80065b4:	600b      	str	r3, [r1, #0]
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	1c10      	adds	r0, r2, #0
 80065ba:	bf18      	it	ne
 80065bc:	2001      	movne	r0, #1
 80065be:	b002      	add	sp, #8
 80065c0:	4770      	bx	lr
 80065c2:	4610      	mov	r0, r2
 80065c4:	e7fb      	b.n	80065be <__ascii_mbtowc+0x16>
 80065c6:	f06f 0001 	mvn.w	r0, #1
 80065ca:	e7f8      	b.n	80065be <__ascii_mbtowc+0x16>

080065cc <__malloc_lock>:
 80065cc:	4770      	bx	lr

080065ce <__malloc_unlock>:
 80065ce:	4770      	bx	lr

080065d0 <__ascii_wctomb>:
 80065d0:	b149      	cbz	r1, 80065e6 <__ascii_wctomb+0x16>
 80065d2:	2aff      	cmp	r2, #255	; 0xff
 80065d4:	bf85      	ittet	hi
 80065d6:	238a      	movhi	r3, #138	; 0x8a
 80065d8:	6003      	strhi	r3, [r0, #0]
 80065da:	700a      	strbls	r2, [r1, #0]
 80065dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80065e0:	bf98      	it	ls
 80065e2:	2001      	movls	r0, #1
 80065e4:	4770      	bx	lr
 80065e6:	4608      	mov	r0, r1
 80065e8:	4770      	bx	lr
	...

080065ec <_init>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr

080065f8 <_fini>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr
