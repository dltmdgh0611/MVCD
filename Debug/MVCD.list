
MVCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005114  08005114  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800511c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  20000070  0800518c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db0  0800518c  00020db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012993  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f3  00000000  00000000  00032a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  000364d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000268b3  00000000  00000000  00037410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e05a  00000000  00000000  0005dcc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e436b  00000000  00000000  0006bd1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc4  00000000  00000000  00150104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005068 	.word	0x08005068

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08005068 	.word	0x08005068

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_d2iz>:
 8000564:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800056c:	d215      	bcs.n	800059a <__aeabi_d2iz+0x36>
 800056e:	d511      	bpl.n	8000594 <__aeabi_d2iz+0x30>
 8000570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000578:	d912      	bls.n	80005a0 <__aeabi_d2iz+0x3c>
 800057a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800057e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000586:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058a:	fa23 f002 	lsr.w	r0, r3, r2
 800058e:	bf18      	it	ne
 8000590:	4240      	negne	r0, r0
 8000592:	4770      	bx	lr
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	4770      	bx	lr
 800059a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800059e:	d105      	bne.n	80005ac <__aeabi_d2iz+0x48>
 80005a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__aeabi_d2uiz>:
 80005b4:	004a      	lsls	r2, r1, #1
 80005b6:	d211      	bcs.n	80005dc <__aeabi_d2uiz+0x28>
 80005b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005bc:	d211      	bcs.n	80005e2 <__aeabi_d2uiz+0x2e>
 80005be:	d50d      	bpl.n	80005dc <__aeabi_d2uiz+0x28>
 80005c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005c8:	d40e      	bmi.n	80005e8 <__aeabi_d2uiz+0x34>
 80005ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005d6:	fa23 f002 	lsr.w	r0, r3, r2
 80005da:	4770      	bx	lr
 80005dc:	f04f 0000 	mov.w	r0, #0
 80005e0:	4770      	bx	lr
 80005e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005e6:	d102      	bne.n	80005ee <__aeabi_d2uiz+0x3a>
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295
 8000604:	f04f 30ff 	movne.w	r0, #4294967295
 8000608:	f000 b972 	b.w	80008f0 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9e08      	ldr	r6, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	4688      	mov	r8, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14b      	bne.n	80006ca <__udivmoddi4+0xa6>
 8000632:	428a      	cmp	r2, r1
 8000634:	4615      	mov	r5, r2
 8000636:	d967      	bls.n	8000708 <__udivmoddi4+0xe4>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b14a      	cbz	r2, 8000652 <__udivmoddi4+0x2e>
 800063e:	f1c2 0720 	rsb	r7, r2, #32
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	fa20 f707 	lsr.w	r7, r0, r7
 800064a:	4095      	lsls	r5, r2
 800064c:	ea47 0803 	orr.w	r8, r7, r3
 8000650:	4094      	lsls	r4, r2
 8000652:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000656:	0c23      	lsrs	r3, r4, #16
 8000658:	fbb8 f7fe 	udiv	r7, r8, lr
 800065c:	fa1f fc85 	uxth.w	ip, r5
 8000660:	fb0e 8817 	mls	r8, lr, r7, r8
 8000664:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000668:	fb07 f10c 	mul.w	r1, r7, ip
 800066c:	4299      	cmp	r1, r3
 800066e:	d909      	bls.n	8000684 <__udivmoddi4+0x60>
 8000670:	18eb      	adds	r3, r5, r3
 8000672:	f107 30ff 	add.w	r0, r7, #4294967295
 8000676:	f080 811b 	bcs.w	80008b0 <__udivmoddi4+0x28c>
 800067a:	4299      	cmp	r1, r3
 800067c:	f240 8118 	bls.w	80008b0 <__udivmoddi4+0x28c>
 8000680:	3f02      	subs	r7, #2
 8000682:	442b      	add	r3, r5
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb3 f0fe 	udiv	r0, r3, lr
 800068c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000690:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000694:	fb00 fc0c 	mul.w	ip, r0, ip
 8000698:	45a4      	cmp	ip, r4
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x8c>
 800069c:	192c      	adds	r4, r5, r4
 800069e:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a2:	f080 8107 	bcs.w	80008b4 <__udivmoddi4+0x290>
 80006a6:	45a4      	cmp	ip, r4
 80006a8:	f240 8104 	bls.w	80008b4 <__udivmoddi4+0x290>
 80006ac:	3802      	subs	r0, #2
 80006ae:	442c      	add	r4, r5
 80006b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b4:	eba4 040c 	sub.w	r4, r4, ip
 80006b8:	2700      	movs	r7, #0
 80006ba:	b11e      	cbz	r6, 80006c4 <__udivmoddi4+0xa0>
 80006bc:	40d4      	lsrs	r4, r2
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c6 4300 	strd	r4, r3, [r6]
 80006c4:	4639      	mov	r1, r7
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0xbe>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	f000 80eb 	beq.w	80008aa <__udivmoddi4+0x286>
 80006d4:	2700      	movs	r7, #0
 80006d6:	e9c6 0100 	strd	r0, r1, [r6]
 80006da:	4638      	mov	r0, r7
 80006dc:	4639      	mov	r1, r7
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f783 	clz	r7, r3
 80006e6:	2f00      	cmp	r7, #0
 80006e8:	d147      	bne.n	800077a <__udivmoddi4+0x156>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xd0>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80fa 	bhi.w	80008e8 <__udivmoddi4+0x2c4>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0303 	sbc.w	r3, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	4698      	mov	r8, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d0e0      	beq.n	80006c4 <__udivmoddi4+0xa0>
 8000702:	e9c6 4800 	strd	r4, r8, [r6]
 8000706:	e7dd      	b.n	80006c4 <__udivmoddi4+0xa0>
 8000708:	b902      	cbnz	r2, 800070c <__udivmoddi4+0xe8>
 800070a:	deff      	udf	#255	; 0xff
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	2a00      	cmp	r2, #0
 8000712:	f040 808f 	bne.w	8000834 <__udivmoddi4+0x210>
 8000716:	1b49      	subs	r1, r1, r5
 8000718:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071c:	fa1f f885 	uxth.w	r8, r5
 8000720:	2701      	movs	r7, #1
 8000722:	fbb1 fcfe 	udiv	ip, r1, lr
 8000726:	0c23      	lsrs	r3, r4, #16
 8000728:	fb0e 111c 	mls	r1, lr, ip, r1
 800072c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000730:	fb08 f10c 	mul.w	r1, r8, ip
 8000734:	4299      	cmp	r1, r3
 8000736:	d907      	bls.n	8000748 <__udivmoddi4+0x124>
 8000738:	18eb      	adds	r3, r5, r3
 800073a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073e:	d202      	bcs.n	8000746 <__udivmoddi4+0x122>
 8000740:	4299      	cmp	r1, r3
 8000742:	f200 80cd 	bhi.w	80008e0 <__udivmoddi4+0x2bc>
 8000746:	4684      	mov	ip, r0
 8000748:	1a59      	subs	r1, r3, r1
 800074a:	b2a3      	uxth	r3, r4
 800074c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000750:	fb0e 1410 	mls	r4, lr, r0, r1
 8000754:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000758:	fb08 f800 	mul.w	r8, r8, r0
 800075c:	45a0      	cmp	r8, r4
 800075e:	d907      	bls.n	8000770 <__udivmoddi4+0x14c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x14a>
 8000768:	45a0      	cmp	r8, r4
 800076a:	f200 80b6 	bhi.w	80008da <__udivmoddi4+0x2b6>
 800076e:	4618      	mov	r0, r3
 8000770:	eba4 0408 	sub.w	r4, r4, r8
 8000774:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000778:	e79f      	b.n	80006ba <__udivmoddi4+0x96>
 800077a:	f1c7 0c20 	rsb	ip, r7, #32
 800077e:	40bb      	lsls	r3, r7
 8000780:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000784:	ea4e 0e03 	orr.w	lr, lr, r3
 8000788:	fa01 f407 	lsl.w	r4, r1, r7
 800078c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000790:	fa21 f30c 	lsr.w	r3, r1, ip
 8000794:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000798:	4325      	orrs	r5, r4
 800079a:	fbb3 f9f8 	udiv	r9, r3, r8
 800079e:	0c2c      	lsrs	r4, r5, #16
 80007a0:	fb08 3319 	mls	r3, r8, r9, r3
 80007a4:	fa1f fa8e 	uxth.w	sl, lr
 80007a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007ac:	fb09 f40a 	mul.w	r4, r9, sl
 80007b0:	429c      	cmp	r4, r3
 80007b2:	fa02 f207 	lsl.w	r2, r2, r7
 80007b6:	fa00 f107 	lsl.w	r1, r0, r7
 80007ba:	d90b      	bls.n	80007d4 <__udivmoddi4+0x1b0>
 80007bc:	eb1e 0303 	adds.w	r3, lr, r3
 80007c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c4:	f080 8087 	bcs.w	80008d6 <__udivmoddi4+0x2b2>
 80007c8:	429c      	cmp	r4, r3
 80007ca:	f240 8084 	bls.w	80008d6 <__udivmoddi4+0x2b2>
 80007ce:	f1a9 0902 	sub.w	r9, r9, #2
 80007d2:	4473      	add	r3, lr
 80007d4:	1b1b      	subs	r3, r3, r4
 80007d6:	b2ad      	uxth	r5, r5
 80007d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80007dc:	fb08 3310 	mls	r3, r8, r0, r3
 80007e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e8:	45a2      	cmp	sl, r4
 80007ea:	d908      	bls.n	80007fe <__udivmoddi4+0x1da>
 80007ec:	eb1e 0404 	adds.w	r4, lr, r4
 80007f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f4:	d26b      	bcs.n	80008ce <__udivmoddi4+0x2aa>
 80007f6:	45a2      	cmp	sl, r4
 80007f8:	d969      	bls.n	80008ce <__udivmoddi4+0x2aa>
 80007fa:	3802      	subs	r0, #2
 80007fc:	4474      	add	r4, lr
 80007fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000802:	fba0 8902 	umull	r8, r9, r0, r2
 8000806:	eba4 040a 	sub.w	r4, r4, sl
 800080a:	454c      	cmp	r4, r9
 800080c:	46c2      	mov	sl, r8
 800080e:	464b      	mov	r3, r9
 8000810:	d354      	bcc.n	80008bc <__udivmoddi4+0x298>
 8000812:	d051      	beq.n	80008b8 <__udivmoddi4+0x294>
 8000814:	2e00      	cmp	r6, #0
 8000816:	d069      	beq.n	80008ec <__udivmoddi4+0x2c8>
 8000818:	ebb1 050a 	subs.w	r5, r1, sl
 800081c:	eb64 0403 	sbc.w	r4, r4, r3
 8000820:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000824:	40fd      	lsrs	r5, r7
 8000826:	40fc      	lsrs	r4, r7
 8000828:	ea4c 0505 	orr.w	r5, ip, r5
 800082c:	e9c6 5400 	strd	r5, r4, [r6]
 8000830:	2700      	movs	r7, #0
 8000832:	e747      	b.n	80006c4 <__udivmoddi4+0xa0>
 8000834:	f1c2 0320 	rsb	r3, r2, #32
 8000838:	fa20 f703 	lsr.w	r7, r0, r3
 800083c:	4095      	lsls	r5, r2
 800083e:	fa01 f002 	lsl.w	r0, r1, r2
 8000842:	fa21 f303 	lsr.w	r3, r1, r3
 8000846:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800084a:	4338      	orrs	r0, r7
 800084c:	0c01      	lsrs	r1, r0, #16
 800084e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000852:	fa1f f885 	uxth.w	r8, r5
 8000856:	fb0e 3317 	mls	r3, lr, r7, r3
 800085a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085e:	fb07 f308 	mul.w	r3, r7, r8
 8000862:	428b      	cmp	r3, r1
 8000864:	fa04 f402 	lsl.w	r4, r4, r2
 8000868:	d907      	bls.n	800087a <__udivmoddi4+0x256>
 800086a:	1869      	adds	r1, r5, r1
 800086c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000870:	d22f      	bcs.n	80008d2 <__udivmoddi4+0x2ae>
 8000872:	428b      	cmp	r3, r1
 8000874:	d92d      	bls.n	80008d2 <__udivmoddi4+0x2ae>
 8000876:	3f02      	subs	r7, #2
 8000878:	4429      	add	r1, r5
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	b281      	uxth	r1, r0
 800087e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000882:	fb0e 3310 	mls	r3, lr, r0, r3
 8000886:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088a:	fb00 f308 	mul.w	r3, r0, r8
 800088e:	428b      	cmp	r3, r1
 8000890:	d907      	bls.n	80008a2 <__udivmoddi4+0x27e>
 8000892:	1869      	adds	r1, r5, r1
 8000894:	f100 3cff 	add.w	ip, r0, #4294967295
 8000898:	d217      	bcs.n	80008ca <__udivmoddi4+0x2a6>
 800089a:	428b      	cmp	r3, r1
 800089c:	d915      	bls.n	80008ca <__udivmoddi4+0x2a6>
 800089e:	3802      	subs	r0, #2
 80008a0:	4429      	add	r1, r5
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a8:	e73b      	b.n	8000722 <__udivmoddi4+0xfe>
 80008aa:	4637      	mov	r7, r6
 80008ac:	4630      	mov	r0, r6
 80008ae:	e709      	b.n	80006c4 <__udivmoddi4+0xa0>
 80008b0:	4607      	mov	r7, r0
 80008b2:	e6e7      	b.n	8000684 <__udivmoddi4+0x60>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6fb      	b.n	80006b0 <__udivmoddi4+0x8c>
 80008b8:	4541      	cmp	r1, r8
 80008ba:	d2ab      	bcs.n	8000814 <__udivmoddi4+0x1f0>
 80008bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80008c0:	eb69 020e 	sbc.w	r2, r9, lr
 80008c4:	3801      	subs	r0, #1
 80008c6:	4613      	mov	r3, r2
 80008c8:	e7a4      	b.n	8000814 <__udivmoddi4+0x1f0>
 80008ca:	4660      	mov	r0, ip
 80008cc:	e7e9      	b.n	80008a2 <__udivmoddi4+0x27e>
 80008ce:	4618      	mov	r0, r3
 80008d0:	e795      	b.n	80007fe <__udivmoddi4+0x1da>
 80008d2:	4667      	mov	r7, ip
 80008d4:	e7d1      	b.n	800087a <__udivmoddi4+0x256>
 80008d6:	4681      	mov	r9, r0
 80008d8:	e77c      	b.n	80007d4 <__udivmoddi4+0x1b0>
 80008da:	3802      	subs	r0, #2
 80008dc:	442c      	add	r4, r5
 80008de:	e747      	b.n	8000770 <__udivmoddi4+0x14c>
 80008e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e4:	442b      	add	r3, r5
 80008e6:	e72f      	b.n	8000748 <__udivmoddi4+0x124>
 80008e8:	4638      	mov	r0, r7
 80008ea:	e708      	b.n	80006fe <__udivmoddi4+0xda>
 80008ec:	4637      	mov	r7, r6
 80008ee:	e6e9      	b.n	80006c4 <__udivmoddi4+0xa0>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <MVCD_delay_us>:

#define RST_PIN GPIO_PIN_14
#define RST_PORT GPIOF

void MVCD_delay_us (uint16_t us)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MVCD_delay_us+0x2c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000906:	bf00      	nop
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <MVCD_delay_us+0x2c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3f9      	bcc.n	8000908 <MVCD_delay_us+0x14>
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	200008e0 	.word	0x200008e0

08000924 <MVCD_SendByte_SPI>:

void MVCD_SendByte_SPI(uint8_t byte)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e023      	b.n	800097c <MVCD_SendByte_SPI+0x58>
	{
		if((byte<<i)&0x80)
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d006      	beq.n	8000952 <MVCD_SendByte_SPI+0x2e>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <MVCD_SendByte_SPI+0x68>)
 800094c:	f001 ff1a 	bl	8002784 <HAL_GPIO_WritePin>
 8000950:	e005      	b.n	800095e <MVCD_SendByte_SPI+0x3a>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MVCD_SendByte_SPI+0x68>)
 800095a:	f001 ff13 	bl	8002784 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <MVCD_SendByte_SPI+0x6c>)
 8000966:	f001 ff0d 	bl	8002784 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MVCD_SendByte_SPI+0x6c>)
 8000972:	f001 ff07 	bl	8002784 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b07      	cmp	r3, #7
 8000980:	ddd8      	ble.n	8000934 <MVCD_SendByte_SPI+0x10>

	}
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40021400 	.word	0x40021400

08000994 <MVCD_ST7920_Send>:

void MVCD_ST7920_Send (uint8_t data, int modflag) //modflag - (data 1), (cmd 0)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MVCD_ST7920_Send+0x60>)
 80009a8:	f001 feec 	bl	8002784 <HAL_GPIO_WritePin>

	MVCD_SendByte_SPI(0xf8+(modflag<<1));  // send the SYNC + RS(1)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	3b08      	subs	r3, #8
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffb3 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI(data&0xf0);  // send the higher nibble first
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f023 030f 	bic.w	r3, r3, #15
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffac 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI((data<<4)&0xf0);  // send the lower nibble
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffa6 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_delay_us(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f7ff ff8b 	bl	80008f4 <MVCD_delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MVCD_ST7920_Send+0x60>)
 80009e6:	f001 fecd 	bl	8002784 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <MVCD_ST7920_baseinit>:

void MVCD_ST7920_baseinit(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MVCD_ST7920_baseinit+0x94>)
 8000a04:	f001 febe 	bl	8002784 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 ff9b 	bl	8001944 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a14:	481d      	ldr	r0, [pc, #116]	; (8000a8c <MVCD_ST7920_baseinit+0x94>)
 8000a16:	f001 feb5 	bl	8002784 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f000 ff92 	bl	8001944 <HAL_Delay>


	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000a20:	2100      	movs	r1, #0
 8000a22:	2030      	movs	r0, #48	; 0x30
 8000a24:	f7ff ffb6 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  //  >100us delay
 8000a28:	206e      	movs	r0, #110	; 0x6e
 8000a2a:	f7ff ff63 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2030      	movs	r0, #48	; 0x30
 8000a32:	f7ff ffaf 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(40);  // >37us delay
 8000a36:	2028      	movs	r0, #40	; 0x28
 8000a38:	f7ff ff5c 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x08,CMD);  // D=0, C=0, B=0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2008      	movs	r0, #8
 8000a40:	f7ff ffa8 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  // >100us delay
 8000a44:	206e      	movs	r0, #110	; 0x6e
 8000a46:	f7ff ff55 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x01,CMD);  // clear screen
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ffa1 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(12);  // >10 ms delay
 8000a52:	200c      	movs	r0, #12
 8000a54:	f000 ff76 	bl	8001944 <HAL_Delay>


	MVCD_ST7920_Send(0x06,CMD);  // cursor increment right no shift
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f7ff ff9a 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 ff6f 	bl	8001944 <HAL_Delay>

	MVCD_ST7920_Send(0x0C,CMD);  // D=1, C=0, B=0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200c      	movs	r0, #12
 8000a6a:	f7ff ff93 	bl	8000994 <MVCD_ST7920_Send>
    HAL_Delay(1);  // 1ms delay
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 ff68 	bl	8001944 <HAL_Delay>

    MVCD_ST7920_Send(0x02,CMD);  // return to home
 8000a74:	2100      	movs	r1, #0
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff ff8c 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 ff61 	bl	8001944 <HAL_Delay>
	HAL_Delay(2);
 8000a82:	2002      	movs	r0, #2
 8000a84:	f000 ff5e 	bl	8001944 <HAL_Delay>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021400 	.word	0x40021400

08000a90 <MVCD_ST7920_GraphicMode>:

void MVCD_ST7920_GraphicMode (_Bool enable)   // 1-enable, 0-disable
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	if (enable == ON)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d015      	beq.n	8000acc <MVCD_ST7920_GraphicMode+0x3c>
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2030      	movs	r0, #48	; 0x30
 8000aa4:	f7ff ff76 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 ff4b 	bl	8001944 <HAL_Delay>
		MVCD_ST7920_Send(0x34,CMD);  // switch to Extended instructions
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2034      	movs	r0, #52	; 0x34
 8000ab2:	f7ff ff6f 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 ff44 	bl	8001944 <HAL_Delay>
		MVCD_ST7920_Send(0x36,CMD);  // enable graphics
 8000abc:	2100      	movs	r1, #0
 8000abe:	2036      	movs	r0, #54	; 0x36
 8000ac0:	f7ff ff68 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 ff3d 	bl	8001944 <HAL_Delay>
	else if (enable == OFF)
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
		HAL_Delay (1);
	}
}
 8000aca:	e00c      	b.n	8000ae6 <MVCD_ST7920_GraphicMode+0x56>
	else if (enable == OFF)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <MVCD_ST7920_GraphicMode+0x56>
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2030      	movs	r0, #48	; 0x30
 8000adc:	f7ff ff5a 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 ff2f 	bl	8001944 <HAL_Delay>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MVCD_dot_xy>:


void MVCD_dot_xy(int x,int y){
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    int flx = (int)floor(x/16);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da00      	bge.n	8000b02 <MVCD_dot_xy+0x12>
 8000b00:	330f      	adds	r3, #15
 8000b02:	111b      	asrs	r3, r3, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fcc3 	bl	8000490 <__aeabi_i2d>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460c      	mov	r4, r1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	4621      	mov	r1, r4
 8000b12:	f7ff fd27 	bl	8000564 <__aeabi_d2iz>
 8000b16:	4603      	mov	r3, r0
 8000b18:	60fb      	str	r3, [r7, #12]
    prv_val[flx][y] |= (0x8000 >> x%16);
 8000b1a:	493a      	ldr	r1, [pc, #232]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	019a      	lsls	r2, r3, #6
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4259      	negs	r1, r3
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	f001 010f 	and.w	r1, r1, #15
 8000b34:	bf58      	it	pl
 8000b36:	424b      	negpl	r3, r1
 8000b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3c:	fa41 f303 	asr.w	r3, r1, r3
 8000b40:	431a      	orrs	r2, r3
 8000b42:	4830      	ldr	r0, [pc, #192]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0199      	lsls	r1, r3, #6
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    MVCD_ST7920_Send(0x36, CMD);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f7ff ff1e 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+(y % 32), CMD);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	425a      	negs	r2, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	f002 021f 	and.w	r2, r2, #31
 8000b64:	bf58      	it	pl
 8000b66:	4253      	negpl	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	3b80      	subs	r3, #128	; 0x80
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff0f 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+ (y / 32) * 8 + floor(x/16), CMD);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da00      	bge.n	8000b7e <MVCD_dot_xy+0x8e>
 8000b7c:	331f      	adds	r3, #31
 8000b7e:	115b      	asrs	r3, r3, #5
 8000b80:	3310      	adds	r3, #16
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc83 	bl	8000490 <__aeabi_i2d>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	460d      	mov	r5, r1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da00      	bge.n	8000b96 <MVCD_dot_xy+0xa6>
 8000b94:	330f      	adds	r3, #15
 8000b96:	111b      	asrs	r3, r3, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc79 	bl	8000490 <__aeabi_i2d>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	f7ff fb27 	bl	80001f8 <__adddf3>
 8000baa:	4603      	mov	r3, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f7ff fcff 	bl	80005b4 <__aeabi_d2uiz>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fee9 	bl	8000994 <MVCD_ST7920_Send>

    MVCD_ST7920_Send(0x30, CMD);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2030      	movs	r0, #48	; 0x30
 8000bc6:	f7ff fee5 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	019a      	lsls	r2, r3, #6
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fed8 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	019a      	lsls	r2, r3, #6
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fecc 	bl	8000994 <MVCD_ST7920_Send>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	20000098 	.word	0x20000098

08000c08 <MVCD_LCDclear>:

void MVCD_LCDclear(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    for(int j=0;j<8;j++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e044      	b.n	8000c9e <MVCD_LCDclear+0x96>
        for(int i=0;i<64;i++){
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	e03b      	b.n	8000c92 <MVCD_LCDclear+0x8a>
        	MVCD_ST7920_Send(0x36, CMD);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f7ff feb9 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+(i%32), CMD);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	425a      	negs	r2, r3
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	f002 021f 	and.w	r2, r2, #31
 8000c2e:	bf58      	it	pl
 8000c30:	4253      	negpl	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3b80      	subs	r3, #128	; 0x80
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff feaa 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+((i/32)*8+j), CMD);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da00      	bge.n	8000c48 <MVCD_LCDclear+0x40>
 8000c46:	331f      	adds	r3, #31
 8000c48:	115b      	asrs	r3, r3, #5
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b80      	subs	r3, #128	; 0x80
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe98 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x30, CMD);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2030      	movs	r0, #48	; 0x30
 8000c68:	f7ff fe94 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe90 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fe8c 	bl	8000994 <MVCD_ST7920_Send>
        	prv_val[j][i] = 0;
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <MVCD_LCDclear+0xa4>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	019a      	lsls	r2, r3, #6
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	2200      	movs	r2, #0
 8000c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int i=0;i<64;i++){
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b3f      	cmp	r3, #63	; 0x3f
 8000c96:	ddc0      	ble.n	8000c1a <MVCD_LCDclear+0x12>
    for(int j=0;j<8;j++){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	ddb7      	ble.n	8000c14 <MVCD_LCDclear+0xc>
        }
    }

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000098 	.word	0x20000098

08000cb0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <MX_ETH_Init+0x7c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	22e1      	movs	r2, #225	; 0xe1
 8000ce0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_ETH_Init+0x78>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_ETH_Init+0x78>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	3305      	adds	r3, #5
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_ETH_Init+0x78>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_ETH_Init+0x78>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_ETH_Init+0x78>)
 8000d0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d12:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_ETH_Init+0x78>)
 8000d16:	f000 ff1d 	bl	8001b54 <HAL_ETH_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000d20:	f000 fa94 	bl	800124c <Error_Handler>
  }

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000898 	.word	0x20000898
 8000d2c:	40028000 	.word	0x40028000

08000d30 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a55      	ldr	r2, [pc, #340]	; (8000ea4 <HAL_ETH_MspInit+0x174>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	f040 80a4 	bne.w	8000e9c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a36      	ldr	r2, [pc, #216]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_ETH_MspInit+0x178>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e18:	2332      	movs	r3, #50	; 0x32
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e28:	230b      	movs	r3, #11
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	481e      	ldr	r0, [pc, #120]	; (8000eac <HAL_ETH_MspInit+0x17c>)
 8000e34:	f001 fafc 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e38:	2386      	movs	r3, #134	; 0x86
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e48:	230b      	movs	r3, #11
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <HAL_ETH_MspInit+0x180>)
 8000e54:	f001 faec 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <HAL_ETH_MspInit+0x184>)
 8000e76:	f001 fadb 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000e98:	f001 faca 	bl	8002430 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40028000 	.word	0x40028000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40021800 	.word	0x40021800

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b6b      	ldr	r3, [pc, #428]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b67      	ldr	r3, [pc, #412]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a66      	ldr	r2, [pc, #408]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b64      	ldr	r3, [pc, #400]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a5f      	ldr	r2, [pc, #380]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a58      	ldr	r2, [pc, #352]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b56      	ldr	r3, [pc, #344]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b52      	ldr	r3, [pc, #328]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a51      	ldr	r2, [pc, #324]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b48      	ldr	r3, [pc, #288]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a43      	ldr	r2, [pc, #268]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_GPIO_Init+0x1d4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fb8:	4836      	ldr	r0, [pc, #216]	; (8001094 <MX_GPIO_Init+0x1d8>)
 8000fba:	f001 fbe3 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fc4:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_GPIO_Init+0x1dc>)
 8000fc6:	f001 fbdd 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <MX_GPIO_Init+0x1e0>)
 8000fd2:	f001 fbd7 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	4831      	ldr	r0, [pc, #196]	; (80010a0 <MX_GPIO_Init+0x1e4>)
 8000fdc:	f001 fbd2 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_GPIO_Init+0x1e8>)
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	482c      	ldr	r0, [pc, #176]	; (80010a8 <MX_GPIO_Init+0x1ec>)
 8000ff6:	f001 fa1b 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ffa:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4820      	ldr	r0, [pc, #128]	; (8001094 <MX_GPIO_Init+0x1d8>)
 8001014:	f001 fa0c 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001018:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	4819      	ldr	r0, [pc, #100]	; (8001098 <MX_GPIO_Init+0x1dc>)
 8001032:	f001 f9fd 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001036:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <MX_GPIO_Init+0x1e0>)
 8001050:	f001 f9ee 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001054:	2340      	movs	r3, #64	; 0x40
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_GPIO_Init+0x1e4>)
 800106c:	f001 f9e0 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_GPIO_Init+0x1e4>)
 8001084:	f001 f9d4 	bl	8002430 <HAL_GPIO_Init>

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020400 	.word	0x40020400
 8001098:	40021400 	.word	0x40021400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021800 	.word	0x40021800
 80010a4:	10110000 	.word	0x10110000
 80010a8:	40020800 	.word	0x40020800

080010ac <_write>:
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	230a      	movs	r3, #10
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <_write+0x24>)
 80010c2:	f002 fc1c 	bl	80038fe <HAL_UART_Transmit>
}
 80010c6:	bf00      	nop
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000920 	.word	0x20000920

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fbc1 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f849 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff feeb 	bl	8000ebc <MX_GPIO_Init>
  MX_ETH_Init();
 80010e6:	f7ff fde3 	bl	8000cb0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010ea:	f000 fa3d 	bl	8001568 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010ee:	f000 fb05 	bl	80016fc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80010f2:	f000 f99d 	bl	8001430 <MX_TIM1_Init>
  MX_UART4_Init();
 80010f6:	f000 fa0d 	bl	8001514 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80010fa:	481b      	ldr	r0, [pc, #108]	; (8001168 <main+0x94>)
 80010fc:	f002 f921 	bl	8003342 <HAL_TIM_Base_Start>
  MVCD_ST7920_baseinit();
 8001100:	f7ff fc7a 	bl	80009f8 <MVCD_ST7920_baseinit>
  MVCD_ST7920_GraphicMode(ON);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fcc3 	bl	8000a90 <MVCD_ST7920_GraphicMode>

  uint8_t a = 'a';
 800110a:	2361      	movs	r3, #97	; 0x61
 800110c:	71fb      	strb	r3, [r7, #7]
  uint8_t s = 'k';
 800110e:	236b      	movs	r3, #107	; 0x6b
 8001110:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  for(int x=0;x<128;x++){
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e01c      	b.n	8001152 <main+0x7e>
		  for(int y=0;y<64;y++){
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e013      	b.n	8001146 <main+0x72>
			  MVCD_dot_xy(x % 2 == 0 ? x : 128 - x, y);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <main+0x5c>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800112e:	e000      	b.n	8001132 <main+0x5e>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fcdb 	bl	8000af0 <MVCD_dot_xy>
			  printf("why so serious?\n");
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <main+0x98>)
 800113c:	f003 fb88 	bl	8004850 <puts>
		  for(int y=0;y<64;y++){
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3301      	adds	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b3f      	cmp	r3, #63	; 0x3f
 800114a:	dde8      	ble.n	800111e <main+0x4a>
	  for(int x=0;x<128;x++){
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b7f      	cmp	r3, #127	; 0x7f
 8001156:	dddf      	ble.n	8001118 <main+0x44>
		  }
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001158:	2101      	movs	r1, #1
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <main+0x9c>)
 800115c:	f001 fb2b 	bl	80027b6 <HAL_GPIO_TogglePin>
	  MVCD_LCDclear();
 8001160:	f7ff fd52 	bl	8000c08 <MVCD_LCDclear>
  {
 8001164:	e7d5      	b.n	8001112 <main+0x3e>
 8001166:	bf00      	nop
 8001168:	200008e0 	.word	0x200008e0
 800116c:	08005080 	.word	0x08005080
 8001170:	40020400 	.word	0x40020400

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fb00 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemClock_Config+0xd0>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <SystemClock_Config+0xd0>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemClock_Config+0xd0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xd4>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011ec:	2348      	movs	r3, #72	; 0x48
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011f4:	2303      	movs	r3, #3
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fc13 	bl	8002a28 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001208:	f000 f820 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2102      	movs	r1, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fe6c 	bl	8002f08 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001236:	f000 f809 	bl	800124c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_MspInit+0x4c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 fb00 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
	}

return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x50>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x16>
		heap_end = &end;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <_sbrk+0x50>)
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <_sbrk+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <_sbrk+0x50>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <_sbrk+0x50>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	466a      	mov	r2, sp
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d907      	bls.n	80013e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013d6:	f003 f9ad 	bl	8004734 <__errno>
 80013da:	4602      	mov	r2, r0
 80013dc:	230c      	movs	r3, #12
 80013de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e006      	b.n	80013f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_sbrk+0x50>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a03      	ldr	r2, [pc, #12]	; (80013fc <_sbrk+0x50>)
 80013f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000008c 	.word	0x2000008c
 8001400:	20000db0 	.word	0x20000db0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <SystemInit+0x28>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <SystemInit+0x28>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SystemInit+0x28>)
 800141a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141e:	609a      	str	r2, [r3, #8]
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_TIM1_Init+0x98>)
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <MX_TIM1_Init+0x9c>)
 8001450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001454:	2247      	movs	r2, #71	; 0x47
 8001456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM1_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM1_Init+0x98>)
 800147a:	f001 ff37 	bl	80032ec <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001484:	f7ff fee2 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001496:	f001 ff78 	bl	800338a <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014a0:	f7ff fed4 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM1_Init+0x98>)
 80014b2:	f002 f95b 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014bc:	f7ff fec6 	bl	800124c <Error_Handler>
  }

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200008e0 	.word	0x200008e0
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_TIM_Base_MspInit+0x3c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10d      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40010000 	.word	0x40010000
 8001510:	40023800 	.word	0x40023800

08001514 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_UART4_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_UART4_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_UART4_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_UART4_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_UART4_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_UART4_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_UART4_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_UART4_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_UART4_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_UART4_Init+0x4c>)
 800154c:	f002 f98a 	bl	8003864 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001556:	f7ff fe79 	bl	800124c <Error_Handler>
  }

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000960 	.word	0x20000960
 8001564:	40004c00 	.word	0x40004c00

08001568 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_USART3_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART3_UART_Init+0x4c>)
 80015a0:	f002 f960 	bl	8003864 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f7ff fe4f 	bl	800124c <Error_Handler>
  }

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000920 	.word	0x20000920
 80015b8:	40004800 	.word	0x40004800

080015bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_UART_MspInit+0x128>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d14b      	bne.n	8001676 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80015e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001642:	2308      	movs	r3, #8
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4827      	ldr	r0, [pc, #156]	; (80016ec <HAL_UART_MspInit+0x130>)
 800164e:	f000 feef 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001664:	2308      	movs	r3, #8
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4820      	ldr	r0, [pc, #128]	; (80016f0 <HAL_UART_MspInit+0x134>)
 8001670:	f000 fede 	bl	8002430 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001674:	e031      	b.n	80016da <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_UART_MspInit+0x138>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d12c      	bne.n	80016da <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 800168a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_UART_MspInit+0x12c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ca:	2307      	movs	r3, #7
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <HAL_UART_MspInit+0x13c>)
 80016d6:	f000 feab 	bl	8002430 <HAL_GPIO_Init>
}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40004c00 	.word	0x40004c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40020c00 	.word	0x40020c00

080016fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001706:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170a:	2204      	movs	r2, #4
 800170c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001710:	2202      	movs	r2, #2
 8001712:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171c:	2202      	movs	r2, #2
 800171e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	2201      	movs	r2, #1
 8001724:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001734:	2201      	movs	r2, #1
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001740:	f001 f854 	bl	80027ec <HAL_PCD_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800174a:	f7ff fd7f 	bl	800124c <Error_Handler>
  }

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200009a0 	.word	0x200009a0

08001758 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001778:	d13f      	bne.n	80017fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_PCD_MspInit+0xac>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_PCD_MspInit+0xac>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_PCD_MspInit+0xac>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001796:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a8:	230a      	movs	r3, #10
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4815      	ldr	r0, [pc, #84]	; (8001808 <HAL_PCD_MspInit+0xb0>)
 80017b4:	f000 fe3c 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <HAL_PCD_MspInit+0xb0>)
 80017ce:	f000 fe2f 	bl	8002430 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_PCD_MspInit+0xac>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_PCD_MspInit+0xac>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6353      	str	r3, [r2, #52]	; 0x34
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_PCD_MspInit+0xac>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_PCD_MspInit+0xac>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_PCD_MspInit+0xac>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001810:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001812:	e003      	b.n	800181c <LoopCopyDataInit>

08001814 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001816:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001818:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800181a:	3104      	adds	r1, #4

0800181c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001820:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001824:	d3f6      	bcc.n	8001814 <CopyDataInit>
  ldr  r2, =_sbss
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001828:	e002      	b.n	8001830 <LoopFillZerobss>

0800182a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800182a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800182c:	f842 3b04 	str.w	r3, [r2], #4

08001830 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001832:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001834:	d3f9      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001836:	f7ff fde5 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183a:	f002 ff81 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fc49 	bl	80010d4 <main>
  bx  lr    
 8001842:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001844:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001848:	0800511c 	.word	0x0800511c
  ldr  r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001850:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001854:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001858:	20000db0 	.word	0x20000db0

0800185c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_Init+0x40>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_Init+0x40>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x40>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f92f 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fce2 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f939 	bl	8001b3a <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 f90f 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008
 8001928:	20000da8 	.word	0x20000da8

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000da8 	.word	0x20000da8

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_Delay+0x40>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000008 	.word	0x20000008

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff47 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff5c 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffb0 	bl	8001aa8 <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001b64:	4baa      	ldr	r3, [pc, #680]	; (8001e10 <HAL_ETH_Init+0x2bc>)
 8001b66:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e185      	b.n	8001e86 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff f8ce 	bl	8000d30 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	4b9e      	ldr	r3, [pc, #632]	; (8001e14 <HAL_ETH_Init+0x2c0>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	4a9d      	ldr	r2, [pc, #628]	; (8001e14 <HAL_ETH_Init+0x2c0>)
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba4:	4b9b      	ldr	r3, [pc, #620]	; (8001e14 <HAL_ETH_Init+0x2c0>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bb0:	4b99      	ldr	r3, [pc, #612]	; (8001e18 <HAL_ETH_Init+0x2c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_ETH_Init+0x2c4>)
 8001bb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bbc:	4b96      	ldr	r3, [pc, #600]	; (8001e18 <HAL_ETH_Init+0x2c4>)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4994      	ldr	r1, [pc, #592]	; (8001e18 <HAL_ETH_Init+0x2c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001be2:	f7ff fea3 	bl	800192c <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001be8:	e011      	b.n	8001c0e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001bea:	f7ff fe9f 	bl	800192c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bf8:	d909      	bls.n	8001c0e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e13b      	b.n	8001e86 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e4      	bne.n	8001bea <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f023 031c 	bic.w	r3, r3, #28
 8001c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c30:	f001 fb28 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 8001c34:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4a78      	ldr	r2, [pc, #480]	; (8001e1c <HAL_ETH_Init+0x2c8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d908      	bls.n	8001c50 <HAL_ETH_Init+0xfc>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <HAL_ETH_Init+0x2cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d804      	bhi.n	8001c50 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e027      	b.n	8001ca0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_ETH_Init+0x2cc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d908      	bls.n	8001c6a <HAL_ETH_Init+0x116>
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	4a72      	ldr	r2, [pc, #456]	; (8001e24 <HAL_ETH_Init+0x2d0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d804      	bhi.n	8001c6a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f043 030c 	orr.w	r3, r3, #12
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e01a      	b.n	8001ca0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4a6d      	ldr	r2, [pc, #436]	; (8001e24 <HAL_ETH_Init+0x2d0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d903      	bls.n	8001c7a <HAL_ETH_Init+0x126>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4a6c      	ldr	r2, [pc, #432]	; (8001e28 <HAL_ETH_Init+0x2d4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d911      	bls.n	8001c9e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_ETH_Init+0x2d4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d908      	bls.n	8001c94 <HAL_ETH_Init+0x140>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_ETH_Init+0x2d8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d804      	bhi.n	8001c94 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e005      	b.n	8001ca0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	e000      	b.n	8001ca0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c9e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ca8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f956 	bl	8001f60 <HAL_ETH_WritePHYRegister>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001cbe:	6939      	ldr	r1, [r7, #16]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f9b3 	bl	800202c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0d9      	b.n	8001e86 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001cd2:	20ff      	movs	r0, #255	; 0xff
 8001cd4:	f7ff fe36 	bl	8001944 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a7 	beq.w	8001e30 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce2:	f7ff fe23 	bl	800192c <HAL_GetTick>
 8001ce6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	461a      	mov	r2, r3
 8001cee:	2101      	movs	r1, #1
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8cd 	bl	8001e90 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001cf6:	f7ff fe19 	bl	800192c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d90f      	bls.n	8001d28 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d0c:	6939      	ldr	r1, [r7, #16]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f98c 	bl	800202c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ae      	b.n	8001e86 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0da      	beq.n	8001ce8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f911 	bl	8001f60 <HAL_ETH_WritePHYRegister>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d48:	6939      	ldr	r1, [r7, #16]
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f96e 	bl	800202c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e094      	b.n	8001e86 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff fde6 	bl	800192c <HAL_GetTick>
 8001d60:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	461a      	mov	r2, r3
 8001d68:	2101      	movs	r1, #1
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f890 	bl	8001e90 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d70:	f7ff fddc 	bl	800192c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d90f      	bls.n	8001da2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f94f 	bl	800202c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e071      	b.n	8001e86 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0da      	beq.n	8001d62 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	461a      	mov	r2, r3
 8001db2:	211f      	movs	r1, #31
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f86b 	bl	8001e90 <HAL_ETH_ReadPHYRegister>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001dc4:	6939      	ldr	r1, [r7, #16]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f930 	bl	800202c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e056      	b.n	8001e86 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	e002      	b.n	8001df2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e037      	b.n	8001e74 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e032      	b.n	8001e74 <HAL_ETH_Init+0x320>
 8001e0e:	bf00      	nop
 8001e10:	03938700 	.word	0x03938700
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	01312cff 	.word	0x01312cff
 8001e20:	02160ebf 	.word	0x02160ebf
 8001e24:	039386ff 	.word	0x039386ff
 8001e28:	05f5e0ff 	.word	0x05f5e0ff
 8001e2c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f889 	bl	8001f60 <HAL_ETH_WritePHYRegister>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8e6 	bl	800202c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e00c      	b.n	8001e86 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001e6c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e70:	f7ff fd68 	bl	8001944 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e74:	6939      	ldr	r1, [r7, #16]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8d8 	bl	800202c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop

08001e90 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b82      	cmp	r3, #130	; 0x82
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e050      	b.n	8001f58 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2282      	movs	r2, #130	; 0x82
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 031c 	and.w	r3, r3, #28
 8001ecc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8a1b      	ldrh	r3, [r3, #16]
 8001ed2:	02db      	lsls	r3, r3, #11
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	019b      	lsls	r3, r3, #6
 8001ee0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f023 0302 	bic.w	r3, r3, #2
 8001ef0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7ff fd13 	bl	800192c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f08:	e015      	b.n	8001f36 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f0a:	f7ff fd0f 	bl	800192c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d309      	bcc.n	8001f2e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e014      	b.n	8001f58 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b42      	cmp	r3, #66	; 0x42
 8001f80:	d101      	bne.n	8001f86 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
 8001f84:	e04e      	b.n	8002024 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2242      	movs	r2, #66	; 0x42
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 031c 	and.w	r3, r3, #28
 8001f9c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8a1b      	ldrh	r3, [r3, #16]
 8001fa2:	02db      	lsls	r3, r3, #11
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001fac:	897b      	ldrh	r3, [r7, #10]
 8001fae:	019b      	lsls	r3, r3, #6
 8001fb0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fdc:	f7ff fca6 	bl	800192c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fe2:	e015      	b.n	8002010 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001fe4:	f7ff fca2 	bl	800192c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff2:	d309      	bcc.n	8002008 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e00d      	b.n	8002024 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e4      	bne.n	8001fe4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0b0      	sub	sp, #192	; 0xc0
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002048:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002050:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800205a:	2300      	movs	r3, #0
 800205c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002076:	663b      	str	r3, [r7, #96]	; 0x60
 8002078:	e001      	b.n	800207e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800207e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002082:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002088:	2300      	movs	r3, #0
 800208a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002098:	2340      	movs	r3, #64	; 0x40
 800209a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002100:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002104:	4bac      	ldr	r3, [pc, #688]	; (80023b8 <ETH_MACDMAConfig+0x38c>)
 8002106:	4013      	ands	r3, r2
 8002108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800210c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800210e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002110:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002114:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002118:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800211e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002122:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002126:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800212c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002130:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002134:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002138:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800213a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800213c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800213e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002140:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002142:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002154:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff fbef 	bl	8001944 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002170:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002174:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002178:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800217a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800217e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002184:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002186:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800218a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800218c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002190:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002194:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800219c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800219e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fbca 	bl	8001944 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021e0:	4013      	ands	r3, r2
 80021e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002202:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002208:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800220a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002228:	2001      	movs	r0, #1
 800222a:	f7ff fb8b 	bl	8001944 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002236:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002238:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800223c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff fb76 	bl	8001944 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002260:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002274:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002286:	2304      	movs	r3, #4
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800228a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800229c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	3318      	adds	r3, #24
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c2:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <ETH_MACDMAConfig+0x390>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	3318      	adds	r3, #24
 8002300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002304:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230e:	3318      	adds	r3, #24
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fb14 	bl	8001944 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	3318      	adds	r3, #24
 8002326:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800232c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002330:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002334:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002338:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800233a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800233c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002342:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002346:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002354:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff faed 	bl	8001944 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002376:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10f      	bne.n	80023a0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	331c      	adds	r3, #28
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	331c      	adds	r3, #28
 800239e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f809 	bl	80023c0 <ETH_MACAddressConfig>
}
 80023ae:	bf00      	nop
 80023b0:	37c0      	adds	r7, #192	; 0xc0
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	ff20810f 	.word	0xff20810f
 80023bc:	f8de3f23 	.word	0xf8de3f23

080023c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3305      	adds	r3, #5
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	3204      	adds	r2, #4
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <ETH_MACAddressConfig+0x68>)
 80023e2:	4413      	add	r3, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3303      	adds	r3, #3
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061a      	lsls	r2, r3, #24
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3302      	adds	r3, #2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4313      	orrs	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <ETH_MACAddressConfig+0x6c>)
 8002412:	4413      	add	r3, r2
 8002414:	461a      	mov	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6013      	str	r3, [r2, #0]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40028040 	.word	0x40028040
 800242c:	40028044 	.word	0x40028044

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e177      	b.n	800273c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8166 	bne.w	8002736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d00b      	beq.n	800248a <HAL_GPIO_Init+0x5a>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247e:	2b11      	cmp	r3, #17
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b12      	cmp	r3, #18
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0xfc>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b12      	cmp	r3, #18
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80c0 	beq.w	8002736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_GPIO_Init+0x320>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a64      	ldr	r2, [pc, #400]	; (8002750 <HAL_GPIO_Init+0x320>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <HAL_GPIO_Init+0x320>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_GPIO_Init+0x324>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a57      	ldr	r2, [pc, #348]	; (8002758 <HAL_GPIO_Init+0x328>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d037      	beq.n	800266e <HAL_GPIO_Init+0x23e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a56      	ldr	r2, [pc, #344]	; (800275c <HAL_GPIO_Init+0x32c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_GPIO_Init+0x23a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a55      	ldr	r2, [pc, #340]	; (8002760 <HAL_GPIO_Init+0x330>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02b      	beq.n	8002666 <HAL_GPIO_Init+0x236>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <HAL_GPIO_Init+0x334>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x232>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a53      	ldr	r2, [pc, #332]	; (8002768 <HAL_GPIO_Init+0x338>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x22e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_GPIO_Init+0x33c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x22a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a51      	ldr	r2, [pc, #324]	; (8002770 <HAL_GPIO_Init+0x340>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x226>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_GPIO_Init+0x344>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x222>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4f      	ldr	r2, [pc, #316]	; (8002778 <HAL_GPIO_Init+0x348>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x21e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4e      	ldr	r2, [pc, #312]	; (800277c <HAL_GPIO_Init+0x34c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x21a>
 8002646:	2309      	movs	r3, #9
 8002648:	e012      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800264a:	230a      	movs	r3, #10
 800264c:	e010      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800264e:	2308      	movs	r3, #8
 8002650:	e00e      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002652:	2307      	movs	r3, #7
 8002654:	e00c      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002656:	2306      	movs	r3, #6
 8002658:	e00a      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800265a:	2305      	movs	r3, #5
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800265e:	2304      	movs	r3, #4
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4934      	ldr	r1, [pc, #208]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_GPIO_Init+0x350>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b2:	4a33      	ldr	r2, [pc, #204]	; (8002780 <HAL_GPIO_Init+0x350>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_GPIO_Init+0x350>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_GPIO_Init+0x350>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_GPIO_Init+0x350>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_GPIO_Init+0x350>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_GPIO_Init+0x350>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_GPIO_Init+0x350>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f ae84 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002744:	bf00      	nop
 8002746:	3724      	adds	r7, #36	; 0x24
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40022000 	.word	0x40022000
 800277c:	40022400 	.word	0x40022400
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	401a      	ands	r2, r3
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d104      	bne.n	80027da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	041a      	lsls	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b08f      	sub	sp, #60	; 0x3c
 80027f0:	af0a      	add	r7, sp, #40	; 0x28
 80027f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e10f      	b.n	8002a1e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe ff9d 	bl	8001758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fd1e 	bl	800427e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	687e      	ldr	r6, [r7, #4]
 800284a:	466d      	mov	r5, sp
 800284c:	f106 0410 	add.w	r4, r6, #16
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800285c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002860:	1d33      	adds	r3, r6, #4
 8002862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f001 fca9 	bl	80041bc <USB_CoreInit>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d0      	b.n	8002a1e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fd0c 	bl	80042a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e04a      	b.n	8002924 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	333d      	adds	r3, #61	; 0x3d
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	333c      	adds	r3, #60	; 0x3c
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	b298      	uxth	r0, r3
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3342      	adds	r3, #66	; 0x42
 80028ca:	4602      	mov	r2, r0
 80028cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3344      	adds	r3, #68	; 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3348      	adds	r3, #72	; 0x48
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3350      	adds	r3, #80	; 0x50
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3301      	adds	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3af      	bcc.n	800288e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3b5      	bcc.n	8002934 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	687e      	ldr	r6, [r7, #4]
 80029d0:	466d      	mov	r5, sp
 80029d2:	f106 0410 	add.w	r4, r6, #16
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e6:	1d33      	adds	r3, r6, #4
 80029e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f001 fc82 	bl	80042f4 <USB_DevInit>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00d      	b.n	8002a1e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fe3f 	bl	800469a <USB_DevDisconnect>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e25b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	4ba3      	ldr	r3, [pc, #652]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b9d      	ldr	r3, [pc, #628]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b99      	ldr	r3, [pc, #612]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e236      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a90      	ldr	r2, [pc, #576]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe ff24 	bl	800192c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe ff20 	bl	800192c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1fb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff10 	bl	800192c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe ff0c 	bl	800192c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1e7      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1bb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4952      	ldr	r1, [pc, #328]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fec5 	bl	800192c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fec1 	bl	800192c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e19c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4940      	ldr	r1, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fea4 	bl	800192c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fea0 	bl	800192c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e17b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d030      	beq.n	8002c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fe84 	bl	800192c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fe80 	bl	800192c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e15b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fe6d 	bl	800192c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe fe69 	bl	800192c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e144      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a0 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fe2f 	bl	800192c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
 8002ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fe22 	bl	800192c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0fd      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a7c      	ldr	r2, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e01c      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x312>
 8002d20:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a76      	ldr	r2, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b74      	ldr	r3, [pc, #464]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a73      	ldr	r2, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d3a:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a70      	ldr	r2, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fde7 	bl	800192c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe fde3 	bl	800192c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0bc      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RCC_OscConfig+0x33a>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fdd1 	bl	800192c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fdcd 	bl	800192c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0a6      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8092 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d05c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d141      	bne.n	8002e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fda1 	bl	800192c <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fd9d 	bl	800192c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e078      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	4933      	ldr	r1, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fd76 	bl	800192c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fd72 	bl	800192c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e04d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x41c>
 8002e62:	e045      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fd5f 	bl	800192c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fd5b 	bl	800192c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e036      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x44a>
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e029      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470060 	.word	0x42470060

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cc      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90c      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b8      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	494d      	ldr	r1, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4934      	ldr	r1, [pc, #208]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fc98 	bl	800192c <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe fc94 	bl	800192c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d20c      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4916      	ldr	r1, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	490e      	ldr	r1, [pc, #56]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308e:	f000 f821 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003092:	4601      	mov	r1, r0
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	fa21 f303 	lsr.w	r3, r1, r3
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fbf8 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08005090 	.word	0x08005090
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d007      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x32>
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d008      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x38>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 80b4 	bne.w	8003268 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b5e      	ldr	r3, [pc, #376]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003102:	60bb      	str	r3, [r7, #8]
       break;
 8003104:	e0b3      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003108:	60bb      	str	r3, [r7, #8]
      break;
 800310a:	e0b0      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003116:	4b58      	ldr	r3, [pc, #352]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04a      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b55      	ldr	r3, [pc, #340]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	ea03 0501 	and.w	r5, r3, r1
 8003138:	ea04 0602 	and.w	r6, r4, r2
 800313c:	4629      	mov	r1, r5
 800313e:	4632      	mov	r2, r6
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f04f 0400 	mov.w	r4, #0
 8003148:	0154      	lsls	r4, r2, #5
 800314a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	4619      	mov	r1, r3
 8003152:	4622      	mov	r2, r4
 8003154:	1b49      	subs	r1, r1, r5
 8003156:	eb62 0206 	sbc.w	r2, r2, r6
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	f04f 0400 	mov.w	r4, #0
 8003162:	0194      	lsls	r4, r2, #6
 8003164:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	1a5b      	subs	r3, r3, r1
 800316c:	eb64 0402 	sbc.w	r4, r4, r2
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	00e2      	lsls	r2, r4, #3
 800317a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	460b      	mov	r3, r1
 8003182:	4614      	mov	r4, r2
 8003184:	195b      	adds	r3, r3, r5
 8003186:	eb44 0406 	adc.w	r4, r4, r6
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	0262      	lsls	r2, r4, #9
 8003194:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003198:	0259      	lsls	r1, r3, #9
 800319a:	460b      	mov	r3, r1
 800319c:	4614      	mov	r4, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	4621      	mov	r1, r4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4623      	mov	r3, r4
 80031ac:	f7fd fa22 	bl	80005f4 <__aeabi_uldivmod>
 80031b0:	4603      	mov	r3, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e049      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b8:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	f04f 0400 	mov.w	r4, #0
 80031c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	ea03 0501 	and.w	r5, r3, r1
 80031ce:	ea04 0602 	and.w	r6, r4, r2
 80031d2:	4629      	mov	r1, r5
 80031d4:	4632      	mov	r2, r6
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	f04f 0400 	mov.w	r4, #0
 80031de:	0154      	lsls	r4, r2, #5
 80031e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e4:	014b      	lsls	r3, r1, #5
 80031e6:	4619      	mov	r1, r3
 80031e8:	4622      	mov	r2, r4
 80031ea:	1b49      	subs	r1, r1, r5
 80031ec:	eb62 0206 	sbc.w	r2, r2, r6
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	f04f 0400 	mov.w	r4, #0
 80031f8:	0194      	lsls	r4, r2, #6
 80031fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031fe:	018b      	lsls	r3, r1, #6
 8003200:	1a5b      	subs	r3, r3, r1
 8003202:	eb64 0402 	sbc.w	r4, r4, r2
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003214:	00d9      	lsls	r1, r3, #3
 8003216:	460b      	mov	r3, r1
 8003218:	4614      	mov	r4, r2
 800321a:	195b      	adds	r3, r3, r5
 800321c:	eb44 0406 	adc.w	r4, r4, r6
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	02a2      	lsls	r2, r4, #10
 800322a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800322e:	0299      	lsls	r1, r3, #10
 8003230:	460b      	mov	r3, r1
 8003232:	4614      	mov	r4, r2
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	461a      	mov	r2, r3
 8003240:	4623      	mov	r3, r4
 8003242:	f7fd f9d7 	bl	80005f4 <__aeabi_uldivmod>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	60bb      	str	r3, [r7, #8]
      break;
 8003266:	e002      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800326a:	60bb      	str	r3, [r7, #8]
      break;
 800326c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326e:	68bb      	ldr	r3, [r7, #8]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4601      	mov	r1, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5cd3      	ldrb	r3, [r2, r3]
 80032b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	080050a0 	.word	0x080050a0

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	080050a0 	.word	0x080050a0

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e01d      	b.n	800333a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f8dc 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f8e4 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b06      	cmp	r3, #6
 8003362:	d007      	beq.n	8003374 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_ConfigClockSource+0x18>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0a6      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x166>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d067      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x120>
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d80b      	bhi.n	80033f6 <HAL_TIM_ConfigClockSource+0x6c>
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d073      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x140>
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d802      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x62>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06f      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033ea:	e078      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d06c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x140>
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d06a      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033f4:	e073      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033f6:	2b70      	cmp	r3, #112	; 0x70
 80033f8:	d00d      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x8c>
 80033fa:	2b70      	cmp	r3, #112	; 0x70
 80033fc:	d804      	bhi.n	8003408 <HAL_TIM_ConfigClockSource+0x7e>
 80033fe:	2b50      	cmp	r3, #80	; 0x50
 8003400:	d033      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xe0>
 8003402:	2b60      	cmp	r3, #96	; 0x60
 8003404:	d041      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003406:	e06a      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d066      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x152>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	d017      	beq.n	8003444 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003414:	e063      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f000 f981 	bl	800372c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003438:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
      break;
 8003442:	e04c      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f000 f96a 	bl	800372c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003466:	609a      	str	r2, [r3, #8]
      break;
 8003468:	e039      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	461a      	mov	r2, r3
 8003478:	f000 f8de 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2150      	movs	r1, #80	; 0x50
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f937 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 8003488:	e029      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f000 f8fd 	bl	8003696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2160      	movs	r1, #96	; 0x60
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f927 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034a8:	e019      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 f8be 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f917 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034c8:	e009      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 f90e 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034da:	e000      	b.n	80034de <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a40      	ldr	r2, [pc, #256]	; (800360c <TIM_Base_SetConfig+0x114>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d00f      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <TIM_Base_SetConfig+0x118>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <TIM_Base_SetConfig+0x11c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <TIM_Base_SetConfig+0x120>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3a      	ldr	r2, [pc, #232]	; (800361c <TIM_Base_SetConfig+0x124>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2f      	ldr	r2, [pc, #188]	; (800360c <TIM_Base_SetConfig+0x114>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d027      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <TIM_Base_SetConfig+0x118>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d023      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <TIM_Base_SetConfig+0x11c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <TIM_Base_SetConfig+0x120>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0x124>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d017      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a28      	ldr	r2, [pc, #160]	; (8003620 <TIM_Base_SetConfig+0x128>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a27      	ldr	r2, [pc, #156]	; (8003624 <TIM_Base_SetConfig+0x12c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <TIM_Base_SetConfig+0x130>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a25      	ldr	r2, [pc, #148]	; (800362c <TIM_Base_SetConfig+0x134>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <TIM_Base_SetConfig+0x138>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <TIM_Base_SetConfig+0x13c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <TIM_Base_SetConfig+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0xf8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <TIM_Base_SetConfig+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d103      	bne.n	80035f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	615a      	str	r2, [r3, #20]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40010400 	.word	0x40010400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40001800 	.word	0x40001800
 8003630:	40001c00 	.word	0x40001c00
 8003634:	40002000 	.word	0x40002000

08003638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 030a 	bic.w	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0210 	bic.w	r2, r3, #16
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 0307 	orr.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	431a      	orrs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e05a      	b.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d01d      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a17      	ldr	r2, [pc, #92]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10c      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40010400 	.word	0x40010400
 800385c:	40014000 	.word	0x40014000
 8003860:	40001800 	.word	0x40001800

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e03f      	b.n	80038f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fe96 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f90b 	bl	8003ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af02      	add	r7, sp, #8
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 8083 	bne.w	8003a26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x2e>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07b      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x40>
 800393a:	2302      	movs	r3, #2
 800393c:	e074      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003954:	f7fd ffea 	bl	800192c <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800396e:	e042      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d122      	bne.n	80039ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f84c 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e042      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3302      	adds	r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e017      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	e013      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f829 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e01f      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	60ba      	str	r2, [r7, #8]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1b7      	bne.n	8003970 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f810 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a40:	e02c      	b.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d028      	beq.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a50:	f7fd ff6c 	bl	800192c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d21d      	bcs.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e00f      	b.n	8003abc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d0c3      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b06:	f023 030c 	bic.w	r3, r3, #12
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	68f9      	ldr	r1, [r7, #12]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b32:	f040 818b 	bne.w	8003e4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4ac1      	ldr	r2, [pc, #772]	; (8003e40 <UART_SetConfig+0x37c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d005      	beq.n	8003b4c <UART_SetConfig+0x88>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4abf      	ldr	r2, [pc, #764]	; (8003e44 <UART_SetConfig+0x380>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	f040 80bd 	bne.w	8003cc6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7ff fbba 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003b50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	461d      	mov	r5, r3
 8003b56:	f04f 0600 	mov.w	r6, #0
 8003b5a:	46a8      	mov	r8, r5
 8003b5c:	46b1      	mov	r9, r6
 8003b5e:	eb18 0308 	adds.w	r3, r8, r8
 8003b62:	eb49 0409 	adc.w	r4, r9, r9
 8003b66:	4698      	mov	r8, r3
 8003b68:	46a1      	mov	r9, r4
 8003b6a:	eb18 0805 	adds.w	r8, r8, r5
 8003b6e:	eb49 0906 	adc.w	r9, r9, r6
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b86:	4688      	mov	r8, r1
 8003b88:	4691      	mov	r9, r2
 8003b8a:	eb18 0005 	adds.w	r0, r8, r5
 8003b8e:	eb49 0106 	adc.w	r1, r9, r6
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	461d      	mov	r5, r3
 8003b98:	f04f 0600 	mov.w	r6, #0
 8003b9c:	196b      	adds	r3, r5, r5
 8003b9e:	eb46 0406 	adc.w	r4, r6, r6
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	f7fc fd25 	bl	80005f4 <__aeabi_uldivmod>
 8003baa:	4603      	mov	r3, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4ba5      	ldr	r3, [pc, #660]	; (8003e48 <UART_SetConfig+0x384>)
 8003bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	f04f 0600 	mov.w	r6, #0
 8003bc4:	46a9      	mov	r9, r5
 8003bc6:	46b2      	mov	sl, r6
 8003bc8:	eb19 0309 	adds.w	r3, r9, r9
 8003bcc:	eb4a 040a 	adc.w	r4, sl, sl
 8003bd0:	4699      	mov	r9, r3
 8003bd2:	46a2      	mov	sl, r4
 8003bd4:	eb19 0905 	adds.w	r9, r9, r5
 8003bd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003be8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bf0:	4689      	mov	r9, r1
 8003bf2:	4692      	mov	sl, r2
 8003bf4:	eb19 0005 	adds.w	r0, r9, r5
 8003bf8:	eb4a 0106 	adc.w	r1, sl, r6
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	461d      	mov	r5, r3
 8003c02:	f04f 0600 	mov.w	r6, #0
 8003c06:	196b      	adds	r3, r5, r5
 8003c08:	eb46 0406 	adc.w	r4, r6, r6
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	f7fc fcf0 	bl	80005f4 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b8b      	ldr	r3, [pc, #556]	; (8003e48 <UART_SetConfig+0x384>)
 8003c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	3332      	adds	r3, #50	; 0x32
 8003c2e:	4a86      	ldr	r2, [pc, #536]	; (8003e48 <UART_SetConfig+0x384>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c3c:	4498      	add	r8, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	461d      	mov	r5, r3
 8003c42:	f04f 0600 	mov.w	r6, #0
 8003c46:	46a9      	mov	r9, r5
 8003c48:	46b2      	mov	sl, r6
 8003c4a:	eb19 0309 	adds.w	r3, r9, r9
 8003c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c52:	4699      	mov	r9, r3
 8003c54:	46a2      	mov	sl, r4
 8003c56:	eb19 0905 	adds.w	r9, r9, r5
 8003c5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c72:	4689      	mov	r9, r1
 8003c74:	4692      	mov	sl, r2
 8003c76:	eb19 0005 	adds.w	r0, r9, r5
 8003c7a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	461d      	mov	r5, r3
 8003c84:	f04f 0600 	mov.w	r6, #0
 8003c88:	196b      	adds	r3, r5, r5
 8003c8a:	eb46 0406 	adc.w	r4, r6, r6
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4623      	mov	r3, r4
 8003c92:	f7fc fcaf 	bl	80005f4 <__aeabi_uldivmod>
 8003c96:	4603      	mov	r3, r0
 8003c98:	460c      	mov	r4, r1
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <UART_SetConfig+0x384>)
 8003c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2164      	movs	r1, #100	; 0x64
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	3332      	adds	r3, #50	; 0x32
 8003cb0:	4a65      	ldr	r2, [pc, #404]	; (8003e48 <UART_SetConfig+0x384>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 0207 	and.w	r2, r3, #7
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4442      	add	r2, r8
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e26f      	b.n	80041a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f7ff fae9 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8003cca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	461d      	mov	r5, r3
 8003cd0:	f04f 0600 	mov.w	r6, #0
 8003cd4:	46a8      	mov	r8, r5
 8003cd6:	46b1      	mov	r9, r6
 8003cd8:	eb18 0308 	adds.w	r3, r8, r8
 8003cdc:	eb49 0409 	adc.w	r4, r9, r9
 8003ce0:	4698      	mov	r8, r3
 8003ce2:	46a1      	mov	r9, r4
 8003ce4:	eb18 0805 	adds.w	r8, r8, r5
 8003ce8:	eb49 0906 	adc.w	r9, r9, r6
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cf8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cfc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d00:	4688      	mov	r8, r1
 8003d02:	4691      	mov	r9, r2
 8003d04:	eb18 0005 	adds.w	r0, r8, r5
 8003d08:	eb49 0106 	adc.w	r1, r9, r6
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	461d      	mov	r5, r3
 8003d12:	f04f 0600 	mov.w	r6, #0
 8003d16:	196b      	adds	r3, r5, r5
 8003d18:	eb46 0406 	adc.w	r4, r6, r6
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	f7fc fc68 	bl	80005f4 <__aeabi_uldivmod>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <UART_SetConfig+0x384>)
 8003d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	461d      	mov	r5, r3
 8003d3a:	f04f 0600 	mov.w	r6, #0
 8003d3e:	46a9      	mov	r9, r5
 8003d40:	46b2      	mov	sl, r6
 8003d42:	eb19 0309 	adds.w	r3, r9, r9
 8003d46:	eb4a 040a 	adc.w	r4, sl, sl
 8003d4a:	4699      	mov	r9, r3
 8003d4c:	46a2      	mov	sl, r4
 8003d4e:	eb19 0905 	adds.w	r9, r9, r5
 8003d52:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d6a:	4689      	mov	r9, r1
 8003d6c:	4692      	mov	sl, r2
 8003d6e:	eb19 0005 	adds.w	r0, r9, r5
 8003d72:	eb4a 0106 	adc.w	r1, sl, r6
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	f04f 0600 	mov.w	r6, #0
 8003d80:	196b      	adds	r3, r5, r5
 8003d82:	eb46 0406 	adc.w	r4, r6, r6
 8003d86:	461a      	mov	r2, r3
 8003d88:	4623      	mov	r3, r4
 8003d8a:	f7fc fc33 	bl	80005f4 <__aeabi_uldivmod>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <UART_SetConfig+0x384>)
 8003d96:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	3332      	adds	r3, #50	; 0x32
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <UART_SetConfig+0x384>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db6:	4498      	add	r8, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	461d      	mov	r5, r3
 8003dbc:	f04f 0600 	mov.w	r6, #0
 8003dc0:	46a9      	mov	r9, r5
 8003dc2:	46b2      	mov	sl, r6
 8003dc4:	eb19 0309 	adds.w	r3, r9, r9
 8003dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dcc:	4699      	mov	r9, r3
 8003dce:	46a2      	mov	sl, r4
 8003dd0:	eb19 0905 	adds.w	r9, r9, r5
 8003dd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dec:	4689      	mov	r9, r1
 8003dee:	4692      	mov	sl, r2
 8003df0:	eb19 0005 	adds.w	r0, r9, r5
 8003df4:	eb4a 0106 	adc.w	r1, sl, r6
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	461d      	mov	r5, r3
 8003dfe:	f04f 0600 	mov.w	r6, #0
 8003e02:	196b      	adds	r3, r5, r5
 8003e04:	eb46 0406 	adc.w	r4, r6, r6
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	f7fc fbf2 	bl	80005f4 <__aeabi_uldivmod>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <UART_SetConfig+0x384>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <UART_SetConfig+0x384>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4442      	add	r2, r8
 8003e3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e3e:	e1b2      	b.n	80041a6 <UART_SetConfig+0x6e2>
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4ad7      	ldr	r2, [pc, #860]	; (80041b0 <UART_SetConfig+0x6ec>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d005      	beq.n	8003e62 <UART_SetConfig+0x39e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4ad6      	ldr	r2, [pc, #856]	; (80041b4 <UART_SetConfig+0x6f0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	f040 80d1 	bne.w	8004004 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e62:	f7ff fa2f 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003e66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	469a      	mov	sl, r3
 8003e6c:	f04f 0b00 	mov.w	fp, #0
 8003e70:	46d0      	mov	r8, sl
 8003e72:	46d9      	mov	r9, fp
 8003e74:	eb18 0308 	adds.w	r3, r8, r8
 8003e78:	eb49 0409 	adc.w	r4, r9, r9
 8003e7c:	4698      	mov	r8, r3
 8003e7e:	46a1      	mov	r9, r4
 8003e80:	eb18 080a 	adds.w	r8, r8, sl
 8003e84:	eb49 090b 	adc.w	r9, r9, fp
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e9c:	4688      	mov	r8, r1
 8003e9e:	4691      	mov	r9, r2
 8003ea0:	eb1a 0508 	adds.w	r5, sl, r8
 8003ea4:	eb4b 0609 	adc.w	r6, fp, r9
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	0094      	lsls	r4, r2, #2
 8003ebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ec0:	008b      	lsls	r3, r1, #2
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	4631      	mov	r1, r6
 8003eca:	f7fc fb93 	bl	80005f4 <__aeabi_uldivmod>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4bb8      	ldr	r3, [pc, #736]	; (80041b8 <UART_SetConfig+0x6f4>)
 8003ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	f04f 0c00 	mov.w	ip, #0
 8003ee8:	46d9      	mov	r9, fp
 8003eea:	46e2      	mov	sl, ip
 8003eec:	eb19 0309 	adds.w	r3, r9, r9
 8003ef0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	46a2      	mov	sl, r4
 8003ef8:	eb19 090b 	adds.w	r9, r9, fp
 8003efc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f14:	4689      	mov	r9, r1
 8003f16:	4692      	mov	sl, r2
 8003f18:	eb1b 0509 	adds.w	r5, fp, r9
 8003f1c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	f04f 0400 	mov.w	r4, #0
 8003f32:	0094      	lsls	r4, r2, #2
 8003f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	4631      	mov	r1, r6
 8003f42:	f7fc fb57 	bl	80005f4 <__aeabi_uldivmod>
 8003f46:	4603      	mov	r3, r0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b9a      	ldr	r3, [pc, #616]	; (80041b8 <UART_SetConfig+0x6f4>)
 8003f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2164      	movs	r1, #100	; 0x64
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	3332      	adds	r3, #50	; 0x32
 8003f60:	4a95      	ldr	r2, [pc, #596]	; (80041b8 <UART_SetConfig+0x6f4>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	4498      	add	r8, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	469b      	mov	fp, r3
 8003f72:	f04f 0c00 	mov.w	ip, #0
 8003f76:	46d9      	mov	r9, fp
 8003f78:	46e2      	mov	sl, ip
 8003f7a:	eb19 0309 	adds.w	r3, r9, r9
 8003f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f82:	4699      	mov	r9, r3
 8003f84:	46a2      	mov	sl, r4
 8003f86:	eb19 090b 	adds.w	r9, r9, fp
 8003f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa2:	4689      	mov	r9, r1
 8003fa4:	4692      	mov	sl, r2
 8003fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8003faa:	eb4c 060a 	adc.w	r6, ip, sl
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	0094      	lsls	r4, r2, #2
 8003fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc6:	008b      	lsls	r3, r1, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	4631      	mov	r1, r6
 8003fd0:	f7fc fb10 	bl	80005f4 <__aeabi_uldivmod>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <UART_SetConfig+0x6f4>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <UART_SetConfig+0x6f4>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4442      	add	r2, r8
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	e0d0      	b.n	80041a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff f94a 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8004008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	469a      	mov	sl, r3
 800400e:	f04f 0b00 	mov.w	fp, #0
 8004012:	46d0      	mov	r8, sl
 8004014:	46d9      	mov	r9, fp
 8004016:	eb18 0308 	adds.w	r3, r8, r8
 800401a:	eb49 0409 	adc.w	r4, r9, r9
 800401e:	4698      	mov	r8, r3
 8004020:	46a1      	mov	r9, r4
 8004022:	eb18 080a 	adds.w	r8, r8, sl
 8004026:	eb49 090b 	adc.w	r9, r9, fp
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800403a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800403e:	4688      	mov	r8, r1
 8004040:	4691      	mov	r9, r2
 8004042:	eb1a 0508 	adds.w	r5, sl, r8
 8004046:	eb4b 0609 	adc.w	r6, fp, r9
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	0094      	lsls	r4, r2, #2
 800405e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004062:	008b      	lsls	r3, r1, #2
 8004064:	461a      	mov	r2, r3
 8004066:	4623      	mov	r3, r4
 8004068:	4628      	mov	r0, r5
 800406a:	4631      	mov	r1, r6
 800406c:	f7fc fac2 	bl	80005f4 <__aeabi_uldivmod>
 8004070:	4603      	mov	r3, r0
 8004072:	460c      	mov	r4, r1
 8004074:	461a      	mov	r2, r3
 8004076:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <UART_SetConfig+0x6f4>)
 8004078:	fba3 2302 	umull	r2, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	469b      	mov	fp, r3
 8004086:	f04f 0c00 	mov.w	ip, #0
 800408a:	46d9      	mov	r9, fp
 800408c:	46e2      	mov	sl, ip
 800408e:	eb19 0309 	adds.w	r3, r9, r9
 8004092:	eb4a 040a 	adc.w	r4, sl, sl
 8004096:	4699      	mov	r9, r3
 8004098:	46a2      	mov	sl, r4
 800409a:	eb19 090b 	adds.w	r9, r9, fp
 800409e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040b6:	4689      	mov	r9, r1
 80040b8:	4692      	mov	sl, r2
 80040ba:	eb1b 0509 	adds.w	r5, fp, r9
 80040be:	eb4c 060a 	adc.w	r6, ip, sl
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4619      	mov	r1, r3
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	f04f 0400 	mov.w	r4, #0
 80040d4:	0094      	lsls	r4, r2, #2
 80040d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	461a      	mov	r2, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	4631      	mov	r1, r6
 80040e4:	f7fc fa86 	bl	80005f4 <__aeabi_uldivmod>
 80040e8:	4603      	mov	r3, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <UART_SetConfig+0x6f4>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <UART_SetConfig+0x6f4>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410e:	4498      	add	r8, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	469b      	mov	fp, r3
 8004114:	f04f 0c00 	mov.w	ip, #0
 8004118:	46d9      	mov	r9, fp
 800411a:	46e2      	mov	sl, ip
 800411c:	eb19 0309 	adds.w	r3, r9, r9
 8004120:	eb4a 040a 	adc.w	r4, sl, sl
 8004124:	4699      	mov	r9, r3
 8004126:	46a2      	mov	sl, r4
 8004128:	eb19 090b 	adds.w	r9, r9, fp
 800412c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004144:	4689      	mov	r9, r1
 8004146:	4692      	mov	sl, r2
 8004148:	eb1b 0509 	adds.w	r5, fp, r9
 800414c:	eb4c 060a 	adc.w	r6, ip, sl
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	f04f 0400 	mov.w	r4, #0
 8004162:	0094      	lsls	r4, r2, #2
 8004164:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	461a      	mov	r2, r3
 800416c:	4623      	mov	r3, r4
 800416e:	4628      	mov	r0, r5
 8004170:	4631      	mov	r1, r6
 8004172:	f7fc fa3f 	bl	80005f4 <__aeabi_uldivmod>
 8004176:	4603      	mov	r3, r0
 8004178:	460c      	mov	r4, r1
 800417a:	461a      	mov	r2, r3
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <UART_SetConfig+0x6f4>)
 800417e:	fba3 1302 	umull	r1, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2164      	movs	r1, #100	; 0x64
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	3332      	adds	r3, #50	; 0x32
 8004190:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <UART_SetConfig+0x6f4>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4442      	add	r2, r8
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	e7ff      	b.n	80041a6 <UART_SetConfig+0x6e2>
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b0:	40011000 	.word	0x40011000
 80041b4:	40011400 	.word	0x40011400
 80041b8:	51eb851f 	.word	0x51eb851f

080041bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041bc:	b084      	sub	sp, #16
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	f107 001c 	add.w	r0, r7, #28
 80041ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d122      	bne.n	800421a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa5c 	bl	80046cc <USB_CoreReset>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e01a      	b.n	8004250 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa50 	bl	80046cc <USB_CoreReset>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
 8004242:	e005      	b.n	8004250 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10b      	bne.n	800426e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f043 0206 	orr.w	r2, r3, #6
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800427a:	b004      	add	sp, #16
 800427c:	4770      	bx	lr

0800427e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d106      	bne.n	80042cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	e00b      	b.n	80042e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e001      	b.n	80042e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e003      	b.n	80042ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042e4:	2032      	movs	r0, #50	; 0x32
 80042e6:	f7fd fb2d 	bl	8001944 <HAL_Delay>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042f4:	b084      	sub	sp, #16
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e009      	b.n	8004328 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3340      	adds	r3, #64	; 0x40
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	2200      	movs	r2, #0
 8004320:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3301      	adds	r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b0e      	cmp	r3, #14
 800432c:	d9f2      	bls.n	8004314 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d112      	bne.n	800435a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
 8004358:	e00b      	b.n	8004372 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	4619      	mov	r1, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	461a      	mov	r2, r3
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10c      	bne.n	80043b2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f961 	bl	8004668 <USB_SetDevSpeed>
 80043a6:	e008      	b.n	80043ba <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f95c 	bl	8004668 <USB_SetDevSpeed>
 80043b0:	e003      	b.n	80043ba <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b2:	2103      	movs	r1, #3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f957 	bl	8004668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043ba:	2110      	movs	r1, #16
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f90b 	bl	80045d8 <USB_FlushTxFifo>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f929 	bl	8004624 <USB_FlushRxFifo>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e043      	b.n	800448e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441c:	d118      	bne.n	8004450 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e013      	b.n	8004462 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e008      	b.n	8004462 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b7      	bcc.n	8004406 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e043      	b.n	8004524 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b2:	d118      	bne.n	80044e6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e013      	b.n	80044f8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e008      	b.n	80044f8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800451c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3b7      	bcc.n	800449c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2b01      	cmp	r3, #1
 8004544:	d111      	bne.n	800456a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	461a      	mov	r2, r3
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <USB_DevInit+0x2dc>)
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	f043 0303 	orr.w	r3, r3, #3
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004576:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <USB_DevInit+0x2e0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f043 0208 	orr.w	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ca:	b004      	add	sp, #16
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	00800100 	.word	0x00800100
 80045d4:	803c3800 	.word	0x803c3800

080045d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	019b      	lsls	r3, r3, #6
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <USB_FlushTxFifo+0x48>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d0f0      	beq.n	80045f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	00030d40 	.word	0x00030d40

08004624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2210      	movs	r2, #16
 8004634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <USB_FlushRxFifo+0x40>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d0f0      	beq.n	8004636 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	00030d40 	.word	0x00030d40

08004668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80046ba:	2003      	movs	r0, #3
 80046bc:	f7fd f942 	bl	8001944 <HAL_Delay>

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a13      	ldr	r2, [pc, #76]	; (8004730 <USB_CoreReset+0x64>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e01b      	b.n	8004722 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	daf2      	bge.n	80046d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3301      	adds	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <USB_CoreReset+0x64>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d0f0      	beq.n	8004702 <USB_CoreReset+0x36>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	00030d40 	.word	0x00030d40

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000000c 	.word	0x2000000c

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4e0d      	ldr	r6, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1ba4      	subs	r4, r4, r6
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2500      	movs	r5, #0
 800474c:	42a5      	cmp	r5, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4e0b      	ldr	r6, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f000 fc88 	bl	8005068 <_init>
 8004758:	1ba4      	subs	r4, r4, r6
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2500      	movs	r5, #0
 800475e:	42a5      	cmp	r5, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004768:	4798      	blx	r3
 800476a:	3501      	adds	r5, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004772:	4798      	blx	r3
 8004774:	3501      	adds	r5, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08005114 	.word	0x08005114
 800477c:	08005114 	.word	0x08005114
 8004780:	08005114 	.word	0x08005114
 8004784:	08005118 	.word	0x08005118

08004788 <memset>:
 8004788:	4402      	add	r2, r0
 800478a:	4603      	mov	r3, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <_puts_r>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	460e      	mov	r6, r1
 800479c:	4605      	mov	r5, r0
 800479e:	b118      	cbz	r0, 80047a8 <_puts_r+0x10>
 80047a0:	6983      	ldr	r3, [r0, #24]
 80047a2:	b90b      	cbnz	r3, 80047a8 <_puts_r+0x10>
 80047a4:	f000 fa0c 	bl	8004bc0 <__sinit>
 80047a8:	69ab      	ldr	r3, [r5, #24]
 80047aa:	68ac      	ldr	r4, [r5, #8]
 80047ac:	b913      	cbnz	r3, 80047b4 <_puts_r+0x1c>
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 fa06 	bl	8004bc0 <__sinit>
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <_puts_r+0xac>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d117      	bne.n	80047ea <_puts_r+0x52>
 80047ba:	686c      	ldr	r4, [r5, #4]
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	071b      	lsls	r3, r3, #28
 80047c0:	d51d      	bpl.n	80047fe <_puts_r+0x66>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	b1db      	cbz	r3, 80047fe <_puts_r+0x66>
 80047c6:	3e01      	subs	r6, #1
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	b9e9      	cbnz	r1, 8004810 <_puts_r+0x78>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da2e      	bge.n	8004836 <_puts_r+0x9e>
 80047d8:	4622      	mov	r2, r4
 80047da:	210a      	movs	r1, #10
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 f83f 	bl	8004860 <__swbuf_r>
 80047e2:	3001      	adds	r0, #1
 80047e4:	d011      	beq.n	800480a <_puts_r+0x72>
 80047e6:	200a      	movs	r0, #10
 80047e8:	e011      	b.n	800480e <_puts_r+0x76>
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <_puts_r+0xb0>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d101      	bne.n	80047f4 <_puts_r+0x5c>
 80047f0:	68ac      	ldr	r4, [r5, #8]
 80047f2:	e7e3      	b.n	80047bc <_puts_r+0x24>
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <_puts_r+0xb4>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	bf08      	it	eq
 80047fa:	68ec      	ldreq	r4, [r5, #12]
 80047fc:	e7de      	b.n	80047bc <_puts_r+0x24>
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 f87f 	bl	8004904 <__swsetup_r>
 8004806:	2800      	cmp	r0, #0
 8004808:	d0dd      	beq.n	80047c6 <_puts_r+0x2e>
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	2b00      	cmp	r3, #0
 8004812:	da04      	bge.n	800481e <_puts_r+0x86>
 8004814:	69a2      	ldr	r2, [r4, #24]
 8004816:	429a      	cmp	r2, r3
 8004818:	dc06      	bgt.n	8004828 <_puts_r+0x90>
 800481a:	290a      	cmp	r1, #10
 800481c:	d004      	beq.n	8004828 <_puts_r+0x90>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	6022      	str	r2, [r4, #0]
 8004824:	7019      	strb	r1, [r3, #0]
 8004826:	e7cf      	b.n	80047c8 <_puts_r+0x30>
 8004828:	4622      	mov	r2, r4
 800482a:	4628      	mov	r0, r5
 800482c:	f000 f818 	bl	8004860 <__swbuf_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d1c9      	bne.n	80047c8 <_puts_r+0x30>
 8004834:	e7e9      	b.n	800480a <_puts_r+0x72>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	200a      	movs	r0, #10
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	7018      	strb	r0, [r3, #0]
 8004840:	e7e5      	b.n	800480e <_puts_r+0x76>
 8004842:	bf00      	nop
 8004844:	080050cc 	.word	0x080050cc
 8004848:	080050ec 	.word	0x080050ec
 800484c:	080050ac 	.word	0x080050ac

08004850 <puts>:
 8004850:	4b02      	ldr	r3, [pc, #8]	; (800485c <puts+0xc>)
 8004852:	4601      	mov	r1, r0
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f7ff bf9f 	b.w	8004798 <_puts_r>
 800485a:	bf00      	nop
 800485c:	2000000c 	.word	0x2000000c

08004860 <__swbuf_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	460e      	mov	r6, r1
 8004864:	4614      	mov	r4, r2
 8004866:	4605      	mov	r5, r0
 8004868:	b118      	cbz	r0, 8004872 <__swbuf_r+0x12>
 800486a:	6983      	ldr	r3, [r0, #24]
 800486c:	b90b      	cbnz	r3, 8004872 <__swbuf_r+0x12>
 800486e:	f000 f9a7 	bl	8004bc0 <__sinit>
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <__swbuf_r+0x98>)
 8004874:	429c      	cmp	r4, r3
 8004876:	d12a      	bne.n	80048ce <__swbuf_r+0x6e>
 8004878:	686c      	ldr	r4, [r5, #4]
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	071a      	lsls	r2, r3, #28
 8004882:	d52e      	bpl.n	80048e2 <__swbuf_r+0x82>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b363      	cbz	r3, 80048e2 <__swbuf_r+0x82>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1ac0      	subs	r0, r0, r3
 800488e:	6963      	ldr	r3, [r4, #20]
 8004890:	b2f6      	uxtb	r6, r6
 8004892:	4283      	cmp	r3, r0
 8004894:	4637      	mov	r7, r6
 8004896:	dc04      	bgt.n	80048a2 <__swbuf_r+0x42>
 8004898:	4621      	mov	r1, r4
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f926 	bl	8004aec <_fflush_r>
 80048a0:	bb28      	cbnz	r0, 80048ee <__swbuf_r+0x8e>
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60a3      	str	r3, [r4, #8]
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	6022      	str	r2, [r4, #0]
 80048ae:	701e      	strb	r6, [r3, #0]
 80048b0:	6963      	ldr	r3, [r4, #20]
 80048b2:	3001      	adds	r0, #1
 80048b4:	4283      	cmp	r3, r0
 80048b6:	d004      	beq.n	80048c2 <__swbuf_r+0x62>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	07db      	lsls	r3, r3, #31
 80048bc:	d519      	bpl.n	80048f2 <__swbuf_r+0x92>
 80048be:	2e0a      	cmp	r6, #10
 80048c0:	d117      	bne.n	80048f2 <__swbuf_r+0x92>
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 f911 	bl	8004aec <_fflush_r>
 80048ca:	b190      	cbz	r0, 80048f2 <__swbuf_r+0x92>
 80048cc:	e00f      	b.n	80048ee <__swbuf_r+0x8e>
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <__swbuf_r+0x9c>)
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d101      	bne.n	80048d8 <__swbuf_r+0x78>
 80048d4:	68ac      	ldr	r4, [r5, #8]
 80048d6:	e7d0      	b.n	800487a <__swbuf_r+0x1a>
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <__swbuf_r+0xa0>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	bf08      	it	eq
 80048de:	68ec      	ldreq	r4, [r5, #12]
 80048e0:	e7cb      	b.n	800487a <__swbuf_r+0x1a>
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	f000 f80d 	bl	8004904 <__swsetup_r>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d0cc      	beq.n	8004888 <__swbuf_r+0x28>
 80048ee:	f04f 37ff 	mov.w	r7, #4294967295
 80048f2:	4638      	mov	r0, r7
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	080050cc 	.word	0x080050cc
 80048fc:	080050ec 	.word	0x080050ec
 8004900:	080050ac 	.word	0x080050ac

08004904 <__swsetup_r>:
 8004904:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <__swsetup_r+0xcc>)
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	681d      	ldr	r5, [r3, #0]
 800490a:	4606      	mov	r6, r0
 800490c:	460c      	mov	r4, r1
 800490e:	b125      	cbz	r5, 800491a <__swsetup_r+0x16>
 8004910:	69ab      	ldr	r3, [r5, #24]
 8004912:	b913      	cbnz	r3, 800491a <__swsetup_r+0x16>
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f953 	bl	8004bc0 <__sinit>
 800491a:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <__swsetup_r+0xd0>)
 800491c:	429c      	cmp	r4, r3
 800491e:	d10f      	bne.n	8004940 <__swsetup_r+0x3c>
 8004920:	686c      	ldr	r4, [r5, #4]
 8004922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004926:	b29a      	uxth	r2, r3
 8004928:	0715      	lsls	r5, r2, #28
 800492a:	d42c      	bmi.n	8004986 <__swsetup_r+0x82>
 800492c:	06d0      	lsls	r0, r2, #27
 800492e:	d411      	bmi.n	8004954 <__swsetup_r+0x50>
 8004930:	2209      	movs	r2, #9
 8004932:	6032      	str	r2, [r6, #0]
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	f04f 30ff 	mov.w	r0, #4294967295
 800493e:	e03e      	b.n	80049be <__swsetup_r+0xba>
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <__swsetup_r+0xd4>)
 8004942:	429c      	cmp	r4, r3
 8004944:	d101      	bne.n	800494a <__swsetup_r+0x46>
 8004946:	68ac      	ldr	r4, [r5, #8]
 8004948:	e7eb      	b.n	8004922 <__swsetup_r+0x1e>
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <__swsetup_r+0xd8>)
 800494c:	429c      	cmp	r4, r3
 800494e:	bf08      	it	eq
 8004950:	68ec      	ldreq	r4, [r5, #12]
 8004952:	e7e6      	b.n	8004922 <__swsetup_r+0x1e>
 8004954:	0751      	lsls	r1, r2, #29
 8004956:	d512      	bpl.n	800497e <__swsetup_r+0x7a>
 8004958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495a:	b141      	cbz	r1, 800496e <__swsetup_r+0x6a>
 800495c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004960:	4299      	cmp	r1, r3
 8004962:	d002      	beq.n	800496a <__swsetup_r+0x66>
 8004964:	4630      	mov	r0, r6
 8004966:	f000 fa19 	bl	8004d9c <_free_r>
 800496a:	2300      	movs	r3, #0
 800496c:	6363      	str	r3, [r4, #52]	; 0x34
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	b94b      	cbnz	r3, 800499e <__swsetup_r+0x9a>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004994:	d003      	beq.n	800499e <__swsetup_r+0x9a>
 8004996:	4621      	mov	r1, r4
 8004998:	4630      	mov	r0, r6
 800499a:	f000 f9bf 	bl	8004d1c <__smakebuf_r>
 800499e:	89a2      	ldrh	r2, [r4, #12]
 80049a0:	f012 0301 	ands.w	r3, r2, #1
 80049a4:	d00c      	beq.n	80049c0 <__swsetup_r+0xbc>
 80049a6:	2300      	movs	r3, #0
 80049a8:	60a3      	str	r3, [r4, #8]
 80049aa:	6963      	ldr	r3, [r4, #20]
 80049ac:	425b      	negs	r3, r3
 80049ae:	61a3      	str	r3, [r4, #24]
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	b953      	cbnz	r3, 80049ca <__swsetup_r+0xc6>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80049bc:	d1ba      	bne.n	8004934 <__swsetup_r+0x30>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	0792      	lsls	r2, r2, #30
 80049c2:	bf58      	it	pl
 80049c4:	6963      	ldrpl	r3, [r4, #20]
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	e7f2      	b.n	80049b0 <__swsetup_r+0xac>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e7f7      	b.n	80049be <__swsetup_r+0xba>
 80049ce:	bf00      	nop
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	080050cc 	.word	0x080050cc
 80049d8:	080050ec 	.word	0x080050ec
 80049dc:	080050ac 	.word	0x080050ac

080049e0 <__sflush_r>:
 80049e0:	898a      	ldrh	r2, [r1, #12]
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	0710      	lsls	r0, r2, #28
 80049ea:	460c      	mov	r4, r1
 80049ec:	d458      	bmi.n	8004aa0 <__sflush_r+0xc0>
 80049ee:	684b      	ldr	r3, [r1, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dc05      	bgt.n	8004a00 <__sflush_r+0x20>
 80049f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc02      	bgt.n	8004a00 <__sflush_r+0x20>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d0f9      	beq.n	80049fa <__sflush_r+0x1a>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a0c:	682f      	ldr	r7, [r5, #0]
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	d032      	beq.n	8004a7a <__sflush_r+0x9a>
 8004a14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	075a      	lsls	r2, r3, #29
 8004a1a:	d505      	bpl.n	8004a28 <__sflush_r+0x48>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	1ac0      	subs	r0, r0, r3
 8004a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a22:	b10b      	cbz	r3, 8004a28 <__sflush_r+0x48>
 8004a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a26:	1ac0      	subs	r0, r0, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b0      	blx	r6
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	d106      	bne.n	8004a48 <__sflush_r+0x68>
 8004a3a:	6829      	ldr	r1, [r5, #0]
 8004a3c:	291d      	cmp	r1, #29
 8004a3e:	d848      	bhi.n	8004ad2 <__sflush_r+0xf2>
 8004a40:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <__sflush_r+0x108>)
 8004a42:	40ca      	lsrs	r2, r1
 8004a44:	07d6      	lsls	r6, r2, #31
 8004a46:	d544      	bpl.n	8004ad2 <__sflush_r+0xf2>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	6062      	str	r2, [r4, #4]
 8004a4c:	04d9      	lsls	r1, r3, #19
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	6022      	str	r2, [r4, #0]
 8004a52:	d504      	bpl.n	8004a5e <__sflush_r+0x7e>
 8004a54:	1c42      	adds	r2, r0, #1
 8004a56:	d101      	bne.n	8004a5c <__sflush_r+0x7c>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b903      	cbnz	r3, 8004a5e <__sflush_r+0x7e>
 8004a5c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a60:	602f      	str	r7, [r5, #0]
 8004a62:	2900      	cmp	r1, #0
 8004a64:	d0c9      	beq.n	80049fa <__sflush_r+0x1a>
 8004a66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	d002      	beq.n	8004a74 <__sflush_r+0x94>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 f994 	bl	8004d9c <_free_r>
 8004a74:	2000      	movs	r0, #0
 8004a76:	6360      	str	r0, [r4, #52]	; 0x34
 8004a78:	e7c0      	b.n	80049fc <__sflush_r+0x1c>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	1c41      	adds	r1, r0, #1
 8004a82:	d1c8      	bne.n	8004a16 <__sflush_r+0x36>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c5      	beq.n	8004a16 <__sflush_r+0x36>
 8004a8a:	2b1d      	cmp	r3, #29
 8004a8c:	d001      	beq.n	8004a92 <__sflush_r+0xb2>
 8004a8e:	2b16      	cmp	r3, #22
 8004a90:	d101      	bne.n	8004a96 <__sflush_r+0xb6>
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	e7b1      	b.n	80049fa <__sflush_r+0x1a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	e7ad      	b.n	80049fc <__sflush_r+0x1c>
 8004aa0:	690f      	ldr	r7, [r1, #16]
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	d0a9      	beq.n	80049fa <__sflush_r+0x1a>
 8004aa6:	0793      	lsls	r3, r2, #30
 8004aa8:	680e      	ldr	r6, [r1, #0]
 8004aaa:	bf08      	it	eq
 8004aac:	694b      	ldreq	r3, [r1, #20]
 8004aae:	600f      	str	r7, [r1, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	eba6 0807 	sub.w	r8, r6, r7
 8004ab8:	608b      	str	r3, [r1, #8]
 8004aba:	f1b8 0f00 	cmp.w	r8, #0
 8004abe:	dd9c      	ble.n	80049fa <__sflush_r+0x1a>
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	6a21      	ldr	r1, [r4, #32]
 8004ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b0      	blx	r6
 8004acc:	2800      	cmp	r0, #0
 8004ace:	dc06      	bgt.n	8004ade <__sflush_r+0xfe>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e78e      	b.n	80049fc <__sflush_r+0x1c>
 8004ade:	4407      	add	r7, r0
 8004ae0:	eba8 0800 	sub.w	r8, r8, r0
 8004ae4:	e7e9      	b.n	8004aba <__sflush_r+0xda>
 8004ae6:	bf00      	nop
 8004ae8:	20400001 	.word	0x20400001

08004aec <_fflush_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	690b      	ldr	r3, [r1, #16]
 8004af0:	4605      	mov	r5, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b1db      	cbz	r3, 8004b2e <_fflush_r+0x42>
 8004af6:	b118      	cbz	r0, 8004b00 <_fflush_r+0x14>
 8004af8:	6983      	ldr	r3, [r0, #24]
 8004afa:	b90b      	cbnz	r3, 8004b00 <_fflush_r+0x14>
 8004afc:	f000 f860 	bl	8004bc0 <__sinit>
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <_fflush_r+0x48>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d109      	bne.n	8004b1a <_fflush_r+0x2e>
 8004b06:	686c      	ldr	r4, [r5, #4]
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	b17b      	cbz	r3, 8004b2e <_fflush_r+0x42>
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b16:	f7ff bf63 	b.w	80049e0 <__sflush_r>
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <_fflush_r+0x4c>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d101      	bne.n	8004b24 <_fflush_r+0x38>
 8004b20:	68ac      	ldr	r4, [r5, #8]
 8004b22:	e7f1      	b.n	8004b08 <_fflush_r+0x1c>
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <_fflush_r+0x50>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68ec      	ldreq	r4, [r5, #12]
 8004b2c:	e7ec      	b.n	8004b08 <_fflush_r+0x1c>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	080050cc 	.word	0x080050cc
 8004b38:	080050ec 	.word	0x080050ec
 8004b3c:	080050ac 	.word	0x080050ac

08004b40 <std>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	e9c0 3300 	strd	r3, r3, [r0]
 8004b4a:	6083      	str	r3, [r0, #8]
 8004b4c:	8181      	strh	r1, [r0, #12]
 8004b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b50:	81c2      	strh	r2, [r0, #14]
 8004b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b56:	6183      	str	r3, [r0, #24]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	305c      	adds	r0, #92	; 0x5c
 8004b5e:	f7ff fe13 	bl	8004788 <memset>
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <std+0x38>)
 8004b64:	6263      	str	r3, [r4, #36]	; 0x24
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <std+0x3c>)
 8004b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <std+0x40>)
 8004b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <std+0x44>)
 8004b70:	6224      	str	r4, [r4, #32]
 8004b72:	6323      	str	r3, [r4, #48]	; 0x30
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	08004f0d 	.word	0x08004f0d
 8004b7c:	08004f2f 	.word	0x08004f2f
 8004b80:	08004f67 	.word	0x08004f67
 8004b84:	08004f8b 	.word	0x08004f8b

08004b88 <_cleanup_r>:
 8004b88:	4901      	ldr	r1, [pc, #4]	; (8004b90 <_cleanup_r+0x8>)
 8004b8a:	f000 b885 	b.w	8004c98 <_fwalk_reent>
 8004b8e:	bf00      	nop
 8004b90:	08004aed 	.word	0x08004aed

08004b94 <__sfmoreglue>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	1e4a      	subs	r2, r1, #1
 8004b98:	2568      	movs	r5, #104	; 0x68
 8004b9a:	4355      	muls	r5, r2
 8004b9c:	460e      	mov	r6, r1
 8004b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ba2:	f000 f949 	bl	8004e38 <_malloc_r>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	b140      	cbz	r0, 8004bbc <__sfmoreglue+0x28>
 8004baa:	2100      	movs	r1, #0
 8004bac:	e9c0 1600 	strd	r1, r6, [r0]
 8004bb0:	300c      	adds	r0, #12
 8004bb2:	60a0      	str	r0, [r4, #8]
 8004bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bb8:	f7ff fde6 	bl	8004788 <memset>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}

08004bc0 <__sinit>:
 8004bc0:	6983      	ldr	r3, [r0, #24]
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	bb33      	cbnz	r3, 8004c16 <__sinit+0x56>
 8004bc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004bcc:	6503      	str	r3, [r0, #80]	; 0x50
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <__sinit+0x58>)
 8004bd0:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <__sinit+0x5c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6282      	str	r2, [r0, #40]	; 0x28
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	bf04      	itt	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	6183      	streq	r3, [r0, #24]
 8004bde:	f000 f81f 	bl	8004c20 <__sfp>
 8004be2:	6060      	str	r0, [r4, #4]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f81b 	bl	8004c20 <__sfp>
 8004bea:	60a0      	str	r0, [r4, #8]
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 f817 	bl	8004c20 <__sfp>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	60e0      	str	r0, [r4, #12]
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	6860      	ldr	r0, [r4, #4]
 8004bfa:	f7ff ffa1 	bl	8004b40 <std>
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2109      	movs	r1, #9
 8004c02:	68a0      	ldr	r0, [r4, #8]
 8004c04:	f7ff ff9c 	bl	8004b40 <std>
 8004c08:	2202      	movs	r2, #2
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	f7ff ff97 	bl	8004b40 <std>
 8004c12:	2301      	movs	r3, #1
 8004c14:	61a3      	str	r3, [r4, #24]
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	080050a8 	.word	0x080050a8
 8004c1c:	08004b89 	.word	0x08004b89

08004c20 <__sfp>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <__sfp+0x70>)
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	69b3      	ldr	r3, [r6, #24]
 8004c28:	4607      	mov	r7, r0
 8004c2a:	b913      	cbnz	r3, 8004c32 <__sfp+0x12>
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff ffc7 	bl	8004bc0 <__sinit>
 8004c32:	3648      	adds	r6, #72	; 0x48
 8004c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	d503      	bpl.n	8004c44 <__sfp+0x24>
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	b133      	cbz	r3, 8004c4e <__sfp+0x2e>
 8004c40:	6836      	ldr	r6, [r6, #0]
 8004c42:	e7f7      	b.n	8004c34 <__sfp+0x14>
 8004c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c48:	b16d      	cbz	r5, 8004c66 <__sfp+0x46>
 8004c4a:	3468      	adds	r4, #104	; 0x68
 8004c4c:	e7f4      	b.n	8004c38 <__sfp+0x18>
 8004c4e:	2104      	movs	r1, #4
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff ff9f 	bl	8004b94 <__sfmoreglue>
 8004c56:	6030      	str	r0, [r6, #0]
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1f1      	bne.n	8004c40 <__sfp+0x20>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4604      	mov	r4, r0
 8004c62:	4620      	mov	r0, r4
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <__sfp+0x74>)
 8004c68:	6665      	str	r5, [r4, #100]	; 0x64
 8004c6a:	e9c4 5500 	strd	r5, r5, [r4]
 8004c6e:	60a5      	str	r5, [r4, #8]
 8004c70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c80:	f7ff fd82 	bl	8004788 <memset>
 8004c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c8c:	e7e9      	b.n	8004c62 <__sfp+0x42>
 8004c8e:	bf00      	nop
 8004c90:	080050a8 	.word	0x080050a8
 8004c94:	ffff0001 	.word	0xffff0001

08004c98 <_fwalk_reent>:
 8004c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ca4:	2600      	movs	r6, #0
 8004ca6:	b914      	cbnz	r4, 8004cae <_fwalk_reent+0x16>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004cb2:	3f01      	subs	r7, #1
 8004cb4:	d501      	bpl.n	8004cba <_fwalk_reent+0x22>
 8004cb6:	6824      	ldr	r4, [r4, #0]
 8004cb8:	e7f5      	b.n	8004ca6 <_fwalk_reent+0xe>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d907      	bls.n	8004cd0 <_fwalk_reent+0x38>
 8004cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	d003      	beq.n	8004cd0 <_fwalk_reent+0x38>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4640      	mov	r0, r8
 8004ccc:	47c8      	blx	r9
 8004cce:	4306      	orrs	r6, r0
 8004cd0:	3568      	adds	r5, #104	; 0x68
 8004cd2:	e7ee      	b.n	8004cb2 <_fwalk_reent+0x1a>

08004cd4 <__swhatbuf_r>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	b096      	sub	sp, #88	; 0x58
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	da07      	bge.n	8004cf6 <__swhatbuf_r+0x22>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	89b3      	ldrh	r3, [r6, #12]
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	d410      	bmi.n	8004d12 <__swhatbuf_r+0x3e>
 8004cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf4:	e00e      	b.n	8004d14 <__swhatbuf_r+0x40>
 8004cf6:	466a      	mov	r2, sp
 8004cf8:	f000 f96e 	bl	8004fd8 <_fstat_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	dbf2      	blt.n	8004ce6 <__swhatbuf_r+0x12>
 8004d00:	9a01      	ldr	r2, [sp, #4]
 8004d02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d0a:	425a      	negs	r2, r3
 8004d0c:	415a      	adcs	r2, r3
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	e7ee      	b.n	8004cf0 <__swhatbuf_r+0x1c>
 8004d12:	2340      	movs	r3, #64	; 0x40
 8004d14:	2000      	movs	r0, #0
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	b016      	add	sp, #88	; 0x58
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}

08004d1c <__smakebuf_r>:
 8004d1c:	898b      	ldrh	r3, [r1, #12]
 8004d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d20:	079d      	lsls	r5, r3, #30
 8004d22:	4606      	mov	r6, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	d507      	bpl.n	8004d38 <__smakebuf_r+0x1c>
 8004d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	6123      	str	r3, [r4, #16]
 8004d30:	2301      	movs	r3, #1
 8004d32:	6163      	str	r3, [r4, #20]
 8004d34:	b002      	add	sp, #8
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	ab01      	add	r3, sp, #4
 8004d3a:	466a      	mov	r2, sp
 8004d3c:	f7ff ffca 	bl	8004cd4 <__swhatbuf_r>
 8004d40:	9900      	ldr	r1, [sp, #0]
 8004d42:	4605      	mov	r5, r0
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f877 	bl	8004e38 <_malloc_r>
 8004d4a:	b948      	cbnz	r0, 8004d60 <__smakebuf_r+0x44>
 8004d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d50:	059a      	lsls	r2, r3, #22
 8004d52:	d4ef      	bmi.n	8004d34 <__smakebuf_r+0x18>
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	e7e3      	b.n	8004d28 <__smakebuf_r+0xc>
 8004d60:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <__smakebuf_r+0x7c>)
 8004d62:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	6020      	str	r0, [r4, #0]
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	9b00      	ldr	r3, [sp, #0]
 8004d70:	6163      	str	r3, [r4, #20]
 8004d72:	9b01      	ldr	r3, [sp, #4]
 8004d74:	6120      	str	r0, [r4, #16]
 8004d76:	b15b      	cbz	r3, 8004d90 <__smakebuf_r+0x74>
 8004d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f93d 	bl	8004ffc <_isatty_r>
 8004d82:	b128      	cbz	r0, 8004d90 <__smakebuf_r+0x74>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	431d      	orrs	r5, r3
 8004d94:	81a5      	strh	r5, [r4, #12]
 8004d96:	e7cd      	b.n	8004d34 <__smakebuf_r+0x18>
 8004d98:	08004b89 	.word	0x08004b89

08004d9c <_free_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4605      	mov	r5, r0
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d045      	beq.n	8004e30 <_free_r+0x94>
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f0c      	subs	r4, r1, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfb8      	it	lt
 8004dae:	18e4      	addlt	r4, r4, r3
 8004db0:	f000 f946 	bl	8005040 <__malloc_lock>
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <_free_r+0x98>)
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	4610      	mov	r0, r2
 8004dba:	b933      	cbnz	r3, 8004dca <_free_r+0x2e>
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6014      	str	r4, [r2, #0]
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc6:	f000 b93c 	b.w	8005042 <__malloc_unlock>
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d90c      	bls.n	8004de8 <_free_r+0x4c>
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	1862      	adds	r2, r4, r1
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf04      	itt	eq
 8004dd6:	681a      	ldreq	r2, [r3, #0]
 8004dd8:	685b      	ldreq	r3, [r3, #4]
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	bf04      	itt	eq
 8004dde:	1852      	addeq	r2, r2, r1
 8004de0:	6022      	streq	r2, [r4, #0]
 8004de2:	6004      	str	r4, [r0, #0]
 8004de4:	e7ec      	b.n	8004dc0 <_free_r+0x24>
 8004de6:	4613      	mov	r3, r2
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	b10a      	cbz	r2, 8004df0 <_free_r+0x54>
 8004dec:	42a2      	cmp	r2, r4
 8004dee:	d9fa      	bls.n	8004de6 <_free_r+0x4a>
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	1858      	adds	r0, r3, r1
 8004df4:	42a0      	cmp	r0, r4
 8004df6:	d10b      	bne.n	8004e10 <_free_r+0x74>
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	4401      	add	r1, r0
 8004dfc:	1858      	adds	r0, r3, r1
 8004dfe:	4282      	cmp	r2, r0
 8004e00:	6019      	str	r1, [r3, #0]
 8004e02:	d1dd      	bne.n	8004dc0 <_free_r+0x24>
 8004e04:	6810      	ldr	r0, [r2, #0]
 8004e06:	6852      	ldr	r2, [r2, #4]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	4401      	add	r1, r0
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	e7d7      	b.n	8004dc0 <_free_r+0x24>
 8004e10:	d902      	bls.n	8004e18 <_free_r+0x7c>
 8004e12:	230c      	movs	r3, #12
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	e7d3      	b.n	8004dc0 <_free_r+0x24>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	1821      	adds	r1, r4, r0
 8004e1c:	428a      	cmp	r2, r1
 8004e1e:	bf04      	itt	eq
 8004e20:	6811      	ldreq	r1, [r2, #0]
 8004e22:	6852      	ldreq	r2, [r2, #4]
 8004e24:	6062      	str	r2, [r4, #4]
 8004e26:	bf04      	itt	eq
 8004e28:	1809      	addeq	r1, r1, r0
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	605c      	str	r4, [r3, #4]
 8004e2e:	e7c7      	b.n	8004dc0 <_free_r+0x24>
 8004e30:	bd38      	pop	{r3, r4, r5, pc}
 8004e32:	bf00      	nop
 8004e34:	20000090 	.word	0x20000090

08004e38 <_malloc_r>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	1ccd      	adds	r5, r1, #3
 8004e3c:	f025 0503 	bic.w	r5, r5, #3
 8004e40:	3508      	adds	r5, #8
 8004e42:	2d0c      	cmp	r5, #12
 8004e44:	bf38      	it	cc
 8004e46:	250c      	movcc	r5, #12
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	db01      	blt.n	8004e52 <_malloc_r+0x1a>
 8004e4e:	42a9      	cmp	r1, r5
 8004e50:	d903      	bls.n	8004e5a <_malloc_r+0x22>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	f000 f8f1 	bl	8005040 <__malloc_lock>
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <_malloc_r+0xac>)
 8004e60:	6814      	ldr	r4, [r2, #0]
 8004e62:	4621      	mov	r1, r4
 8004e64:	b991      	cbnz	r1, 8004e8c <_malloc_r+0x54>
 8004e66:	4c20      	ldr	r4, [pc, #128]	; (8004ee8 <_malloc_r+0xb0>)
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	b91b      	cbnz	r3, 8004e74 <_malloc_r+0x3c>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f000 f83d 	bl	8004eec <_sbrk_r>
 8004e72:	6020      	str	r0, [r4, #0]
 8004e74:	4629      	mov	r1, r5
 8004e76:	4630      	mov	r0, r6
 8004e78:	f000 f838 	bl	8004eec <_sbrk_r>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d124      	bne.n	8004eca <_malloc_r+0x92>
 8004e80:	230c      	movs	r3, #12
 8004e82:	6033      	str	r3, [r6, #0]
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 f8dc 	bl	8005042 <__malloc_unlock>
 8004e8a:	e7e4      	b.n	8004e56 <_malloc_r+0x1e>
 8004e8c:	680b      	ldr	r3, [r1, #0]
 8004e8e:	1b5b      	subs	r3, r3, r5
 8004e90:	d418      	bmi.n	8004ec4 <_malloc_r+0x8c>
 8004e92:	2b0b      	cmp	r3, #11
 8004e94:	d90f      	bls.n	8004eb6 <_malloc_r+0x7e>
 8004e96:	600b      	str	r3, [r1, #0]
 8004e98:	50cd      	str	r5, [r1, r3]
 8004e9a:	18cc      	adds	r4, r1, r3
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 f8d0 	bl	8005042 <__malloc_unlock>
 8004ea2:	f104 000b 	add.w	r0, r4, #11
 8004ea6:	1d23      	adds	r3, r4, #4
 8004ea8:	f020 0007 	bic.w	r0, r0, #7
 8004eac:	1ac3      	subs	r3, r0, r3
 8004eae:	d0d3      	beq.n	8004e58 <_malloc_r+0x20>
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	50e2      	str	r2, [r4, r3]
 8004eb4:	e7d0      	b.n	8004e58 <_malloc_r+0x20>
 8004eb6:	428c      	cmp	r4, r1
 8004eb8:	684b      	ldr	r3, [r1, #4]
 8004eba:	bf16      	itet	ne
 8004ebc:	6063      	strne	r3, [r4, #4]
 8004ebe:	6013      	streq	r3, [r2, #0]
 8004ec0:	460c      	movne	r4, r1
 8004ec2:	e7eb      	b.n	8004e9c <_malloc_r+0x64>
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	6849      	ldr	r1, [r1, #4]
 8004ec8:	e7cc      	b.n	8004e64 <_malloc_r+0x2c>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d005      	beq.n	8004ee0 <_malloc_r+0xa8>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f808 	bl	8004eec <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d0cf      	beq.n	8004e80 <_malloc_r+0x48>
 8004ee0:	6025      	str	r5, [r4, #0]
 8004ee2:	e7db      	b.n	8004e9c <_malloc_r+0x64>
 8004ee4:	20000090 	.word	0x20000090
 8004ee8:	20000094 	.word	0x20000094

08004eec <_sbrk_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4c06      	ldr	r4, [pc, #24]	; (8004f08 <_sbrk_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	f7fc fa58 	bl	80013ac <_sbrk>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_sbrk_r+0x1a>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_sbrk_r+0x1a>
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20000dac 	.word	0x20000dac

08004f0c <__sread>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	460c      	mov	r4, r1
 8004f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f14:	f000 f896 	bl	8005044 <_read_r>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	bfab      	itete	ge
 8004f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f20:	181b      	addge	r3, r3, r0
 8004f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f26:	bfac      	ite	ge
 8004f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f2a:	81a3      	strhlt	r3, [r4, #12]
 8004f2c:	bd10      	pop	{r4, pc}

08004f2e <__swrite>:
 8004f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f32:	461f      	mov	r7, r3
 8004f34:	898b      	ldrh	r3, [r1, #12]
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	4605      	mov	r5, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	d505      	bpl.n	8004f4c <__swrite+0x1e>
 8004f40:	2302      	movs	r3, #2
 8004f42:	2200      	movs	r2, #0
 8004f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f48:	f000 f868 	bl	800501c <_lseek_r>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	f000 b817 	b.w	8004f94 <_write_r>

08004f66 <__sseek>:
 8004f66:	b510      	push	{r4, lr}
 8004f68:	460c      	mov	r4, r1
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 f855 	bl	800501c <_lseek_r>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	bf15      	itete	ne
 8004f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strheq	r3, [r4, #12]
 8004f84:	bf18      	it	ne
 8004f86:	81a3      	strhne	r3, [r4, #12]
 8004f88:	bd10      	pop	{r4, pc}

08004f8a <__sclose>:
 8004f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8e:	f000 b813 	b.w	8004fb8 <_close_r>
	...

08004f94 <_write_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4c07      	ldr	r4, [pc, #28]	; (8004fb4 <_write_r+0x20>)
 8004f98:	4605      	mov	r5, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fc f882 	bl	80010ac <_write>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_write_r+0x1e>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_write_r+0x1e>
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000dac 	.word	0x20000dac

08004fb8 <_close_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4c06      	ldr	r4, [pc, #24]	; (8004fd4 <_close_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	f7fc f9bd 	bl	8001342 <_close>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_close_r+0x1a>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_close_r+0x1a>
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000dac 	.word	0x20000dac

08004fd8 <_fstat_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4c07      	ldr	r4, [pc, #28]	; (8004ff8 <_fstat_r+0x20>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4605      	mov	r5, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	f7fc f9b8 	bl	800135a <_fstat>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d102      	bne.n	8004ff4 <_fstat_r+0x1c>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	b103      	cbz	r3, 8004ff4 <_fstat_r+0x1c>
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000dac 	.word	0x20000dac

08004ffc <_isatty_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4c06      	ldr	r4, [pc, #24]	; (8005018 <_isatty_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4605      	mov	r5, r0
 8005004:	4608      	mov	r0, r1
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	f7fc f9b7 	bl	800137a <_isatty>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_isatty_r+0x1a>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	b103      	cbz	r3, 8005016 <_isatty_r+0x1a>
 8005014:	602b      	str	r3, [r5, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000dac 	.word	0x20000dac

0800501c <_lseek_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4c07      	ldr	r4, [pc, #28]	; (800503c <_lseek_r+0x20>)
 8005020:	4605      	mov	r5, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	2200      	movs	r2, #0
 8005028:	6022      	str	r2, [r4, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fc f9b0 	bl	8001390 <_lseek>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_lseek_r+0x1e>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	b103      	cbz	r3, 800503a <_lseek_r+0x1e>
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20000dac 	.word	0x20000dac

08005040 <__malloc_lock>:
 8005040:	4770      	bx	lr

08005042 <__malloc_unlock>:
 8005042:	4770      	bx	lr

08005044 <_read_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c07      	ldr	r4, [pc, #28]	; (8005064 <_read_r+0x20>)
 8005048:	4605      	mov	r5, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	6022      	str	r2, [r4, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fc f958 	bl	8001308 <_read>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_read_r+0x1e>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	b103      	cbz	r3, 8005062 <_read_r+0x1e>
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000dac 	.word	0x20000dac

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
